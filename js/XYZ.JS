const user = JSON.parse(localStorage.getItem(CONSTANTS.LOCAL_STORAGE_KEY))
isAuthorized();
getAllData();
//Declarations of variables
let clicksEncro = 0;
let clicksDevelop = 0;
let clicksLanduse = 0;
let clicksComplaints = 0;
let temp = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
let objects = [];
let selectionResponse = [];
let status;
let sceneLayer;
let sceneLayerView;
let field;
let type;
let button;
let filterCarousel = 0;
let dataTableResponse;
var years = 2015;
var areaAnd = "";     // New 
var complaintAnd = "";
var developementAnd = "";
var encroachmentAnd = "";
var landuseAnd = "";
var yearAnd = "";
var qryBind = "";
let year;
let bdgLayer = null;
let bdgLayerView = null;
let timeline2015;
let timeline2016;
let timeline2017;
let timeline2018;
let timeline2019;
let timeline2020;
let timeline2021;
let timeline2022;
let timeline2023;
let timeline2024;
let timeline2025;
let residentialCount = 0;
let commercialCount = 0;
let educationalCount = 0;
let recreationalCount = 0;
let industrialCount = 0;
let governmentalCount = 0;
let institutionalCount = 0;
let utilitiesCount = 0;
let mixedUseCount = 0;
let commercialResidentialMixCount = 0;
let completed = 0;
let unchanged = 0;
let encroachmentDemolished = 0;
let underConstruction = 0;
let depleted = 0;
let planned = 0;
let proposed = 0;
let underMaintenence = 0;
let stopped = 0;
let encroachmentForDemolition = 0;
let legalChange = 0;
let illegalChange = 0;
let disputed = 0;
let verificationPending = 0;
let illegal = 0;
let developmentDemolished = 0;
let developmentForDemolition = 0;
let unaffected = 0;
let assigned = 0;
let reported = 0;
let complaintClosed = 0;
let inspected = 0;
let complaintsDemolished = 0;
let flagEncro = 0;
let flagDevelop = 0;
let flagTimeline = 0;
let flagLanduse = 0;
let flagComplaints = 0;
let selectionFlagEncro = 0;
let selectionFlagDevelop = 0;
let selectionFlagLanduse = 0;
let selectionFlagComplaints = 0;
var trHTML = '';
let flagCharts = 1;
let flagDataTable = 0;
var countDataTable = 0;
var legendShowClick = 0;
let count = {
    timeline: {
        timeline2015: [],
        timeline2016: [],
        timeline2017: [],
        timeline2018: [],
        timeline2019: [],
        timeline2020: [],
        timeline2021: [],
        timeline2022: [],
        timeline2023: [],
        timeline2024: [],
        timeline2025: [],
    },
    landuse: {
        residential: [],
        commercial: [],
        educational: [],
        industrial: [],
        recreational: [],
        commercialResidentialMix: [],
        governmental: [],
        institutional: [],
        utilities: [],
        mixedUse: []
    },
    development: {
        completed: [],
        unchanged: [],
        developmentDemolished: [],
        underConstruction: [],
        depleted: [],
        planned: [],
        proposed: [],
        underMaintenence: [],
        stopped: [],
        developmentForDemolition: []
    },
    encroachment: {
        legalChange: [],
        illegalChange: [],
        disputed: [],
        verificationPending: [],
        illegal: [],
        encroachmentDemolished: [],
        encroachmentForDemolition: [],
        unaffected: [],
    },
    complaints: {
        assigned: [],
        reported: [],
        complaintClosed: [],
        inspected: [],
        complaintsDemolished: []
    }
}
let countSelection = {
    landuse: {
        residential: [],
        commercial: [],
        educational: [],
        industrial: [],
        recreational: [],
        commercialResidentialMix: [],
        governmental: [],
        institutional: [],
        utilities: [],
        mixedUse: []
    },
    development: {
        completed: [],
        unchanged: [],
        developmentDemolished: [],
        underConstruction: [],
        depleted: [],
        planned: [],
        proposed: [],
        underMaintenence: [],
        stopped: [],
        developmentForDemolition: []
    },
    encroachment: {
        legalChange: [],
        illegalChange: [],
        disputed: [],
        verificationPending: [],
        illegal: [],
        encroachmentDemolished: [],
        encroachmentForDemolition: [],
        unaffected: [],
    },
    complaints: {
        assigned: [],
        reported: [],
        complaintClosed: [],
        inspected: [],
        complaintsDemolished: []
    }
}

let highlightCharts = {
    timeline: {
        timeline2015: [],
        timeline2016: [],
        timeline2017: [],
        timeline2018: [],
        timeline2019: [],
        timeline2020: [],
        timeline2021: [],
        timeline2022: [],
        timeline2023: [],
        timeline2024: [],
        timeline2025: [],

    },
    landuse2015: {
        residential2015: [],
        commercial2015: [],
        educational2015: [],
        industrial2015: [],
        recreational2015: [],
        commercialResidentialMix2015: [],
        governmental2015: [],
        institutional2015: [],
        utilities2015: [],
        mixedUse2015: []
    },
    development2015: {
        completed2015: [],
        unchanged2015: [],
        demolished2015: [],
        underConstruction2015: [],
        depleted2015: [],
        planned2015: [],
        proposed2015: [],
        underMaintenence2015: [],
        stopped2015: [],
        forDemolition2015: []
    },
    encroachment2015: {
        legalChange2015: [],
        illegalChange2015: [],
        disputed2015: [],
        verificationPending2015: [],
        illegal2015: [],
        demolished2015: [],
        forDemolition2015: [],
        unaffected2015: [],
    },
    complaints2015: {
        assigned2015: [],
        reported2015: [],
        complaintClosed2015: [],
        inspected2015: [],
        demolished2015: []
    },
    landuse2016: {
        residential2016: [],
        commercial2016: [],
        educational2016: [],
        industrial2016: [],
        recreational2016: [],
        commercialResidentialMix2016: [],
        governmental2016: [],
        institutional2016: [],
        utilities2016: [],
        mixedUse2016: []
    },
    development2016: {
        completed2016: [],
        unchanged2016: [],
        demolished2016: [],
        underConstruction2016: [],
        depleted2016: [],
        planned2016: [],
        proposed2016: [],
        underMaintenence2016: [],
        stopped2016: [],
        forDemolition2016: []
    },
    encroachment2016: {
        legalChange2016: [],
        illegalChange2016: [],
        disputed2016: [],
        verificationPending2016: [],
        illegal2016: [],
        demolished2016: [],
        forDemolition2016: [],
        unaffected2016: [],
    },
    complaints2016: {
        assigned2016: [],
        reported2016: [],
        complaintClosed2016: [],
        inspected2016: [],
        demolished2016: []
    },
    landuse2017: {
        residential2017: [],
        commercial2017: [],
        educational2017: [],
        industrial2017: [],
        recreational2017: [],
        commercialResidentialMix2017: [],
        governmental2017: [],
        institutional2017: [],
        utilities2017: [],
        mixedUse2017: []
    },
    development2017: {
        completed2017: [],
        unchanged2017: [],
        demolished2017: [],
        underConstruction2017: [],
        depleted2017: [],
        planned2017: [],
        proposed2017: [],
        underMaintenence2017: [],
        stopped2017: [],
        forDemolition2017: []
    },
    encroachment2017: {
        legalChange2017: [],
        illegalChange2017: [],
        disputed2017: [],
        verificationPending2017: [],
        illegal2017: [],
        demolished2017: [],
        forDemolition2017: [],
        unaffected2017: [],
    },
    complaints2017: {
        assigned2017: [],
        reported2017: [],
        complaintClosed2017: [],
        inspected2017: [],
        demolished2017: []
    },

    landuse2018: {
        residential2018: [],
        commercial2018: [],
        educational2018: [],
        industrial2018: [],
        recreational2018: [],
        commercialResidentialMix2018: [],
        governmental2018: [],
        institutional2018: [],
        utilities2018: [],
        mixedUse2018: []
    },
    development2018: {
        completed2018: [],
        unchanged2018: [],
        demolished2018: [],
        underConstruction2018: [],
        depleted2018: [],
        planned2018: [],
        proposed2018: [],
        underMaintenence2018: [],
        stopped2018: [],
        forDemolition2018: []
    },
    encroachment2018: {
        legalChange2018: [],
        illegalChange2018: [],
        disputed2018: [],
        verificationPending2018: [],
        illegal2018: [],
        demolished2018: [],
        forDemolition2018: [],
        unaffected2018: [],
    },
    complaints2018: {
        assigned2018: [],
        reported2018: [],
        complaintClosed2018: [],
        inspected2018: [],
        demolished2018: [],
    },
    landuse2019: {
        residential2019: [],
        commercial2019: [],
        educational2019: [],
        industrial2019: [],
        recreational2019: [],
        commercialResidentialMix2019: [],
        governmental2019: [],
        institutional2019: [],
        utilities2019: [],
        mixedUse2019: []
    },
    development2019: {
        completed2019: [],
        unchanged2019: [],
        demolished2019: [],
        underConstruction2019: [],
        depleted2019: [],
        planned2019: [],
        proposed2019: [],
        underMaintenence2019: [],
        stopped2019: [],
        forDemolition2019: []
    },
    encroachment2019: {
        legalChange2019: [],
        illegalChange2019: [],
        disputed2019: [],
        verificationPending2019: [],
        illegal2019: [],
        demolished2019: [],
        forDemolition2019: [],
        unaffected2019: [],
    },
    complaints2019: {
        assigned2019: [],
        reported2019: [],
        complaintClosed2019: [],
        inspected2019: [],
        demolished2019: []
    },
    landuse2020: {
        residential2020: [],
        commercial2020: [],
        educational2020: [],
        industrial2020: [],
        recreational2020: [],
        commercialResidentialMix2020: [],
        governmental2020: [],
        institutional2020: [],
        utilities2020: [],
        mixedUse2020: []
    },
    development2020: {
        completed2020: [],
        unchanged2020: [],
        demolished2020: [],
        underConstruction2020: [],
        depleted2020: [],
        planned2020: [],
        proposed2020: [],
        underMaintenence2020: [],
        stopped2020: [],
        forDemolition2020: []
    },
    encroachment2020: {
        legalChange2020: [],
        illegalChange2020: [],
        disputed2020: [],
        verificationPending2020: [],
        illegal2020: [],
        demolished2020: [],
        forDemolition2020: [],
        unaffected2020: [],
    },
    complaints2020: {
        assigned2020: [],
        reported2020: [],
        complaintClosed2020: [],
        inspected2020: [],
        demolished2020: []
    },
    landuse2021: {
        residential2021: [],
        commercial2021: [],
        educational2021: [],
        industrial2021: [],
        recreational2021: [],
        commercialResidentialMix2021: [],
        governmental2021: [],
        institutional2021: [],
        utilities2021: [],
        mixedUse2021: []
    },
    development2021: {
        completed2021: [],
        unchanged2021: [],
        demolished2021: [],
        underConstruction2021: [],
        depleted2021: [],
        planned2021: [],
        proposed2021: [],
        underMaintenence2021: [],
        stopped2021: [],
        forDemolition2021: []
    },
    encroachment2021: {
        legalChange2021: [],
        illegalChange2021: [],
        disputed2021: [],
        verificationPending2021: [],
        illegal2021: [],
        demolished2021: [],
        forDemolition2021: [],
        unaffected2021: [],
    },
    complaints2021: {
        assigned2021: [],
        reported2021: [],
        complaintClosed2021: [],
        inspected2021: [],
        demolished2021: []
    },
    landuse2022: {
        residential2022: [],
        commercial2022: [],
        educational2022: [],
        industrial2022: [],
        recreational2022: [],
        commercialResidentialMix2022: [],
        governmental2022: [],
        institutional2022: [],
        utilities2022: [],
        mixedUse2022: []
    },
    development2022: {
        completed2022: [],
        unchanged2022: [],
        demolished2022: [],
        underConstruction2022: [],
        depleted2022: [],
        planned2022: [],
        proposed2022: [],
        underMaintenence2022: [],
        stopped2022: [],
        forDemolition2022: []
    },
    encroachment2022: {
        legalChange2022: [],
        illegalChange2022: [],
        disputed2022: [],
        verificationPending2022: [],
        illegal2022: [],
        demolished2022: [],
        forDemolition2022: [],
        unaffected2022: [],
    },
    complaints2022: {
        assigned2022: [],
        reported2022: [],
        complaintClosed2022: [],
        inspected2022: [],
        demolished2022: []
    },
    landuse2023: {
        residential2023: [],
        commercial2023: [],
        educational2023: [],
        industrial2023: [],
        recreational2023: [],
        commercialResidentialMix2023: [],
        governmental2023: [],
        institutional2023: [],
        utilities2023: [],
        mixedUse2023: []
    },
    development2023: {
        completed2023: [],
        unchanged2023: [],
        demolished2023: [],
        underConstruction2023: [],
        depleted2023: [],
        planned2023: [],
        proposed2023: [],
        underMaintenence2023: [],
        stopped2023: [],
        forDemolition2023: []
    },
    encroachment2023: {
        legalChange2023: [],
        illegalChange2023: [],
        disputed2023: [],
        verificationPending2023: [],
        illegal2023: [],
        demolished2023: [],
        forDemolition2023: [],
        unaffected2023: [],
    },
    complaints2023: {
        assigned2023: [],
        reported2023: [],
        complaintClosed2023: [],
        inspected2023: [],
        demolished2023: []
    },
    landuse2024: {
        residential2024: [],
        commercial2024: [],
        educational2024: [],
        industrial2024: [],
        recreational2024: [],
        commercialResidentialMix2024: [],
        governmental2024: [],
        institutional2024: [],
        utilities2024: [],
        mixedUse2024: []
    },
    development2024: {
        completed2024: [],
        unchanged2024: [],
        demolished2024: [],
        underConstruction2024: [],
        depleted2024: [],
        planned2024: [],
        proposed2024: [],
        underMaintenence2024: [],
        stopped2024: [],
        forDemolition2024: []
    },
    encroachment2024: {
        legalChange2024: [],
        illegalChange2024: [],
        disputed2024: [],
        verificationPending2024: [],
        illegal2024: [],
        demolished2024: [],
        forDemolition2024: [],
        unaffected2024: [],
    },
    complaints2024: {
        assigned2024: [],
        reported2024: [],
        complaintClosed2024: [],
        inspected2024: [],
        demolished2024: []
    },

    landuse2025: {
        residential2025: [],
        commercial2025: [],
        educational2025: [],
        industrial2025: [],
        recreational2025: [],
        commercialResidentialMix2025: [],
        governmental2025: [],
        institutional2025: [],
        utilities2025: [],
        mixedUse2025: []
    },
    development2025: {
        completed2025: [],
        unchanged2025: [],
        demolished2025: [],
        underConstruction2025: [],
        depleted2025: [],
        planned2025: [],
        proposed2025: [],
        underMaintenence2025: [],
        stopped2025: [],
        forDemolition2025: []
    },
    encroachment2025: {
        legalChange2025: [],
        illegalChange2025: [],
        disputed2025: [],
        verificationPending2025: [],
        illegal2025: [],
        demolished2025: [],
        forDemolition2025: [],
        unaffected2025: [],
    },
    complaints2025: {
        assigned2025: [],
        reported2025: [],
        complaintClosed2025: [],
        inspected2025: [],
        demolished2025: []
    },
}
let a = 0;
let b = 0;
let c = 0;
let d = 0;
let e = 0;
let f = 0;
let g = 0;
let h = 0;
let i = 0;
let j = 0;
let k = 0;
let l = 0;
let m = 0;
let n = 0;
let data = {
    landuseArea: {
        residential: [],
        commercial: [],
        educational: [],
        recreational: [],
        industrial: [],
        governmental: [],
        institutional: [],
        utilities: [],
        mixedUse: [],
        commercialResidentialMix: []
    },
    encroachmentArea: {
        legalChange: [],
        illegalChange: [],
        disputed: [],
        verificationPending: [],
        illegal: [],
        encroachmentDemolished: [],
        encroachmentForDemolition: [],
        unaffected: []
    },
    developmentArea: {
        completed: [],
        unchanged: [],
        developmentDemolished: [],
        underConstruction: [],
        depleted: [],
        planned: [],
        proposed: [],
        underMaintenence: [],
        stopped: [],
        developmentForDemolition: [],
    },
};
let dataSelection = {
    landuseArea: {
        residential: [],
        commercial: [],
        educational: [],
        recreational: [],
        industrial: [],
        governmental: [],
        institutional: [],
        utilities: [],
        mixedUse: [],
        commercialResidentialMix: []
    },
    encroachmentArea: {
        legalChange: [],
        illegalChange: [],
        disputed: [],
        verificationPending: [],
        illegal: [],
        encroachmentDemolished: [],
        encroachmentForDemolition: [],
        unaffected: []
    },
    developmentArea: {
        completed: [],
        unchanged: [],
        developmentDemolished: [],
        underConstruction: [],
        depleted: [],
        planned: [],
        proposed: [],
        underMaintenence: [],
        stopped: [],
        developmentForDemolition: [],
    },
};

let response;
let encro = ["legal change", "illegal change", "disputed", "verification pending", "illegal", "demolished", "for demolition", "unaffected",]
let develop = ['completed', 'unchanged', 'demolished', 'under construction', 'depleted', 'planned', 'proposed', 'under maintainence', 'stopped', 'for demolition'];
let land = ['residential', 'commericial', 'educational', 'recreational', 'industrial', 'governmental', 'institutional', 'utilities', 'mixed use', 'commercial residential mix'];
let complain = ['assigned', 'reported', 'complaint closed', 'inspected', 'demolished',]
let timeline = ['2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025'];
let EncroachmentResponse;
let DevelopmentResponse;
let LanduseResponse;
let ComplaintsResponse;
let TimeLineResponse;
const appState = {
    minYear: 0,
    maxYear: 0,
    totalCount: null,
    filterGeometry: null,
    features: null,
    selection: false,
    nullValue: null,
    startYearField: "date_constructed",
    endYearField: "date_demolished"
};
//*******************************CHARTS RENDERING ********************************************
var landusePieCharts = new ApexCharts(document.querySelector("#landusePieChart"), landusePieChart);
landusePieCharts.render();
var landuseAreaPieCharts = new ApexCharts(document.querySelector("#landuseAreaPieChart"), landuseAreaPieChart);
landuseAreaPieCharts.render();
var landuseLineCharts = new ApexCharts(document.querySelector("#landuseLineChart"), landuseLineChart);
landuseLineCharts.render();
var landuseAreaLineCharts = new ApexCharts(document.querySelector("#landuseAreaLineChart"), landuseAreaLineChart);
landuseAreaLineCharts.render();
var landuseBarCharts = new ApexCharts(document.querySelector("#landuseBarChart"), landuseBarChart);
landuseBarCharts.render();
var landuseAreaBarCharts = new ApexCharts(document.querySelector("#landuseAreaBarChart"), landuseAreaBarChart);
landuseAreaBarCharts.render();
var developmentPieCharts = new ApexCharts(document.querySelector("#developmentPieChart"), developmentPieChart);
developmentPieCharts.render();
var developmentAreaPieCharts = new ApexCharts(document.querySelector("#developmentAreaPieChart"), developmentAreaPieChart);
developmentAreaPieCharts.render();
var developmentLineCharts = new ApexCharts(document.querySelector("#developmentLineChart"), developmentLineChart);
developmentLineCharts.render();
var developmentAreaBarCharts = new ApexCharts(document.querySelector("#developmentAreaBarChart"), developmentAreaBarChart);
developmentAreaBarCharts.render();
var developmentAreaLineCharts = new ApexCharts(document.querySelector("#developmentAreaLineChart"), developmentAreaLineChart);
developmentAreaLineCharts.render();
var encroachmentPieCharts = new ApexCharts(document.querySelector("#encroachmentPieChart"), encroachmentPieChart);
encroachmentPieCharts.render();
var encroachmentAreaPieCharts = new ApexCharts(document.querySelector("#encroachmentAreaPieChart"), encroachmentAreaPieChart);
encroachmentAreaPieCharts.render();
var encroachmentBarCharts = new ApexCharts(document.querySelector("#encroachmentBarChart"), encroachmentBarChart);
encroachmentBarCharts.render();
var encroachmentLineCharts = new ApexCharts(document.querySelector("#encroachmentLineChart"), encroachmentLineChart);
encroachmentLineCharts.render();
var encroachmentAreaLineCharts = new ApexCharts(document.querySelector("#encroachmentAreaLineChart"), encroachmentAreaLineChart);
encroachmentAreaLineCharts.render();
var complaintsPieCharts = new ApexCharts(document.querySelector("#complaintsPieChart"), complaintsPieChart);
complaintsPieCharts.render();
var complaintsLineCharts = new ApexCharts(document.querySelector("#complaintsLineChart"), complaintsLineChart);
complaintsLineCharts.render();
var complaintsBarCharts = new ApexCharts(document.querySelector("#complaintsBarChart"), complaintsBarChart);
complaintsBarCharts.render();
var timelinePieCharts = new ApexCharts(document.querySelector("#timelinePieChart"), timelinePieChart);
timelinePieCharts.render();
var timelineBarCharts = new ApexCharts(document.querySelector("#timelineBarChart"), timelineBarChart);
timelineBarCharts.render();
// var timelineLineCharts = new ApexCharts(document.querySelector("#timelineLineChart"), timelineLineChart);
// timelineLineCharts.render();
//*******************************CHARTS RENDERING ENDS********************************************
$('#next').on('click', () => {


    if (clicksEncro == 0) {

        clicksEncro++;

        encroachmentBarCharts.render();
        encroachmentLineCharts.render();
    }
    else if (clicksEncro == 1) {

        clicksEncro++;


        encroachmentAreaLineCharts.render();

    }
    else if (clicksEncro == 2) {

        clicksEncro = 0;



        encroachmentPieCharts.render();
        encroachmentAreaPieCharts.render();
    }


});
$('#next1').on('click', () => {


    if (clicksDevelop == 0) {

        clicksDevelop++;

        developmentAreaBarCharts.render();
        developmentLineCharts.render();
    }
    else if (clicksDevelop == 1) {

        clicksDevelop++;


        developmentAreaLineCharts.render();

    }
    else if (clicksDevelop == 2) {

        clicksDevelop = 0;


        developmentPieCharts.render();
        developmentAreaPieCharts.render();
    }


});

$('#next2').on('click', () => {


    if (clicksLanduse == 0) {

        clicksLanduse++;

        landuseBarCharts.render();
        landuseAreaBarCharts.render();
    }
    else if (clicksLanduse == 1) {

        clicksLanduse++;


        landuseLineCharts.render();
        landuseAreaLineCharts.render();

    }
    else if (clicksLanduse == 2) {

        clicksLanduse = 0;



        landusePieCharts.render();
        landuseAreaPieCharts.render();
    }


});
$('#next3').on('click', () => {


    if (clicksComplaints == 0) {

        clicksComplaints++;

        complaintsLineCharts.render();

    }
    else if (clicksComplaints == 1) {

        clicksComplaints = 0;


        complaintsPieCharts.render();
        complaintsBarCharts.render();

    }



});
function getEncroachData() {
    return new Promise((resolve, reject) => {
        // ---------------- Getting all Data-------------------
        $.ajax({
            type: 'GET',
            contentType: 'application/json',
            url: `${CONSTANTS.API_URL}/getEncroachData`,
            headers: {
                'Authorization': `Bearer ${user.token}`
            },
            success: function (res) {
                EncroachmentResponse = res;
                resolve();
            },
            error: (err) => {

                reject();
            }
        });
    });
}
function getLanduseData() {

    // ---------------- Getting all Data-------------------
    $.ajax({
        type: 'GET',
        contentType: 'application/json',
        url: `${CONSTANTS.API_URL}/getLanduseData`,
        headers: {
            'Authorization': `Bearer ${user.token}`
        },
        success: function (res) {
            LanduseResponse = res;

        },
        error: () => {

        }
    });

}
function getDevelopmentData() {

    // ---------------- Getting all Data-------------------
    $.ajax({
        type: 'GET',
        data: '',
        contentType: 'application/json',
        headers: {
            'Authorization': `Bearer ${user.token}`
        },
        url: `${CONSTANTS.API_URL}/getDevelopmentData`,
        success: function (res) {
            DevelopmentResponse = res;

        },
        error: () => {

        }
    });

}
function getTimelineData() {

    // ---------------- Getting all Data-------------------
    $.ajax({
        type: 'GET',
        data: '',
        contentType: 'application/json',
        headers: {
            'Authorization': `Bearer ${user.token}`
        },
        url: `${CONSTANTS.API_URL}/getTimelineData`,
        success: function (res) {
            TimeLineResponse = res;

        },
        error: () => {

        }
    });

}
function getComplaintsData() {

    // ---------------- Getting all Data-------------------
    $.ajax({
        type: 'GET',
        data: '',
        contentType: 'application/json',
        headers: {
            'Authorization': `Bearer ${user.token}`
        },
        url: `${CONSTANTS.API_URL}/getComplaintsData`,
        success: function (res) {
            ComplaintsResponse = res;

        },
        error: () => {

        }
    });

}
function getAllData() {
    $.ajax({
        type: 'GET',
        contentType: 'application/json',
        url: `${CONSTANTS.API_URL}/getAllData`,
        headers: {
            'Authorization': `Bearer ${user.token}`
        },
        success: function (res) {
            dataTableResponse = res;


        }
    });
}
const obj = Object.assign({}, user)

$("#computerButton").on('click', function () {

    $.ajax({
        type: 'POST',
        url: `${CONSTANTS.API_URL}/controlPanel`,
        data: {
            obj
        },
        headers: {
            'Authorization': `Bearer ${user.token}`
        },
        success: (response) => {
            window.open(`${CONSTANTS.APP_URL}/controlPanel.html`);
        },
        error: (err) => {
            if (err.status === 500) {
                swal({
                    title: "You are not Authorized for this service",
                    text: "",
                    icon: "error",
                    button: "Ok",
                });
            }

        }
    });
});


getLanduseData();
getDevelopmentData();
getComplaintsData();
getTimelineData();

$('.closeCharts').on('click', () => {
    $('.charts').css({
        'display': 'none'
    });
    $('#charts_image').css({
        'visibility': 'visible'
    });
    $('.closeCharts').css({
        'display': 'none'
    });
    $("#closeback").css({
        'display': 'none'
    });
    $('.legend').hide();
    $('.legend').css({
        'bottom': '30px'
    });

})
$('#charts_image').on('click', () => {
    flagCharts = 1;
    if (flagDataTable == 1) {
        $("#dataTableContent").hide();
    }
    $('.charts').css({
        'display': 'block'
    });
    $('.closeCharts').css({
        'display': 'block'
    });
    $('#charts_image').css({
        'visibility': 'hidden'
    });
    $("#closeback").css({
        'display': 'block'
    });
    $('.legend').css({
        'bottom': '334px'
    });
    $('.legend').show();
})
function Area(res, type) {
    if (type == "encroachment") {
        flagEncro = 1;
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2015 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2015.legalChange2015.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2015.illegalChange2015.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2015.disputed2015.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2015.verificationPending2015.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2015.illegal2015.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2015.demolished2015.push(i.attributes.OBJECTID); f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2015.forDemolition2015.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2015.unaffected2015.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2016 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2016.legalChange2016.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2016.illegalChange2016.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2016.disputed2016.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2016.verificationPending2016.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2016.illegal2016.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2016.demolished2016.push(i.attributes.OBJECTID); f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2016.forDemolition2016.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2016.unaffected2016.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2017 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2017.legalChange2017.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2017.illegalChange2017.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2017.disputed2017.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2017.verificationPending2017.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2017.illegal2017.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2017.demolished2017.push(i.attributes.OBJECTID);
                        f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2017.forDemolition2017.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2017.unaffected2017.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2018 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2018.legalChange2018.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2018.illegalChange2018.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2018.disputed2018.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2018.verificationPending2018.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2018.illegal2018.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2018.demolished2018.push(i.attributes.OBJECTID); f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2018.forDemolition2018.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2018.unaffected2018.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2019 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2019.legalChange2019.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2019.illegalChange2019.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2019.disputed2019.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2019.verificationPending2019.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2019.illegal2019.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2019.demolished2019.push(i.attributes.OBJECTID); f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2019.forDemolition2019.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2019.unaffected2019.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        h = 0;
        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2020 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2020.legalChange2020.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2020.illegalChange2020.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2020.disputed2020.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2020.verificationPending2020.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2020.illegal2020.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2020.demolished2020.push(i.attributes.OBJECTID); f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2020.forDemolition2020.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2020.unaffected2020.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2021 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2021.legalChange2021.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2021.illegalChange2021.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2021.disputed2021.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2021.verificationPending2021.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2021.illegal2021.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2021.demolished2021.push(i.attributes.OBJECTID); f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2021.forDemolition2021.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2021.unaffected2021.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2022 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2022.legalChange2022.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2022.illegalChange2022.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2022.disputed2022.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2022.verificationPending2022.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2022.illegal2022.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2022.demolished2022.push(i.attributes.OBJECTID); f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2022.forDemolition2022.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2022.unaffected2022.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2023 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2023.legalChange2023.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2023.illegalChange2023.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2023.disputed2023.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2023.verificationPending2023.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2023.illegal2023.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2023.demolished2023.push(i.attributes.OBJECTID); f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2023.forDemolition2023.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2023.unaffected2023.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2024 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2024.legalChange2024.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2024.illegalChange2024.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2024.disputed2024.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2024.verificationPending2024.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2024.illegal2024.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2024.demolished2024.push(i.attributes.OBJECTID); f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2024.forDemolition2024.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2024.unaffected2024.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

        encro.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Encroachment2025 == elements) {
                    if (elements == "legal change") {
                        highlightCharts.encroachment2025.legalChange2025.push(i.attributes.OBJECTID);
                        legalChange++;
                        a += i.attributes.area1;
                    } else if (elements == "illegal change") {
                        highlightCharts.encroachment2025.illegalChange2025.push(i.attributes.OBJECTID);
                        illegalChange++;
                        b += i.attributes.area1;
                    } else if (elements == "disputed") {
                        highlightCharts.encroachment2025.disputed2025.push(i.attributes.OBJECTID);
                        disputed++;
                        c += i.attributes.area1;
                    } else if (elements == "verification pending") {
                        highlightCharts.encroachment2025.verificationPending2025.push(i.attributes.OBJECTID);
                        verificationPending++;
                        d += i.attributes.area1;
                    } else if (elements == "illegal") {
                        highlightCharts.encroachment2025.illegal2025.push(i.attributes.OBJECTID);
                        illegal++;
                        e += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.encroachment2025.demolished2025.push(i.attributes.OBJECTID); f += i.attributes.area1;
                        encroachmentDemolished++;
                    } else if (elements == "for demolition") {
                        highlightCharts.encroachment2025.forDemolition2025.push(i.attributes.OBJECTID);
                        encroachmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "unaffected") {
                        highlightCharts.encroachment2025.unaffected2025.push(i.attributes.OBJECTID);
                        unaffected++;
                        h += i.attributes.area1;
                    }
                }
            });
        });
        count.encroachment.legalChange.push(legalChange);
        count.encroachment.illegalChange.push(illegalChange);
        count.encroachment.disputed.push(disputed);
        count.encroachment.verificationPending.push(verificationPending);
        count.encroachment.illegal.push(illegal);
        count.encroachment.encroachmentDemolished.push(encroachmentDemolished);
        count.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
        count.encroachment.unaffected.push(unaffected);
        data.encroachmentArea.legalChange.push(Math.round(a));
        data.encroachmentArea.illegalChange.push(Math.round(b));
        data.encroachmentArea.disputed.push(Math.round(c));
        data.encroachmentArea.verificationPending.push(Math.round(d))
        data.encroachmentArea.illegal.push(Math.round(e));
        data.encroachmentArea.encroachmentDemolished.push(Math.round(f));
        data.encroachmentArea.encroachmentForDemolition.push(Math.round(g));
        data.encroachmentArea.unaffected.push(Math.round(h));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        legalChange = 0;
        illegalChange = 0;
        disputed = 0;
        verificationPending = 0;
        illegal = 0;
        encroachmentDemolished = 0;
        encroachmentForDemolition = 0;
        unaffected = 0;

    }
    if (type == "development") {

        flagDevelop = 1;

        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;


        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2015 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2015.completed2015.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2015.unchanged2015.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2015.demolished2015.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2015.underConstruction2015.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2015.depleted2015.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2015.planned2015.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2015.forDemolition2015.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2015.proposed2015.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2015.underMaintenence2015.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2015.stopped2015.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2016 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2016.completed2016.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2016.unchanged2016.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2016.demolished2016.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2016.underConstruction2016.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2016.depleted2016.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2016.planned2016.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2016.forDemolition2016.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2016.proposed2016.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2016.underMaintenence2016.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2016.stopped2016.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2017 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2017.completed2017.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2017.unchanged2017.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2017.demolished2017.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2017.underConstruction2017.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2017.depleted2017.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2017.planned2017.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2017.forDemolition2017.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2017.proposed2017.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2017.underMaintenence2017.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2017.stopped2017.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2018 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2018.completed2018.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2018.unchanged2018.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2018.demolished2018.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2018.underConstruction2018.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2018.depleted2018.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2018.planned2018.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2018.forDemolition2018.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2018.proposed2018.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2018.underMaintenence2018.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2018.stopped2018.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2019 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2019.completed2019.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2019.unchanged2019.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2019.demolished2019.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2019.underConstruction2019.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2019.depleted2019.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2019.planned2019.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2019.forDemolition2019.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2019.proposed2019.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2019.underMaintenence2019.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2019.stopped2019.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2020 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2020.completed2020.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2020.unchanged2020.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2020.demolished2020.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2020.underConstruction2020.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2020.depleted2020.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2020.planned2020.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2020.forDemolition2020.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2020.proposed2020.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2020.underMaintenence2020.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2020.stopped2020.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2021 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2021.completed2021.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2021.unchanged2021.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2021.demolished2021.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2021.underConstruction2021.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2021.depleted2021.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2021.planned2021.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2021.forDemolition2021.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2021.proposed2021.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2021.underMaintenence2021.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2021.stopped2021.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2022 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2022.completed2022.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2022.unchanged2022.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2022.demolished2022.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2022.underConstruction2022.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2022.depleted2022.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2022.planned2022.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2022.forDemolition2022.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2022.proposed2022.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2022.underMaintenence2022.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2022.stopped2022.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2023 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2023.completed2023.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2023.unchanged2023.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2023.demolished2023.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2023.underConstruction2023.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2023.depleted2023.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2023.planned2023.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2023.forDemolition2023.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2023.proposed2023.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2023.underMaintenence2023.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2023.stopped2023.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2024 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2024.completed2024.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2024.unchanged2024.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2024.demolished2024.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2024.underConstruction2024.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2024.depleted2024.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2024.planned2024.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2024.forDemolition2024.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2024.proposed2024.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2024.underMaintenence2024.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2024.stopped2024.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
        develop.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Development2025 == elements) {
                    if (elements == "completed") {
                        highlightCharts.development2025.completed2025.push(i.attributes.OBJECTID);
                        completed++;
                        a += i.attributes.area1;
                    } else if (elements == "unchanged") {
                        highlightCharts.development2025.unchanged2025.push(i.attributes.OBJECTID);
                        unchanged++;
                        b += i.attributes.area1;
                    } else if (elements == "demolished") {
                        highlightCharts.development2025.demolished2025.push(i.attributes.OBJECTID); c += i.attributes.area1;
                        developmentDemolished++;
                        c += i.attributes.area1
                    } else if (elements == "under construction") {
                        highlightCharts.development2025.underConstruction2025.push(i.attributes.OBJECTID);
                        underConstruction++;
                        d += i.attributes.area1;
                    } else if (elements == "depleted") {
                        highlightCharts.development2025.depleted2025.push(i.attributes.OBJECTID);
                        depleted++;
                        e += i.attributes.area1;
                    } else if (elements == "planned") {
                        highlightCharts.development2025.planned2025.push(i.attributes.OBJECTID);
                        planned++;
                        f += i.attributes.area1;
                    } else if (elements == "for demolition") {
                        highlightCharts.development2025.forDemolition2025.push(i.attributes.OBJECTID);
                        developmentForDemolition++;
                        g += i.attributes.area1;
                    } else if (elements == "proposed") {
                        highlightCharts.development2025.proposed2025.push(i.attributes.OBJECTID);
                        proposed++;
                        h += i.attributes.area1;
                    } else if (elements == "under maintainence") {
                        highlightCharts.development2025.underMaintenence2025.push(i.attributes.OBJECTID);
                        underMaintenence++;
                        i += i.attributes.area1;
                    } else if (elements == "stopped") {
                        highlightCharts.development2025.stopped2025.push(i.attributes.OBJECTID);
                        stopped++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.development.completed.push(completed);
        count.development.unchanged.push(unchanged);
        count.development.developmentDemolished.push(developmentDemolished);
        count.development.underConstruction.push(underConstruction);
        count.development.depleted.push(depleted);
        count.development.planned.push(planned);
        count.development.proposed.push(proposed);
        count.development.underMaintenence.push(underMaintenence);
        count.development.stopped.push(stopped);
        count.development.developmentForDemolition.push(developmentForDemolition);
        data.developmentArea.completed.push(Math.round(a));
        data.developmentArea.unchanged.push(Math.round(b));
        data.developmentArea.developmentDemolished.push(Math.round(c));
        data.developmentArea.underConstruction.push(Math.round(d))
        data.developmentArea.depleted.push(Math.round(e));
        data.developmentArea.planned.push(Math.round(f));
        data.developmentArea.developmentForDemolition.push(Math.round(g));
        data.developmentArea.proposed.push(Math.round(h));
        data.developmentArea.underMaintenence.push(Math.round(i));
        data.developmentArea.stopped.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;

        completed = 0;
        unchanged = 0;
        developmentDemolished = 0;
        underConstruction = 0;
        depleted = 0;
        planned = 0;
        proposed = 0;
        underMaintenence = 0;
        stopped = 0;
        developmentForDemolition = 0;
    }
    if (type == "landuse") {
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;


        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2015 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2015.residential2015.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2015.commercial2015.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2015.educational2015.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2015.recreational2015.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2015.industrial2015.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2015.governmental2015.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2015.institutional2015.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2015.utilities2015.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2015.mixedUse2015.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2015.commercialResidentialMix2015.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2016 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2016.residential2016.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2016.commercial2016.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2016.educational2016.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2016.recreational2016.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2016.industrial2016.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2016.governmental2016.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2016.institutional2016.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2016.utilities2016.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2016.mixedUse2016.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2016.commercialResidentialMix2016.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2017 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2017.residential2017.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2017.commercial2017.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2017.educational2017.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2017.recreational2017.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2017.industrial2017.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2017.governmental2017.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2017.institutional2017.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2017.utilities2017.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2017.mixedUse2017.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2017.commercialResidentialMix2017.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2018 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2018.residential2018.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2018.commercial2018.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2018.educational2018.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2018.recreational2018.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2018.industrial2018.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2018.governmental2018.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2018.institutional2018.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2018.utilities2018.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2018.mixedUse2018.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2018.commercialResidentialMix2018.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2019 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2019.residential2019.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2019.commercial2019.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2019.educational2019.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2019.recreational2019.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2019.industrial2019.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2019.governmental2019.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2019.institutional2019.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2019.utilities2019.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2019.mixedUse2019.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2019.commercialResidentialMix2019.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2020 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2020.residential2020.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2020.commercial2020.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2020.educational2020.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2020.recreational2020.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2020.industrial2020.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2020.governmental2020.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2020.institutional2020.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2020.utilities2020.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2020.mixedUse2020.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2020.commercialResidentialMix2020.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2021 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2021.residential2021.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2021.commercial2021.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2021.educational2021.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2021.recreational2021.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2021.industrial2021.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2021.governmental2021.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2021.institutional2021.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2021.utilities2021.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2021.mixedUse2021.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2021.commercialResidentialMix2021.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2022 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2022.residential2022.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2022.commercial2022.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2022.educational2022.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2022.recreational2022.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2022.industrial2022.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2022.governmental2022.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2022.institutional2022.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2022.utilities2022.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2022.mixedUse2022.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2022.commercialResidentialMix2022.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2023 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2023.residential2023.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2023.commercial2023.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2023.educational2023.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2023.recreational2023.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2023.industrial2023.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2023.governmental2023.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2023.institutional2023.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2023.utilities2023.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2023.mixedUse2023.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2023.commercialResidentialMix2023.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2024 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2024.residential2024.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2024.commercial2024.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2024.educational2024.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2024.recreational2024.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2024.industrial2024.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2024.governmental2024.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2024.institutional2024.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2024.utilities2024.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2024.mixedUse2024.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2024.commercialResidentialMix2024.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
        land.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Landuse2025 == elements) {
                    if (elements == "residential") {
                        highlightCharts.landuse2025.residential2025.push(i.attributes.OBJECTID);
                        residentialCount++;
                        a += i.attributes.area1;
                    } else if (elements == "commericial") {
                        highlightCharts.landuse2025.commercial2025.push(i.attributes.OBJECTID);
                        commercialCount++;
                        b += i.attributes.area1;
                    } else if (elements == "educational") {
                        highlightCharts.landuse2025.educational2025.push(i.attributes.OBJECTID);
                        educationalCount++;
                        c += i.attributes.area1;
                    } else if (elements == "recreational") {
                        highlightCharts.landuse2025.recreational2025.push(i.attributes.OBJECTID);
                        recreationalCount++;
                        d += i.attributes.area1;
                    } else if (elements == "industrial") {
                        highlightCharts.landuse2025.industrial2025.push(i.attributes.OBJECTID);
                        industrialCount++;
                        e += i.attributes.area1;
                    } else if (elements == "governmental") {
                        highlightCharts.landuse2025.governmental2025.push(i.attributes.OBJECTID);
                        governmentalCount++;
                        f += i.attributes.area1;
                    } else if (elements == "institutional") {
                        highlightCharts.landuse2025.institutional2025.push(i.attributes.OBJECTID);
                        institutionalCount++;
                        g += i.attributes.area1;
                    } else if (elements == "utilities") {
                        highlightCharts.landuse2025.utilities2025.push(i.attributes.OBJECTID);
                        utilitiesCount++;
                        h += i.attributes.area1;
                    } else if (elements == "mixed use") {
                        highlightCharts.landuse2025.mixedUse2025.push(i.attributes.OBJECTID);
                        mixedUseCount++;
                        i += i.attributes.area1;
                    } else if (elements == "commercial residential mix") {
                        highlightCharts.landuse2025.commercialResidentialMix2025.push(i.attributes.OBJECTID);
                        commercialResidentialMixCount++;
                        j += i.attributes.area1;
                    }
                }
            });
        });
        count.landuse.residential.push(residentialCount);
        count.landuse.commercial.push(commercialCount);
        count.landuse.educational.push(educationalCount);
        count.landuse.industrial.push(industrialCount);
        count.landuse.recreational.push(recreationalCount);
        count.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
        count.landuse.governmental.push(governmentalCount);
        count.landuse.institutional.push(institutionalCount);
        count.landuse.utilities.push(utilitiesCount);
        count.landuse.mixedUse.push(mixedUseCount);
        data.landuseArea.residential.push(Math.round(a));
        data.landuseArea.commercial.push(Math.round(b));
        data.landuseArea.educational.push(Math.round(c));
        data.landuseArea.recreational.push(Math.round(d))
        data.landuseArea.industrial.push(Math.round(e));
        data.landuseArea.governmental.push(Math.round(f));
        data.landuseArea.institutional.push(Math.round(g));
        data.landuseArea.utilities.push(Math.round(h));
        data.landuseArea.mixedUse.push(Math.round(i));
        data.landuseArea.commercialResidentialMix.push(Math.round(j));
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        e = 0;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        j = 0;
        residentialCount = 0;
        commercialCount = 0;
        educationalCount = 0;
        industrialCount = 0;
        recreationalCount = 0;
        commercialResidentialMixCount = 0;
        governmentalCount = 0;
        institutionalCount = 0;
        utilitiesCount = 0;
        mixedUseCount = 0;
    }
    if (type == "complaints") {
        //initial complaints chart highlight Code

        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2015 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2015.assigned2015.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2015.reported2015.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2015.complaintClosed2015.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2015.inspected2015.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2015.demolished2015.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2016 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2016.assigned2016.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2016.reported2016.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2016.complaintClosed2016.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2016.inspected2016.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2016.demolished2016.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2017 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2017.assigned2017.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2017.reported2017.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2017.complaintClosed2017.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2017.inspected2017.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2017.demolished2017.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2018 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2018.assigned2018.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2018.reported2018.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2018.complaintClosed2018.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2018.inspected2018.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2018.demolished2018.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2019 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2019.assigned2019.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2019.reported2019.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2019.complaintClosed2019.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2019.inspected2019.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2019.demolished2019.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2020 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2020.assigned2020.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2020.reported2020.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2020.complaintClosed2020.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2020.inspected2020.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2020.demolished2020.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2021 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2021.assigned2021.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2021.reported2021.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2021.complaintClosed2021.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2021.inspected2021.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2021.demolished2021.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2022 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2022.assigned2022.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2022.reported2022.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2022.complaintClosed2022.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2022.inspected2022.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2022.demolished2022.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2023 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2023.assigned2023.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2023.reported2023.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2023.complaintClosed2023.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2023.inspected2023.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2023.demolished2023.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2024 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2024.assigned2024.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2024.reported2024.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2024.complaintClosed2024.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2024.inspected2024.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2024.demolished2024.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        complain.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.Complaints2025 == elements) {
                    if (elements == "assigned") {
                        highlightCharts.complaints2025.assigned2025.push(i.attributes.OBJECTID);
                        assigned++;
                    }
                    else if (elements == "reported") {
                        highlightCharts.complaints2025.reported2025.push(i.attributes.OBJECTID);
                        reported++;
                    } else if (elements == "complaint closed") {
                        highlightCharts.complaints2025.complaintClosed2025.push(i.attributes.OBJECTID);
                        complaintClosed++;
                    } else if (elements == "inspected") {
                        highlightCharts.complaints2025.inspected2025.push(i.attributes.OBJECTID);
                        inspected++;
                    } else if (elements == "demolished") {
                        highlightCharts.complaints2025.demolished2025.push(i.attributes.OBJECTID);
                        complaintsDemolished++;
                    }
                }
            });
        });
        count.complaints.assigned.push(assigned);
        count.complaints.reported.push(reported);
        count.complaints.complaintClosed.push(complaintClosed);
        count.complaints.inspected.push(inspected);
        count.complaints.complaintsDemolished.push(complaintsDemolished);
        assigned = 0;
        reported = 0;
        complaintClosed = 0;
        inspected = 0;
        complaintsDemolished = 0;
        //initial complaints chart highlight Code and Count ENDs
    }
    if (type == "timeline") {
        flagTimeline = 1;
        timeline2015 = 0;
        timeline2016 = 0;
        timeline2017 = 0;
        timeline2018 = 0;
        timeline2019 = 0;
        timeline2020 = 0;
        timeline2021 = 0;
        timeline2022 = 0;
        timeline2023 = 0;
        timeline2024 = 0;
        timeline2025 = 0;
        timeline.forEach(elements => {
            res.features.filter(i => {
                if (i.attributes.date_constructed == elements) {
                    if (elements == "2015") {
                        highlightCharts.timeline.timeline2015.push(i.attributes.OBJECTID);
                        timeline2015++;
                    }
                    else if (elements == "2016") {
                        highlightCharts.timeline.timeline2016.push(i.attributes.OBJECTID);
                        timeline2016++;
                    } else if (elements == "2017") {
                        highlightCharts.timeline.timeline2017.push(i.attributes.OBJECTID);
                        timeline2017++;
                    } else if (elements == "2018") {
                        highlightCharts.timeline.timeline2018.push(i.attributes.OBJECTID);
                        timeline2018++;
                    } else if (elements == "2019") {
                        highlightCharts.timeline.timeline2019.push(i.attributes.OBJECTID);
                        timeline2019++;
                    }
                    else if (elements == "2020") {
                        highlightCharts.timeline.timeline2020.push(i.attributes.OBJECTID);
                        timeline2020++;
                    }
                    else if (elements == "2021") {
                        highlightCharts.timeline.timeline2021.push(i.attributes.OBJECTID);
                        timeline2021++;
                    } else if (elements == "2022") {
                        highlightCharts.timeline.timeline2022.push(i.attributes.OBJECTID);
                        timeline2022++;
                    } else if (elements == "2023") {
                        highlightCharts.timeline.timeline2023.push(i.attributes.OBJECTID);
                        timeline2023++;
                    } else if (elements == "2024") {
                        highlightCharts.timeline.timeline2024.push(i.attributes.OBJECTID);
                        timeline2024++;
                    } else if (elements == "2025") {
                        highlightCharts.timeline.timeline2025.push(i.attributes.OBJECTID);
                        timeline2025++;
                    }
                }
            });
        });
        count.timeline.timeline2015.push(timeline2015);
        count.timeline.timeline2016.push(timeline2016);
        count.timeline.timeline2017.push(timeline2017);
        count.timeline.timeline2018.push(timeline2018);
        count.timeline.timeline2019.push(timeline2019);
        count.timeline.timeline2020.push(timeline2020);
        count.timeline.timeline2021.push(timeline2021);
        count.timeline.timeline2022.push(timeline2022);
        count.timeline.timeline2023.push(timeline2023);
        count.timeline.timeline2024.push(timeline2024);
        count.timeline.timeline2025.push(timeline2025);
        console.log(count.timeline);
    }
}
function statusCheckForRendering(status, type) {
    if (status == 2015) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2015(bdgLayer, objects)
        } else if (type == "encroachment") {

            encroachmentRenderer.applyEnroachmentBuildingColor2015(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2015(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2015(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2015(bdgLayer, objects)
        }
    } else if (status == 2016) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2016(bdgLayer, objects)
        } else if (type == "encroachment") {
            encroachmentRenderer.applyEnroachmentBuildingColor2016(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2016(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2016(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2016(bdgLayer, objects)
        }
    }
    if (status == 2017) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2017(bdgLayer, objects)
        } else if (type == "encroachment") {
            encroachmentRenderer.applyEnroachmentBuildingColor2017(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2017(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2017(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2017(bdgLayer, objects)
        }
    } else if (status == 2018) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2018(bdgLayer, objects)
        } else if (type == "encroachment") {
            encroachmentRenderer.applyEnroachmentBuildingColor2018(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2018(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2018(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2018(bdgLayer, objects)
        }
    } else if (status == 2019) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2019(bdgLayer, objects)
        } else if (type == "encroachment") {
            encroachmentRenderer.applyEnroachmentBuildingColor2019(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2019(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2019(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2019(bdgLayer, objects)
        }
    } else if (status == 2020) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2020(bdgLayer, objects)
        } else if (type == "encroachment") {
            encroachmentRenderer.applyEnroachmentBuildingColor2020(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2020(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2020(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2020(bdgLayer, objects)
        }
    } else if (status == 2021) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2021(bdgLayer, objects)
        } else if (type == "encroachment") {
            encroachmentRenderer.applyEnroachmentBuildingColor2021(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2021(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2021(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2021(bdgLayer, objects)
        }
    } else if (status == 2022) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2022(bdgLayer, objects)
        } else if (type == "encroachment") {
            encroachmentRenderer.applyEnroachmentBuildingColor2022(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2022(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2022(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2022(bdgLayer, objects)
        }
    } else if (status == 2023) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2023(bdgLayer, objects)
        } else if (type == "encroachment") {
            encroachmentRenderer.applyEnroachmentBuildingColor2023(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2023(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2023(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2023(bdgLayer, objects)
        }
    } else if (status == 2024) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2024(bdgLayer, objects)
        } else if (type == "encroachment") {
            encroachmentRenderer.applyEnroachmentBuildingColor2024(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2024(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2024(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2024(bdgLayer, objects)
        }
    } else if (status == 2025) {
        if (type == "landuse") {
            landuseRenderer.applyLanduseBuildingColor2025(bdgLayer, objects)
        } else if (type == "encroachment") {
            encroachmentRenderer.applyEnroachmentBuildingColor2025(bdgLayer, objects)
        } else if (type == "development") {
            developmentRenderer.applyDevelopmentBuildingColor2025(bdgLayer, objects)
        } else if (type == "complaints") {
            complaintsRenderer.applyComplaintBuildingColor2025(bdgLayer, objects)
        }
        else if (type == "timeline") {
            timeLineRenderer.applyTimeLineBuildingColor2025(bdgLayer, objects)
        }
    }
}
function paginationTimeline(status) {
    type = "timeline";


    objects.push({
        value: "2015",
        symbol: timeLineColors.buildingColor2015,
        label: "2015"
    });
    objects.push({
        value: "2016",
        symbol: timeLineColors.buildingColor2016,
        label: "2016"
    });
    objects.push({
        value: "2017",
        symbol: timeLineColors.buildingColor2017,
        label: "2017"
    });
    objects.push({
        value: "2018",
        symbol: timeLineColors.buildingColor2018,
        label: "2018"
    });
    objects.push({
        value: "2019",
        symbol: timeLineColors.buildingColor2019,
        label: "2019"
    });
    objects.push({
        value: "2020",
        symbol: timeLineColors.buildingColor2020,
        label: "2020"
    });
    objects.push({
        value: "2021",
        symbol: timeLineColors.buildingColor2021,
        label: "2021"
    });
    objects.push({
        value: "2022",
        symbol: timeLineColors.buildingColor2022,
        label: "2022"
    });
    objects.push({
        value: "2023",
        symbol: timeLineColors.buildingColor2023,
        label: "2023"
    });
    objects.push({
        value: "2024",
        symbol: timeLineColors.buildingColor2024,
        label: "2024"
    });
    objects.push({
        value: "2025",
        symbol: timeLineColors.buildingColor2025,
        label: "2025"
    });


    statusCheckForRendering(status, type);
}
function paginationLanduse(status, response) {
    type = "landuse";
    if (status == 2015) {

        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });
        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    else if (status == 2016) {
        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });
        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    else if (status == 2017) {
        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });
        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    else if (status == 2018) {
        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });
        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    else if (status == 2019) {
        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });
        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    else if (status == 2020) {
        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        ;
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });
        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    else if (status == 2021) {
        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        ;
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });
        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    else if (status == 2022) {
        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });
        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    else if (status == 2023) {
        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });
        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    else if (status == 2024) {
        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });
        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    else if (status == 2025) {
        objects.push({
            value: "residential",
            symbol: landuseColors.residentialBuildingColor,
            label: "residential"
        });
        ;
        objects.push({
            value: "commericial",
            symbol: landuseColors.commercialBuildingColor,
            label: "commericial"
        });
        objects.push({
            value: "educational",
            symbol: landuseColors.educationalBuildingColor,
            label: "educational"
        });
        objects.push({
            value: "industrial",
            symbol: landuseColors.industrialBuildingColor,
            label: "industrial"
        });
        objects.push({
            value: "recreational",
            symbol: landuseColors.recreationalBuildingColor,
            label: "recreational"
        });

        objects.push({
            value: "commercial residential mix",
            symbol: landuseColors.mixedCommercialResidentialBuildingColor,
            label: "commercial residential mix"
        });
        objects.push({
            value: "governmental",
            symbol: landuseColors.governmentalBuildingColor,
            label: "governmental"
        });
        objects.push({
            value: "institutional",
            symbol: landuseColors.institutionalBuildingColor,
            label: "institutional"
        });
        objects.push({
            value: "utilities",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "utilities"
        });
        objects.push({
            value: "mixed use",
            symbol: landuseColors.utilitiesBuildingColor,
            label: "mixed use"
        });
    }
    statusCheckForRendering(status, type);
}
function paginationEncroachment(status, response) {
    type = "encroachment";
    if (status == 2015) {

        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    else if (status == 2016) {
        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    else if (status == 2017) {
        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    else if (status == 2018) {
        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    else if (status == 2019) {
        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    else if (status == 2020) {
        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    else if (status == 2021) {
        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    else if (status == 2022) {
        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    else if (status == 2023) {
        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    else if (status == 2024) {
        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    else if (status == 2025) {
        objects.push({
            value: "legal change",
            symbol: encroachmentColors.legalChangeBuildingColor,
            label: "legal change"
        });
        objects.push({
            value: "illegal change",
            symbol: encroachmentColors.illegalChangeBuildingColor,
            label: "illegal change"
        });
        objects.push({
            value: "verification pending",
            symbol: encroachmentColors.verificationPendingBuildingColor,
            label: "verification pending"
        });
        objects.push({
            value: "disputed",
            symbol: encroachmentColors.disputedBuildingColor,
            label: "disputed"
        });
        objects.push({
            value: "illegal",
            symbol: encroachmentColors.illegalBuildingColor,
            label: "illegal"
        });
        objects.push({
            value: "demolished",
            symbol: encroachmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "for demolition",
            symbol: encroachmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
        objects.push({
            value: "unaffected",
            symbol: encroachmentColors.unaffectedBuildingColor,
            label: "unaffected"
        });
    }
    statusCheckForRendering(status, type);
}
function paginationDevelopment(status, response) {
    type = "development";
    if (status == 2015) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    }
    else if (status == 2016) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    }
    else if (status == 2017) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    }
    else if (status == 2018) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    }
    else if (status == 2019) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    }
    else if (status == 2020) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    }
    else if (status == 2021) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    }
    else if (status == 2022) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    }
    else if (status == 2023) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    } else if (status == 2024) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    }
    else if (status == 2025) {
        objects.push({
            value: "completed",
            symbol: developmentColors.completedBuildingColor,
            label: "completed"
        });
        objects.push({
            value: "unchanged",
            symbol: developmentColors.unchangedBuildingColor,
            label: "unchanged"
        });
        objects.push({
            value: "demolished",
            symbol: developmentColors.demolishedBuildingColor,
            label: "demolished"
        });
        objects.push({
            value: "under construction",
            symbol: developmentColors.underConstructionBuildingColor,
            label: "under construction"
        });
        objects.push({
            value: "depleted",
            symbol: developmentColors.depletedBuildingColor,
            label: "depleted"
        });
        objects.push({
            value: "planned",
            symbol: developmentColors.plannedBuildingColor,
            label: "planned"
        });
        objects.push({
            value: "proposed",
            symbol: developmentColors.proposedBuildingColor,
            label: "proposed"
        });
        objects.push({
            value: "under maintainence",
            symbol: developmentColors.underMaintenanceBuildingColor,
            label: "under maintainence"
        });
        objects.push({
            value: "stopped",
            symbol: developmentColors.stoppedBuildingColor,
            label: "stopped"
        });
        objects.push({
            value: "for demolition",
            symbol: developmentColors.forDemolitionBuildingColor,
            label: "for demolition"
        });
    }
    statusCheckForRendering(status, type);
}
function paginationComplaints(status, response) {
    type = "complaints"
    if (status == 2015) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    else if (status == 2016) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    else if (status == 2017) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    else if (status == 2018) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    else if (status == 2019) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    else if (status == 2020) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        ;
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    else if (status == 2021) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    else if (status == 2022) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        ;
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    else if (status == 2023) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    else if (status == 2024) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        ;
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    else if (status == 2025) {
        objects.push({
            value: "assigned",
            symbol: complaintsColors.assignedBuildingColor,
            label: "assigned"
        });
        objects.push({
            value: "reported",
            symbol: complaintsColors.reportedBuildingColor,
            label: "reported"
        });
        objects.push({
            value: "complaint closed",
            symbol: complaintsColors.complaintClosedBuildingColor,
            label: "complaint closed"
        });
        objects.push({
            value: "inspected",
            symbol: complaintsColors.inspectedBuildingColor,
            label: "inspected"
        });
        objects.push({
            value: "demolished",
            symbol: complaintsColors.demolishedBuildingColor,
            label: "demolished"
        });
    }
    statusCheckForRendering(status, type);
}
//**********************UPDATE CHARTS WITHOUT TIMESLIDER******************************************
landuseLineCharts.updateSeries([{
    name: 'Residential',
    data: count.landuse.residential
}, {
    name: 'Commercial',
    data: count.landuse.commercial
}, {
    name: 'Educational',
    data: count.landuse.educational
}, {
    name: 'Recreational',
    data: count.landuse.recreational
}, {
    name: 'Industrial',
    data: count.landuse.industrial
}, {
    name: 'Governmental',
    data: count.landuse.governmental
}, {
    name: 'Institutional',
    data: count.landuse.institutional
}, {
    name: 'Utilities',
    data: count.landuse.utilities
}, {
    name: 'Mixed Use',
    data: count.landuse.mixedUse
}, {
    name: 'Commerical Residential Mix',
    data: count.landuse.commercialResidentialMix
}]);
landuseAreaLineCharts.updateSeries([{
    name: 'Residential',
    data: data.landuseArea.residential
}, {
    name: 'Commercial',
    data: data.landuseArea.commercial
}, {
    name: 'Educational',
    data: data.landuseArea.educational
}, {
    name: 'Recreational',
    data: data.landuseArea.recreational
}, {
    name: 'Industrial',
    data: data.landuseArea.industrial
}, {
    name: 'Governmental',
    data: data.landuseArea.governmental
}, {
    name: 'Institutional',
    data: data.landuseArea.institutional
}, {
    name: 'Utilities',
    data: data.landuseArea.utilities
}, {
    name: 'Mixed Use',
    data: data.landuseArea.mixedUse
}, {
    name: 'Commerical Residential Mix',
    data: data.landuseArea.commercialResidentialMix
}]);
encroachmentLineCharts.updateSeries([{
    name: 'Legal Change',
    data: count.encroachment.legalChange
}, {
    name: 'Illegal Change',
    data: count.encroachment.illegalChange
}, {
    name: 'Disputed',
    data: count.encroachment.disputed
}, {
    name: 'Verification Pending',
    data: count.encroachment.verificationPending
}, {
    name: 'Illegal',
    data: count.encroachment.illegal
}, {
    name: 'Demolished',
    data: count.encroachment.encroachmentDemolished
}, {
    name: 'For Demolition',
    data: count.encroachment.encroachmentForDemolition
}, {
    name: 'Unaffected',
    data: count.encroachment.unaffected
}]);
encroachmentAreaLineCharts.updateSeries([{
    name: 'Legal Change',
    data: data.encroachmentArea.legalChange
}, {
    name: 'Illegal Change',
    data: data.encroachmentArea.illegalChange
}, {
    name: 'Disputed',
    data: data.encroachmentArea.disputed
}, {
    name: 'Verification Pending',
    data: data.encroachmentArea.verificationPending
}, {
    name: 'Illegal',
    data: data.encroachmentArea.illegal
}, {
    name: 'Demolished',
    data: data.encroachmentArea.encroachmentDemolished
}, {
    name: 'For Demolition',
    data: data.encroachmentArea.encroachmentForDemolition
}, {
    name: 'Unaffected',
    data: data.encroachmentArea.unaffected
}]);
developmentLineCharts.updateSeries([{
    name: 'Completed',
    data: count.development.completed
}, {
    name: 'Unchanged',
    data: count.development.unchanged
}, {
    name: 'Demolished',
    data: count.development.developmentDemolished
}, {
    name: 'Under Construction',
    data: count.development.underConstruction
}, {
    name: 'Depleted',
    data: count.development.depleted
}, {
    name: 'Planned',
    data: count.development.planned
}, {
    name: 'Proposed',
    data: count.development.proposed
}, {
    name: 'Under Maintenence',
    data: count.development.underMaintenence
}, {
    name: 'Stopped',
    data: count.development.stopped
}, {
    name: 'For Demolition',
    data: count.development.developmentForDemolition
},]);
complaintsLineCharts.updateSeries([{
    name: 'Assigned',
    data: count.complaints.assigned
}, {
    name: 'Reported',
    data: count.complaints.reported
}, {
    name: 'Complaint Closed',
    data: count.complaints.complaintClosed
}, {
    name: 'Inspected',
    data: count.complaints.inspected
}, {
    name: 'Demolished',
    data: count.complaints.complaintsDemolished
}]);
developmentAreaLineCharts.updateSeries([{
    name: 'Completed',
    data: data.developmentArea.completed
}, {
    name: 'Unchanged',
    data: data.developmentArea.unchanged
}, {
    name: 'Demolished',
    data: data.developmentArea.developmentDemolished
}, {
    name: 'Under Construction',
    data: data.developmentArea.underConstruction
}, {
    name: 'Depleted',
    data: data.developmentArea.depleted
}, {
    name: 'Planned',
    data: data.developmentArea.planned
}, {
    name: 'Proposed',
    data: data.developmentArea.proposed
}, {
    name: 'Under Maintenence',
    data: data.developmentArea.underMaintenence
}, {
    name: 'Stopped',
    data: data.developmentArea.stopped
}, {
    name: 'For Demolition',
    data: data.developmentArea.developmentForDemolition
},]);
//**********************UPDATE CHARTS WITHOUT TIMESLIDER ENDS*************************************
//***************************************Update series for initial 2015 ***************************
function updateSeriesForInitial2015(response, type) {

    landuseBarCharts.updateSeries([{
        name: 'Residential',
        data: [count.landuse.residential[0]]
    }, {
        name: 'Commercial',
        data: [count.landuse.commercial[0]]
    },
    {
        name: 'Educational',
        data: [count.landuse.educational[0]]
    }, {
        name: 'Recreational',
        data: [count.landuse.industrial[0]]
    }, {
        name: 'Industrial',
        data: [count.landuse.recreational[0]]
    }, {
        name: 'Governmental',
        data: [count.landuse.commercialResidentialMix[0]]
    }, {
        name: 'Institutional',
        data: [count.landuse.governmental[0]]
    }, {
        name: 'Utilities',
        data: [count.landuse.institutional[0]]
    }, {
        name: 'MixedUse',
        data: [count.landuse.utilities[0]]
    }, {
        name: 'Commercial Residential Mix',
        data: [count.landuse.mixedUse[0]]
    }]);



    landuseAreaBarCharts.updateSeries([{
        name: 'Residential',
        data: [data.landuseArea.residential[0]]
    }, {
        name: 'Commercial',
        data: [data.landuseArea.commercial[0]]
    },
    {
        name: 'Educational',
        data: [data.landuseArea.educational[0]]
    }, {
        name: 'Recreational',
        data: [data.landuseArea.industrial[0]]
    }, {
        name: 'Industrial',
        data: [data.landuseArea.recreational[0]]
    }, {
        name: 'Governmental',
        data: [data.landuseArea.commercialResidentialMix[0]]
    }, {
        name: 'Institutional',
        data: [data.landuseArea.governmental[0]]
    }, {
        name: 'Utilities',
        data: [data.landuseArea.institutional[0]]
    }, {
        name: 'MixedUse',
        data: [data.landuseArea.utilities[0]]
    }, {
        name: 'Commercial Residential Mix',
        data: [data.landuseArea.mixedUse[0]]
    }]);


    landusePieCharts.updateSeries([count.landuse.residential[0],
    count.landuse.commercial[0], count.landuse.educational[0], count.landuse.recreational[0], count.landuse.industrial[0], count.landuse.governmental[0], count.landuse.institutional[0], count.landuse.utilities[0], count.landuse.mixedUse[0], count.landuse.commercialResidentialMix[0]
    ]);
    landuseAreaPieCharts.updateSeries([data.landuseArea.residential[0],
    data.landuseArea.commercial[0], data.landuseArea.educational[0], data.landuseArea.recreational[0], data.landuseArea.industrial[0], data.landuseArea.governmental[0], data.landuseArea.institutional[0], data.landuseArea.utilities[0], data.landuseArea.mixedUse[0], data.landuseArea.commercialResidentialMix[0]
    ]);
    developmentAreaPieCharts.updateSeries([data.developmentArea.completed[0],
    data.developmentArea.unchanged[0], data.developmentArea.developmentDemolished[0], data.developmentArea.underConstruction[0], data.developmentArea.depleted[0], data.developmentArea.planned[0], data.developmentArea.proposed[0], data.developmentArea.underMaintenence[0], data.developmentArea.stopped[0], data.developmentArea.developmentForDemolition[0]
    ]);
    developmentAreaBarCharts.updateSeries([{
        name: 'Completed',
        data: [data.developmentArea.completed[0]]
    }, {
        name: 'Unchanged',
        data: [data.developmentArea.unchanged[0]]
    }, {
        name: 'Demolished',
        data: [data.developmentArea.developmentDemolished[0]]
    }, {
        name: 'Under Construction',
        data: [data.developmentArea.underConstruction[0]]
    }, {
        name: 'Depleted',
        data: [data.developmentArea.depleted[0]]
    }, {
        name: 'Planned',
        data: [data.developmentArea.planned[0]]
    }, {
        name: 'Proposed',
        data: [data.developmentArea.proposed[0]]
    }, {
        name: 'Under Maintenence',
        data: [data.developmentArea.underMaintenence[0]]
    }, {
        name: 'Stopped',
        data: [data.developmentArea.stopped[0]]
    }, {
        name: 'For Demolition',
        data: [data.developmentArea.developmentForDemolition[0]]
    },]);
    developmentPieCharts.updateSeries([count.development.completed[0],
    count.development.unchanged[0], count.development.developmentDemolished[0], count.development.underConstruction[0], count.development.depleted[0], count.development.planned[0], count.development.proposed[0], count.development.underMaintenence[0], count.development.stopped[0], count.development.developmentForDemolition[0]
    ]);
    encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[0], data.encroachmentArea.illegalChange[0], data.encroachmentArea.disputed[0], data.encroachmentArea.verificationPending[0], data.encroachmentArea.illegal[0], data.encroachmentArea.encroachmentDemolished[0], data.encroachmentArea.encroachmentForDemolition[0], data.encroachmentArea.unaffected[0]
    ]);
    encroachmentBarCharts.updateSeries([{
        name: 'Legal Change',
        data: [count.encroachment.legalChange[0]]
    },
    {
        name: 'Illegal Change',
        data: [count.encroachment.illegalChange[0]]
    },
    {
        name: 'Disputed',
        data: [count.encroachment.disputed[0]]
    },
    {
        name: 'Verification Pending',
        data: [count.encroachment.verificationPending[0]]
    },
    {
        name: 'Illegal',
        data: [count.encroachment.illegal[0]]
    },
    {
        name: 'Demolished',
        data: [count.encroachment.encroachmentDemolished[0]]
    },
    {
        name: 'For Demolition',
        data: [count.encroachment.encroachmentForDemolition[0]]
    },
    {
        name: 'Unaffected',
        data: [count.encroachment.unaffected[0]]
    }
    ]);
    encroachmentPieCharts.updateSeries([count.encroachment.legalChange[0],
    count.encroachment.illegalChange[0], count.encroachment.disputed[0], count.encroachment.verificationPending[0], count.encroachment.illegal[0], count.encroachment.encroachmentDemolished[0], count.encroachment.encroachmentForDemolition[0], count.encroachment.unaffected[0]
    ]);
    complaintsBarCharts.updateSeries([
        {
            name: 'assigned',
            data: [count.complaints.assigned[0]]
        },
        {
            name: 'reported',
            data: [count.complaints.reported[0]]
        },
        {
            name: 'complaintClosed',
            data: [count.complaints.complaintClosed[0]]
        },
        {
            name: 'inspected',
            data: [count.complaints.inspected[0]]
        },
        {
            name: 'complaintsDemolished',
            data: [count.complaints.complaintsDemolished[0]]
        }
    ]);
    complaintsPieCharts.updateSeries([count.complaints.assigned[0],
    count.complaints.reported[0], count.complaints.complaintClosed[0], count.complaints.inspected[0], count.complaints.complaintsDemolished[0]]);
    timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0], count.timeline.timeline2017[0], count.timeline.timeline2018[0], count.timeline.timeline2019[0], count.timeline.timeline2020[0], count.timeline.timeline2021[0], count.timeline.timeline2022[0], count.timeline.timeline2023[0], count.timeline.timeline2024[0], count.timeline.timeline2025[0]])

    timelineBarCharts.updateSeries([{
        name: '2015',
        data: [count.timeline.timeline2015[0]],
    },
    {
        name: '2016',
        data: [0],
    },
    {
        name: '2017',
        data: [0],
    },
    {
        name: '2018',
        data: [0],
    },
    {
        name: '2019',
        data: [0],
    },
    {
        name: '2020',
        data: [0],
    },
    {
        name: '2021',
        data: [0],
    },
    {
        name: '2022',
        data: [0],
    },
    {
        name: '2023',
        data: [0],
    },
    {
        name: '2024',
        data: [0],
    },
    {
        name: '2025',
        data: [0],
    },
    ])
}
//***************************************Update series for initial 2015 ends  ***************************
function updateMap(response, type) {

    //const allStats = response1.features[0].attributes;
    if (appState.maxYear == 2015) {

        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;



            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[0]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[0]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[0]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[0]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[0]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[0]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[0]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[0]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[0]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[0]]
            }]);


            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[0]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[0]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[0]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[0]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[0]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[0]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[0]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[0]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[0]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[0]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[0],
            count.landuse.commercial[0], count.landuse.educational[0], count.landuse.recreational[0], count.landuse.industrial[0], count.landuse.governmental[0], count.landuse.institutional[0], count.landuse.utilities[0], count.landuse.mixedUse[0], count.landuse.commercialResidentialMix[0]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[0],
            data.landuseArea.commercial[0], data.landuseArea.educational[0], data.landuseArea.recreational[0], data.landuseArea.industrial[0], data.landuseArea.governmental[0], data.landuseArea.institutional[0], data.landuseArea.utilities[0], data.landuseArea.mixedUse[0], data.landuseArea.commercialResidentialMix[0]
            ]);
        } else if (type == "development") {

            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[0],
            data.developmentArea.unchanged[0], data.developmentArea.developmentDemolished[0], data.developmentArea.underConstruction[0], data.developmentArea.depleted[0], data.developmentArea.planned[0], data.developmentArea.proposed[0], data.developmentArea.underMaintenence[0], data.developmentArea.stopped[0], data.developmentArea.developmentForDemolition[0]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[0]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[0]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[0]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[0]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[0]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[0]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[0]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[0]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[0]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[0]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[0],
            count.development.unchanged[0], count.development.developmentDemolished[0], count.development.underConstruction[0], count.development.depleted[0], count.development.planned[0], count.development.proposed[0], count.development.underMaintenence[0], count.development.stopped[0], count.development.developmentForDemolition[0]
            ]);
        } else if (type == "encroachment") {

            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[0], data.encroachmentArea.illegalChange[0], data.encroachmentArea.disputed[0], data.encroachmentArea.verificationPending[0], data.encroachmentArea.illegal[0], data.encroachmentArea.encroachmentDemolished[0], data.encroachmentArea.encroachmentForDemolition[0], data.encroachmentArea.unaffected[0]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[0]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[0]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[0]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[0]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[0]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[0]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[0]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[0]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[0],
            count.encroachment.illegalChange[0], count.encroachment.disputed[0], count.encroachment.verificationPending[0], count.encroachment.illegal[0], count.encroachment.encroachmentDemolished[0], count.encroachment.encroachmentForDemolition[0], count.encroachment.unaffected[0]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[0]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[0]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[0]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[0]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[0]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[0],
            count.complaints.reported[0], count.complaints.complaintClosed[0], count.complaints.inspected[0], count.complaints.complaintsDemolished[0]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{
                name: '2015',
                data: [count.timeline.timeline2015[0]],
            },
            {
                name: '2016',
                data: [0],
            },
            {
                name: '2017',
                data: [0],
            },
            {
                name: '2018',
                data: [0],
            },
            {
                name: '2019',
                data: [0],
            },
            {
                name: '2020',
                data: [0],
            },
            {
                name: '2021',
                data: [0],
            },
            {
                name: '2022',
                data: [0],
            },
            {
                name: '2023',
                data: [0],
            },
            {
                name: '2024',
                data: [0],
            },
            {
                name: '2025',
                data: [0],
            },
            ])
            timelinePieCharts.updateSeries([count.timeline.timeline2015[0]])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    }
    else if (appState.maxYear == 2016) {


        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;
            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[1]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[1]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[1]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[1]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[1]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[1]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[1]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[1]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[1]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[1]]
            }]);
            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[1]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[1]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[1]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[1]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[1]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[1]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[1]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[1]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[1]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[1]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[1],
            count.landuse.commercial[1], count.landuse.educational[1], count.landuse.recreational[1], count.landuse.industrial[1], count.landuse.governmental[1], count.landuse.institutional[1], count.landuse.utilities[1], count.landuse.mixedUse[1], count.landuse.commercialResidentialMix[1]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[1],
            data.landuseArea.commercial[1], data.landuseArea.educational[1], data.landuseArea.recreational[1], data.landuseArea.industrial[1], data.landuseArea.governmental[1], data.landuseArea.institutional[1], data.landuseArea.utilities[1], data.landuseArea.mixedUse[1], data.landuseArea.commercialResidentialMix[1]
            ]);
        }
        else if (type == "development") {
            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[1],
            data.developmentArea.unchanged[1], data.developmentArea.developmentDemolished[1], data.developmentArea.underConstruction[1], data.developmentArea.depleted[1], data.developmentArea.planned[1], data.developmentArea.proposed[1], data.developmentArea.underMaintenence[1], data.developmentArea.stopped[1], data.developmentArea.developmentForDemolition[1]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[1]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[1]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[1]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[1]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[1]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[1]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[1]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[1]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[1]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[1]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[1],
            count.development.unchanged[1], count.development.developmentDemolished[1], count.development.underConstruction[1], count.development.depleted[1], count.development.planned[1], count.development.proposed[1], count.development.underMaintenence[1], count.development.stopped[1], count.development.developmentForDemolition[1]
            ]);
        } else if (type == "encroachment") {
            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[1], data.encroachmentArea.illegalChange[1], data.encroachmentArea.disputed[1], data.encroachmentArea.verificationPending[1], data.encroachmentArea.illegal[1], data.encroachmentArea.encroachmentDemolished[1], data.encroachmentArea.encroachmentForDemolition[1], data.encroachmentArea.unaffected[1]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[1]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[1]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[1]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[1]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[1]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[1]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[1]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[1]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[1],
            count.encroachment.illegalChange[1], count.encroachment.disputed[1], count.encroachment.verificationPending[1], count.encroachment.illegal[1], count.encroachment.encroachmentDemolished[1], count.encroachment.encroachmentForDemolition[1], count.encroachment.unaffected[1]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[1]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[1]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[1]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[1]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[1]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[1],
            count.complaints.reported[1], count.complaints.complaintClosed[1], count.complaints.inspected[1], count.complaints.complaintsDemolished[1]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{
                name: '2015',
                data: [count.timeline.timeline2015[0]],
            },
            {
                name: '2016',
                data: [count.timeline.timeline2016[0]],
            },
            {
                name: '2017',
                data: [0],
            },
            {
                name: '2018',
                data: [0],
            },
            {
                name: '2019',
                data: [0],
            },
            {
                name: '2020',
                data: [0],
            },
            {
                name: '2021',
                data: [0],
            },
            {
                name: '2022',
                data: [0],
            },
            {
                name: '2023',
                data: [0],
            },
            {
                name: '2024',
                data: [0],
            },
            {
                name: '2025',
                data: [0],
            },
            ])
            timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0],])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    } else if (appState.maxYear == 2017) {
        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;
            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[2]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[2]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[2]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[2]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[2]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[2]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[2]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[2]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[2]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[2]]
            }]);
            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[2]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[2]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[2]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[2]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[2]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[2]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[2]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[2]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[2]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[2]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[2],
            count.landuse.commercial[2], count.landuse.educational[2], count.landuse.recreational[2], count.landuse.industrial[2], count.landuse.governmental[2], count.landuse.institutional[2], count.landuse.utilities[2], count.landuse.mixedUse[2], count.landuse.commercialResidentialMix[2]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[2],
            data.landuseArea.commercial[2], data.landuseArea.educational[2], data.landuseArea.recreational[2], data.landuseArea.industrial[2], data.landuseArea.governmental[2], data.landuseArea.institutional[2], data.landuseArea.utilities[2], data.landuseArea.mixedUse[2], data.landuseArea.commercialResidentialMix[2]
            ]);
        } else if (type == "development") {
            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[2],
            data.developmentArea.unchanged[2], data.developmentArea.developmentDemolished[2], data.developmentArea.underConstruction[2], data.developmentArea.depleted[2], data.developmentArea.planned[2], data.developmentArea.proposed[2], data.developmentArea.underMaintenence[2], data.developmentArea.stopped[2], data.developmentArea.developmentForDemolition[2]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[2]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[2]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[2]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[2]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[2]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[2]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[2]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[2]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[2]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[2]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[2],
            count.development.unchanged[2], count.development.developmentDemolished[2], count.development.underConstruction[2], count.development.depleted[2], count.development.planned[2], count.development.proposed[2], count.development.underMaintenence[2], count.development.stopped[2], count.development.developmentForDemolition[2]
            ]);
        } else if (type == "encroachment") {
            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[2], data.encroachmentArea.illegalChange[2], data.encroachmentArea.disputed[2], data.encroachmentArea.verificationPending[2], data.encroachmentArea.illegal[2], data.encroachmentArea.encroachmentDemolished[2], data.encroachmentArea.encroachmentForDemolition[2], data.encroachmentArea.unaffected[2]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[2]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[2]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[2]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[2]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[2]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[2]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[2]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[2]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[2],
            count.encroachment.illegalChange[2], count.encroachment.disputed[2], count.encroachment.verificationPending[2], count.encroachment.illegal[2], count.encroachment.encroachmentDemolished[2], count.encroachment.encroachmentForDemolition[2], count.encroachment.unaffected[2]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[2]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[2]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[2]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[2]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[2]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[2],
            count.complaints.reported[2], count.complaints.complaintClosed[2], count.complaints.inspected[2], count.complaints.complaintsDemolished[2]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{
                name: '2015',
                data: [count.timeline.timeline2015[0]],
            },
            {
                name: '2016',
                data: [count.timeline.timeline2016[0]],
            },
            {
                name: '2017',
                data: [count.timeline.timeline2017[0]],
            },
            {
                name: '2018',
                data: [0],
            },
            {
                name: '2019',
                data: [0],
            },
            {
                name: '2020',
                data: [0],
            },
            {
                name: '2021',
                data: [0],
            },
            {
                name: '2022',
                data: [0],
            },
            {
                name: '2023',
                data: [0],
            },
            {
                name: '2024',
                data: [0],
            },
            {
                name: '2025',
                data: [0],
            },

            ])
            timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0], count.timeline.timeline2017[0]])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    } else if (appState.maxYear == 2018) {
        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;
            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[3]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[3]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[3]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[3]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[3]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[3]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[3]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[3]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[3]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[3]]
            }]);
            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[3]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[3]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[3]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[3]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[3]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[3]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[3]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[3]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[3]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[3]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[3],
            count.landuse.commercial[3], count.landuse.educational[3], count.landuse.recreational[3], count.landuse.industrial[3], count.landuse.governmental[3], count.landuse.institutional[3], count.landuse.utilities[3], count.landuse.mixedUse[3], count.landuse.commercialResidentialMix[3]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[3],
            data.landuseArea.commercial[3], data.landuseArea.educational[3], data.landuseArea.recreational[3], data.landuseArea.industrial[3], data.landuseArea.governmental[3], data.landuseArea.institutional[3], data.landuseArea.utilities[3], data.landuseArea.mixedUse[3], data.landuseArea.commercialResidentialMix[3]
            ]);
        } else if (type == "development") {
            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[3],
            data.developmentArea.unchanged[3], data.developmentArea.developmentDemolished[3], data.developmentArea.underConstruction[3], data.developmentArea.depleted[3], data.developmentArea.planned[3], data.developmentArea.proposed[3], data.developmentArea.underMaintenence[3], data.developmentArea.stopped[3], data.developmentArea.developmentForDemolition[3]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[3]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[3]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[3]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[3]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[3]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[3]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[3]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[3]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[3]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[3]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[3],
            count.development.unchanged[3], count.development.developmentDemolished[3], count.development.underConstruction[3], count.development.depleted[3], count.development.planned[3], count.development.proposed[3], count.development.underMaintenence[3], count.development.stopped[3], count.development.developmentForDemolition[3]
            ]);
        } else if (type == "encroachment") {
            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[3], data.encroachmentArea.illegalChange[3], data.encroachmentArea.disputed[3], data.encroachmentArea.verificationPending[3], data.encroachmentArea.illegal[3], data.encroachmentArea.encroachmentDemolished[3], data.encroachmentArea.encroachmentForDemolition[3], data.encroachmentArea.unaffected[3]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[3]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[3]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[3]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[3]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[3]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[3]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[3]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[3]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[3],
            count.encroachment.illegalChange[3], count.encroachment.disputed[3], count.encroachment.verificationPending[3], count.encroachment.illegal[3], count.encroachment.encroachmentDemolished[3], count.encroachment.encroachmentForDemolition[3], count.encroachment.unaffected[3]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[3]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[3]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[3]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[3]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[3]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[3],
            count.complaints.reported[3], count.complaints.complaintClosed[3], count.complaints.inspected[3], count.complaints.complaintsDemolished[3]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{
                name: '2015',
                data: [count.timeline.timeline2015[0]],
            },
            {
                name: '2016',
                data: [count.timeline.timeline2016[0]],
            },
            {
                name: '2017',
                data: [count.timeline.timeline2017[0]],
            },
            {
                name: '2018',
                data: [count.timeline.timeline2018[0]],
            },
            {
                name: '2019',
                data: [0],
            },
            {
                name: '2020',
                data: [0],
            },
            {
                name: '2021',
                data: [0],
            },
            {
                name: '2022',
                data: [0],
            },
            {
                name: '2023',
                data: [0],
            },
            {
                name: '2024',
                data: [0],
            },
            {
                name: '2025',
                data: [0],
            },

            ])
            timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0], count.timeline.timeline2017[0], count.timeline.timeline2018[0],])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    } else if (appState.maxYear == 2019) {
        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;
            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[4]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[4]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[4]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[4]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[4]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[4]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[4]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[4]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[4]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[4]]
            }]);
            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[4]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[4]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[4]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[4]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[4]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[4]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[4]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[4]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[4]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[4]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[4],
            count.landuse.commercial[4], count.landuse.educational[4], count.landuse.recreational[4], count.landuse.industrial[4], count.landuse.governmental[4], count.landuse.institutional[4], count.landuse.utilities[4], count.landuse.mixedUse[4], count.landuse.commercialResidentialMix[4]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[4],
            data.landuseArea.commercial[4], data.landuseArea.educational[4], data.landuseArea.recreational[4], data.landuseArea.industrial[4], data.landuseArea.governmental[4], data.landuseArea.institutional[4], data.landuseArea.utilities[4], data.landuseArea.mixedUse[4], data.landuseArea.commercialResidentialMix[4]
            ]);
        } else if (type == "development") {
            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[4],
            data.developmentArea.unchanged[4], data.developmentArea.developmentDemolished[4], data.developmentArea.underConstruction[4], data.developmentArea.depleted[4], data.developmentArea.planned[4], data.developmentArea.proposed[4], data.developmentArea.underMaintenence[4], data.developmentArea.stopped[4], data.developmentArea.developmentForDemolition[4]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[4]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[4]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[4]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[4]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[4]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[4]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[4]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[4]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[4]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[4]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[4],
            count.development.unchanged[4], count.development.developmentDemolished[4], count.development.underConstruction[4], count.development.depleted[4], count.development.planned[4], count.development.proposed[4], count.development.underMaintenence[4], count.development.stopped[4], count.development.developmentForDemolition[4]
            ]);
        } else if (type == "encroachment") {
            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[4], data.encroachmentArea.illegalChange[4], data.encroachmentArea.disputed[4], data.encroachmentArea.verificationPending[4], data.encroachmentArea.illegal[4], data.encroachmentArea.encroachmentDemolished[4], data.encroachmentArea.encroachmentForDemolition[4], data.encroachmentArea.unaffected[4]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[4]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[4]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[4]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[4]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[4]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[4]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[4]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[4]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[4],
            count.encroachment.illegalChange[4], count.encroachment.disputed[4], count.encroachment.verificationPending[4], count.encroachment.illegal[4], count.encroachment.encroachmentDemolished[4], count.encroachment.encroachmentForDemolition[4], count.encroachment.unaffected[4]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[4]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[4]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[4]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[4]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[4]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[4],
            count.complaints.reported[4], count.complaints.complaintClosed[4], count.complaints.inspected[4], count.complaints.complaintsDemolished[4]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{

                name: '2015',
                data: [count.timeline.timeline2015[0]],
            },
            {
                name: '2016',
                data: [count.timeline.timeline2016[0]],
            },
            {
                name: '2017',
                data: [count.timeline.timeline2017[0]],
            },
            {
                name: '2018',
                data: [count.timeline.timeline2018[0]],
            },
            {
                name: '2019',
                data: [count.timeline.timeline2019[0]],
            },
            {
                name: '2020',
                data: [0],
            },
            {
                name: '2021',
                data: [0],
            },
            {
                name: '2022',
                data: [0],
            },
            {
                name: '2023',
                data: [0],
            },
            {
                name: '2024',
                data: [0],
            },
            {
                name: '2025',
                data: [0],
            },

            ])
            timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0], count.timeline.timeline2017[0], count.timeline.timeline2018[0], count.timeline.timeline2019[0],])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    } else if (appState.maxYear == 2020) {
        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;
            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[5]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[5]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[5]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[5]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[5]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[5]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[5]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[5]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[5]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[5]]
            }]);
            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[5]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[5]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[5]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[5]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[5]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[5]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[5]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[5]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[5]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[5]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[5],
            count.landuse.commercial[5], count.landuse.educational[5], count.landuse.recreational[5], count.landuse.industrial[5], count.landuse.governmental[5], count.landuse.institutional[5], count.landuse.utilities[5], count.landuse.mixedUse[5], count.landuse.commercialResidentialMix[5]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[5],
            data.landuseArea.commercial[5], data.landuseArea.educational[5], data.landuseArea.recreational[5], data.landuseArea.industrial[5], data.landuseArea.governmental[5], data.landuseArea.institutional[5], data.landuseArea.utilities[5], data.landuseArea.mixedUse[5], data.landuseArea.commercialResidentialMix[5]
            ]);
        } else if (type == "development") {
            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[5],
            data.developmentArea.unchanged[5], data.developmentArea.developmentDemolished[5], data.developmentArea.underConstruction[5], data.developmentArea.depleted[5], data.developmentArea.planned[5], data.developmentArea.proposed[5], data.developmentArea.underMaintenence[5], data.developmentArea.stopped[5], data.developmentArea.developmentForDemolition[5]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[5]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[5]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[5]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[5]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[5]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[5]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[5]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[5]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[5]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[5]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[5],
            count.development.unchanged[5], count.development.developmentDemolished[5], count.development.underConstruction[5], count.development.depleted[5], count.development.planned[5], count.development.proposed[5], count.development.underMaintenence[5], count.development.stopped[5], count.development.developmentForDemolition[5]
            ]);
        } else if (type == "encroachment") {
            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[5], data.encroachmentArea.illegalChange[5], data.encroachmentArea.disputed[5], data.encroachmentArea.verificationPending[5], data.encroachmentArea.illegal[5], data.encroachmentArea.encroachmentDemolished[5], data.encroachmentArea.encroachmentForDemolition[5], data.encroachmentArea.unaffected[5]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[5]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[5]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[5]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[5]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[5]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[5]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[5]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[5]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[5],
            count.encroachment.illegalChange[5], count.encroachment.disputed[5], count.encroachment.verificationPending[5], count.encroachment.illegal[5], count.encroachment.encroachmentDemolished[5], count.encroachment.encroachmentForDemolition[5], count.encroachment.unaffected[5]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[5]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[5]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[5]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[5]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[5]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[5],
            count.complaints.reported[5], count.complaints.complaintClosed[5], count.complaints.inspected[5], count.complaints.complaintsDemolished[5]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{

                name: '2015',
                data: [count.timeline.timeline2015[0]],
            },
            {
                name: '2016',
                data: [count.timeline.timeline2016[0]],
            },
            {
                name: '2017',
                data: [count.timeline.timeline2017[0]],
            },
            {
                name: '2018',
                data: [count.timeline.timeline2018[0]],
            },
            {
                name: '2019',
                data: [count.timeline.timeline2019[0]],
            },
            {
                name: '2020',
                data: [count.timeline.timeline2020[0]],
            },
            {
                name: '2021',
                data: [0],
            },
            {
                name: '2022',
                data: [0],
            },
            {
                name: '2023',
                data: [0],
            },
            {
                name: '2024',
                data: [0],
            },
            {
                name: '2025',
                data: [0],
            },


            ])
            timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0], count.timeline.timeline2017[0], count.timeline.timeline2018[0], count.timeline.timeline2019[0], count.timeline.timeline2020[0],])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    } else if (appState.maxYear == 2021) {
        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;
            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[6]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[6]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[6]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[6]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[6]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[6]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[6]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[6]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[6]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[6]]
            }]);
            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[6]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[6]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[6]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[6]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[6]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[6]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[6]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[6]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[6]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[6]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[6],
            count.landuse.commercial[6], count.landuse.educational[6], count.landuse.recreational[6], count.landuse.industrial[6], count.landuse.governmental[6], count.landuse.institutional[6], count.landuse.utilities[6], count.landuse.mixedUse[6], count.landuse.commercialResidentialMix[6]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[6],
            data.landuseArea.commercial[6], data.landuseArea.educational[6], data.landuseArea.recreational[6], data.landuseArea.industrial[6], data.landuseArea.governmental[6], data.landuseArea.institutional[6], data.landuseArea.utilities[6], data.landuseArea.mixedUse[6], data.landuseArea.commercialResidentialMix[6]
            ]);
        } else if (type == "development") {
            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[6],
            data.developmentArea.unchanged[6], data.developmentArea.developmentDemolished[6], data.developmentArea.underConstruction[6], data.developmentArea.depleted[6], data.developmentArea.planned[6], data.developmentArea.proposed[6], data.developmentArea.underMaintenence[6], data.developmentArea.stopped[6], data.developmentArea.developmentForDemolition[6]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[6]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[6]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[6]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[6]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[6]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[6]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[6]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[6]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[6]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[6]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[6],
            count.development.unchanged[6], count.development.developmentDemolished[6], count.development.underConstruction[6], count.development.depleted[6], count.development.planned[6], count.development.proposed[6], count.development.underMaintenence[6], count.development.stopped[6], count.development.developmentForDemolition[6]
            ]);
        } else if (type == "encroachment") {
            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[6], data.encroachmentArea.illegalChange[6], data.encroachmentArea.disputed[6], data.encroachmentArea.verificationPending[6], data.encroachmentArea.illegal[6], data.encroachmentArea.encroachmentDemolished[6], data.encroachmentArea.encroachmentForDemolition[6], data.encroachmentArea.unaffected[6]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[6]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[6]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[6]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[6]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[6]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[6]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[6]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[6]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[6],
            count.encroachment.illegalChange[6], count.encroachment.disputed[6], count.encroachment.verificationPending[6], count.encroachment.illegal[6], count.encroachment.encroachmentDemolished[6], count.encroachment.encroachmentForDemolition[6], count.encroachment.unaffected[6]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[6]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[6]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[6]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[6]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[6]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[6],
            count.complaints.reported[6], count.complaints.complaintClosed[6], count.complaints.inspected[6], count.complaints.complaintsDemolished[6]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{
                name: '2015',
                data: [count.timeline.timeline2015[0]],
            },
            {
                name: '2016',
                data: [count.timeline.timeline2016[0]],
            },

            {
                name: '2017',
                data: [count.timeline.timeline2017[0]],
            },

            {
                name: '2018',
                data: [count.timeline.timeline2018[0]],
            },

            {
                name: '2019',
                data: [count.timeline.timeline2019[0]],
            },

            {
                name: '2020',
                data: [count.timeline.timeline2020[0]],
            },

            {
                name: '2021',
                data: [count.timeline.timeline2021[0]],
            },

            {
                name: '2022',
                data: [0],
            },

            {
                name: '2023',
                data: [0],
            },

            {
                name: '2024',
                data: [0],
            },

            {
                name: '2025',
                data: [0],
            },
            ])
            timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0], count.timeline.timeline2017[0], count.timeline.timeline2018[0], count.timeline.timeline2019[0], count.timeline.timeline2020[0], count.timeline.timeline2021[0],])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    } else if (appState.maxYear == 2022) {
        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;
            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[7]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[7]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[7]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[7]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[7]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[7]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[7]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[7]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[7]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[7]]
            }]);
            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[7]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[7]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[7]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[7]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[7]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[7]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[7]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[7]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[7]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[7]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[7],
            count.landuse.commercial[7], count.landuse.educational[7], count.landuse.recreational[7], count.landuse.industrial[7], count.landuse.governmental[7], count.landuse.institutional[7], count.landuse.utilities[7], count.landuse.mixedUse[7], count.landuse.commercialResidentialMix[7]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[7],
            data.landuseArea.commercial[7], data.landuseArea.educational[7], data.landuseArea.recreational[7], data.landuseArea.industrial[7], data.landuseArea.governmental[7], data.landuseArea.institutional[7], data.landuseArea.utilities[7], data.landuseArea.mixedUse[7], data.landuseArea.commercialResidentialMix[7]
            ]);
        } else if (type == "development") {
            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[7],
            data.developmentArea.unchanged[7], data.developmentArea.developmentDemolished[7], data.developmentArea.underConstruction[7], data.developmentArea.depleted[7], data.developmentArea.planned[7], data.developmentArea.proposed[7], data.developmentArea.underMaintenence[7], data.developmentArea.stopped[7], data.developmentArea.developmentForDemolition[7]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[7]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[7]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[7]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[7]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[7]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[7]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[7]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[7]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[7]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[7]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[7],
            count.development.unchanged[7], count.development.developmentDemolished[7], count.development.underConstruction[7], count.development.depleted[7], count.development.planned[7], count.development.proposed[7], count.development.underMaintenence[7], count.development.stopped[7], count.development.developmentForDemolition[7]
            ]);
        } else if (type == "encroachment") {
            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[7], data.encroachmentArea.illegalChange[7], data.encroachmentArea.disputed[7], data.encroachmentArea.verificationPending[7], data.encroachmentArea.illegal[7], data.encroachmentArea.encroachmentDemolished[7], data.encroachmentArea.encroachmentForDemolition[7], data.encroachmentArea.unaffected[7]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[7]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[7]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[7]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[7]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[7]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[7]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[7]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[7]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[7],
            count.encroachment.illegalChange[7], count.encroachment.disputed[7], count.encroachment.verificationPending[7], count.encroachment.illegal[7], count.encroachment.encroachmentDemolished[7], count.encroachment.encroachmentForDemolition[7], count.encroachment.unaffected[7]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[7]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[7]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[7]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[7]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[7]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[7],
            count.complaints.reported[7], count.complaints.complaintClosed[7], count.complaints.inspected[7], count.complaints.complaintsDemolished[7]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{
                name: '2015',
                data: [count.timeline.timeline2015[0]],

            },
            {
                name: '2016',
                data: [count.timeline.timeline2016[0]],
            },
            {
                name: '2017',
                data: [count.timeline.timeline2017[0]],
            },
            {
                name: '2018',
                data: [count.timeline.timeline2018[0]],
            },
            {
                name: '2019',
                data: [count.timeline.timeline2019[0]],
            },
            {
                name: '2020',
                data: [count.timeline.timeline2020[0]],
            },
            {
                name: '2021',
                data: [count.timeline.timeline2021[0]],
            },
            {
                name: '2022',
                data: [count.timeline.timeline2022[0]],
            },
            {
                name: '2023',
                data: [0],
            },
            {
                name: '2024',
                data: [0],
            },
            {
                name: '2025',
                data: [0],
            },

            ])

            timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0], count.timeline.timeline2017[0], count.timeline.timeline2018[0], count.timeline.timeline2019[0], count.timeline.timeline2020[0], count.timeline.timeline2021[0], count.timeline.timeline2022[0],])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    } else if (appState.maxYear == 2023) {
        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;
            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[8]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[8]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[8]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[8]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[8]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[8]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[8]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[8]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[8]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[8]]
            }]);
            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[8]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[8]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[8]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[8]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[8]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[8]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[8]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[8]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[8]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[8]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[8],
            count.landuse.commercial[8], count.landuse.educational[8], count.landuse.recreational[8], count.landuse.industrial[8], count.landuse.governmental[8], count.landuse.institutional[8], count.landuse.utilities[8], count.landuse.mixedUse[8], count.landuse.commercialResidentialMix[8]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[8],
            data.landuseArea.commercial[8], data.landuseArea.educational[8], data.landuseArea.recreational[8], data.landuseArea.industrial[8], data.landuseArea.governmental[8], data.landuseArea.institutional[8], data.landuseArea.utilities[8], data.landuseArea.mixedUse[8], data.landuseArea.commercialResidentialMix[8]
            ]);
        } else if (type == "development") {
            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[8],
            data.developmentArea.unchanged[8], data.developmentArea.developmentDemolished[8], data.developmentArea.underConstruction[8], data.developmentArea.depleted[8], data.developmentArea.planned[8], data.developmentArea.proposed[8], data.developmentArea.underMaintenence[8], data.developmentArea.stopped[8], data.developmentArea.developmentForDemolition[8]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[8]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[8]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[8]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[8]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[8]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[8]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[8]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[8]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[8]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[8]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[8],
            count.development.unchanged[8], count.development.developmentDemolished[8], count.development.underConstruction[8], count.development.depleted[8], count.development.planned[8], count.development.proposed[8], count.development.underMaintenence[8], count.development.stopped[8], count.development.developmentForDemolition[8]
            ]);
        } else if (type == "encroachment") {
            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[8], data.encroachmentArea.illegalChange[8], data.encroachmentArea.disputed[8], data.encroachmentArea.verificationPending[8], data.encroachmentArea.illegal[8], data.encroachmentArea.encroachmentDemolished[8], data.encroachmentArea.encroachmentForDemolition[8], data.encroachmentArea.unaffected[8]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[8]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[8]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[8]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[8]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[8]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[8]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[8]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[8]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[8],
            count.encroachment.illegalChange[8], count.encroachment.disputed[8], count.encroachment.verificationPending[8], count.encroachment.illegal[8], count.encroachment.encroachmentDemolished[8], count.encroachment.encroachmentForDemolition[8], count.encroachment.unaffected[8]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[8]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[8]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[8]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[8]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[8]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[8],
            count.complaints.reported[8], count.complaints.complaintClosed[8], count.complaints.inspected[8], count.complaints.complaintsDemolished[8]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{
                name: '2015',
                data: [count.timeline.timeline2015[0]],
            },
            {
                name: '2016',
                data: [count.timeline.timeline2016[0]],
            },
            {
                name: '2017',
                data: [count.timeline.timeline2017[0]],
            },
            {
                name: '2018',
                data: [count.timeline.timeline2018[0]],
            },
            {
                name: '2019',
                data: [count.timeline.timeline2019[0]],
            },
            {
                name: '2020',
                data: [count.timeline.timeline2020[0]],
            },
            {
                name: '2021',
                data: [count.timeline.timeline2021[0]],
            },
            {
                name: '2022',
                data: [count.timeline.timeline2022[0]],
            },
            {
                name: '2023',
                data: [count.timeline.timeline2023[0]],
            },
            {
                name: '2024',
                data: [0],
            },
            {
                name: '2025',
                data: [0],
            },


            ])
            timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0], count.timeline.timeline2017[0], count.timeline.timeline2018[0], count.timeline.timeline2019[0], count.timeline.timeline2020[0], count.timeline.timeline2021[0], count.timeline.timeline2022[0], count.timeline.timeline2023[0],])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    }
    else if (appState.maxYear == 2024) {
        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;
            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[9]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[9]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[9]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[9]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[9]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[9]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[9]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[9]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[9]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[9]]
            }]);

            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[9]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[9]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[9]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[9]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[9]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[9]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[9]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[9]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[9]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[9]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[9],
            count.landuse.commercial[9], count.landuse.educational[9], count.landuse.recreational[9], count.landuse.industrial[9], count.landuse.governmental[9], count.landuse.institutional[9], count.landuse.utilities[9], count.landuse.mixedUse[9], count.landuse.commercialResidentialMix[9]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[9],
            data.landuseArea.commercial[9], data.landuseArea.educational[9], data.landuseArea.recreational[9], data.landuseArea.industrial[9], data.landuseArea.governmental[9], data.landuseArea.institutional[9], data.landuseArea.utilities[9], data.landuseArea.mixedUse[9], data.landuseArea.commercialResidentialMix[9]
            ]);
        } else if (type == "development") {
            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[9],
            data.developmentArea.unchanged[9], data.developmentArea.developmentDemolished[9], data.developmentArea.underConstruction[9], data.developmentArea.depleted[9], data.developmentArea.planned[9], data.developmentArea.proposed[9], data.developmentArea.underMaintenence[9], data.developmentArea.stopped[9], data.developmentArea.developmentForDemolition[9]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[9]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[9]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[9]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[9]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[9]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[9]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[9]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[9]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[9]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[9]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[9],
            count.development.unchanged[9], count.development.developmentDemolished[9], count.development.underConstruction[9], count.development.depleted[9], count.development.planned[9], count.development.proposed[9], count.development.underMaintenence[9], count.development.stopped[9], count.development.developmentForDemolition[9]
            ]);
        } else if (type == "encroachment") {
            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[9], data.encroachmentArea.illegalChange[9], data.encroachmentArea.disputed[9], data.encroachmentArea.verificationPending[9], data.encroachmentArea.illegal[9], data.encroachmentArea.encroachmentDemolished[9], data.encroachmentArea.encroachmentForDemolition[9], data.encroachmentArea.unaffected[9]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[9]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[9]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[9]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[9]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[9]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[9]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[9]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[9]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[9],
            count.encroachment.illegalChange[9], count.encroachment.disputed[9], count.encroachment.verificationPending[9], count.encroachment.illegal[9], count.encroachment.encroachmentDemolished[9], count.encroachment.encroachmentForDemolition[9], count.encroachment.unaffected[9]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[9]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[9]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[9]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[9]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[9]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[9],
            count.complaints.reported[9], count.complaints.complaintClosed[9], count.complaints.inspected[9], count.complaints.complaintsDemolished[9]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{
                name: '2015',
                data: [count.timeline.timeline2015[0]],
            },
            {
                name: '2016',
                data: [count.timeline.timeline2016[0]],
            },
            {
                name: '2017',
                data: [count.timeline.timeline2017[0]],
            },
            {
                name: '2018',
                data: [count.timeline.timeline2018[0]],
            },
            {
                name: '2019',
                data: [count.timeline.timeline2019[0]],
            },
            {
                name: '2020',
                data: [count.timeline.timeline2020[0]],
            },
            {
                name: '2021',
                data: [count.timeline.timeline2021[0]],
            },
            {
                name: '2022',
                data: [count.timeline.timeline2022[0]],
            },
            {
                name: '2023',
                data: [count.timeline.timeline2023[0]],
            },
            {
                name: '2024',
                data: [count.timeline.timeline2024[0]],
            },
            {
                name: '2025',
                data: [0],
            },


            ])
            timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0], count.timeline.timeline2017[0], count.timeline.timeline2018[0], count.timeline.timeline2019[0], count.timeline.timeline2020[0], count.timeline.timeline2021[0], count.timeline.timeline2022[0], count.timeline.timeline2023[0], count.timeline.timeline2024[0]])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    } else if (appState.maxYear == 2025) {
        status = appState.maxYear;
        objects.splice(0, objects.length);
        if (type == "landuse") {
            paginationLanduse(status, response);
            status = appState.maxYear;
            landuseBarCharts.updateSeries([{
                name: 'Residential',
                data: [count.landuse.residential[10]]
            }, {
                name: 'Commercial',
                data: [count.landuse.commercial[10]]
            },
            {
                name: 'Educational',
                data: [count.landuse.educational[10]]
            }, {
                name: 'Recreational',
                data: [count.landuse.industrial[10]]
            }, {
                name: 'Industrial',
                data: [count.landuse.recreational[10]]
            }, {
                name: 'Governmental',
                data: [count.landuse.commercialResidentialMix[10]]
            }, {
                name: 'Institutional',
                data: [count.landuse.governmental[10]]
            }, {
                name: 'Utilities',
                data: [count.landuse.institutional[10]]
            }, {
                name: 'MixedUse',
                data: [count.landuse.utilities[10]]
            }, {
                name: 'Commercial Residential Mix',
                data: [count.landuse.mixedUse[10]]
            }]);
            landuseAreaBarCharts.updateSeries([{
                name: 'Residential',
                data: [data.landuseArea.residential[10]]
            }, {
                name: 'Commercial',
                data: [data.landuseArea.commercial[10]]
            },
            {
                name: 'Educational',
                data: [data.landuseArea.educational[10]]
            }, {
                name: 'Recreational',
                data: [data.landuseArea.industrial[10]]
            }, {
                name: 'Industrial',
                data: [data.landuseArea.recreational[10]]
            }, {
                name: 'Governmental',
                data: [data.landuseArea.commercialResidentialMix[10]]
            }, {
                name: 'Institutional',
                data: [data.landuseArea.governmental[10]]
            }, {
                name: 'Utilities',
                data: [data.landuseArea.institutional[10]]
            }, {
                name: 'MixedUse',
                data: [data.landuseArea.utilities[10]]
            }, {
                name: 'Commercial Residential Mix',
                data: [data.landuseArea.mixedUse[10]]
            }]);
            landusePieCharts.updateSeries([count.landuse.residential[10],
            count.landuse.commercial[10], count.landuse.educational[10], count.landuse.recreational[10], count.landuse.industrial[10], count.landuse.governmental[10], count.landuse.institutional[10], count.landuse.utilities[10], count.landuse.mixedUse[10], count.landuse.commercialResidentialMix[10]
            ]);
            landuseAreaPieCharts.updateSeries([data.landuseArea.residential[10],
            data.landuseArea.commercial[10], data.landuseArea.educational[10], data.landuseArea.recreational[10], data.landuseArea.industrial[10], data.landuseArea.governmental[10], data.landuseArea.institutional[10], data.landuseArea.utilities[10], data.landuseArea.mixedUse[10], data.landuseArea.commercialResidentialMix[10]
            ]);
        } else if (type == "development") {
            paginationDevelopment(status, response)
            developmentAreaPieCharts.updateSeries([data.developmentArea.completed[10],
            data.developmentArea.unchanged[10], data.developmentArea.developmentDemolished[10], data.developmentArea.underConstruction[10], data.developmentArea.depleted[10], data.developmentArea.planned[10], data.developmentArea.proposed[10], data.developmentArea.underMaintenence[10], data.developmentArea.stopped[10], data.developmentArea.developmentForDemolition[10]
            ]);
            developmentAreaBarCharts.updateSeries([{
                name: 'Completed',
                data: [data.developmentArea.completed[10]]
            }, {
                name: 'Unchanged',
                data: [data.developmentArea.unchanged[10]]
            }, {
                name: 'Demolished',
                data: [data.developmentArea.developmentDemolished[10]]
            }, {
                name: 'Under Construction',
                data: [data.developmentArea.underConstruction[10]]
            }, {
                name: 'Depleted',
                data: [data.developmentArea.depleted[10]]
            }, {
                name: 'Planned',
                data: [data.developmentArea.planned[10]]
            }, {
                name: 'Proposed',
                data: [data.developmentArea.proposed[10]]
            }, {
                name: 'Under Maintenence',
                data: [data.developmentArea.underMaintenence[10]]
            }, {
                name: 'Stopped',
                data: [data.developmentArea.stopped[10]]
            }, {
                name: 'For Demolition',
                data: [data.developmentArea.developmentForDemolition[10]]
            },]);
            developmentPieCharts.updateSeries([count.development.completed[10],
            count.development.unchanged[10], count.development.developmentDemolished[10], count.development.underConstruction[10], count.development.depleted[10], count.development.planned[10], count.development.proposed[10], count.development.underMaintenence[10], count.development.stopped[10], count.development.developmentForDemolition[10]
            ]);
        } else if (type == "encroachment") {
            paginationEncroachment(status, response);
            encroachmentAreaPieCharts.updateSeries([data.encroachmentArea.legalChange[10], data.encroachmentArea.illegalChange[10], data.encroachmentArea.disputed[10], data.encroachmentArea.verificationPending[10], data.encroachmentArea.illegal[10], data.encroachmentArea.encroachmentDemolished[10], data.encroachmentArea.encroachmentForDemolition[10], data.encroachmentArea.unaffected[10]
            ]);
            encroachmentBarCharts.updateSeries([{
                name: 'Legal Change',
                data: [count.encroachment.legalChange[10]]
            },
            {
                name: 'Illegal Change',
                data: [count.encroachment.illegalChange[10]]
            },
            {
                name: 'Disputed',
                data: [count.encroachment.disputed[10]]
            },
            {
                name: 'Verification Pending',
                data: [count.encroachment.verificationPending[10]]
            },
            {
                name: 'Illegal',
                data: [count.encroachment.illegal[10]]
            },
            {
                name: 'Demolished',
                data: [count.encroachment.encroachmentDemolished[10]]
            },
            {
                name: 'For Demolition',
                data: [count.encroachment.encroachmentForDemolition[10]]
            },
            {
                name: 'Unaffected',
                data: [count.encroachment.unaffected[10]]
            }
            ]);
            encroachmentPieCharts.updateSeries([count.encroachment.legalChange[10],
            count.encroachment.illegalChange[10], count.encroachment.disputed[10], count.encroachment.verificationPending[10], count.encroachment.illegal[10], count.encroachment.encroachmentDemolished[10], count.encroachment.encroachmentForDemolition[10], count.encroachment.unaffected[10]
            ]);
        } else if (type == "complaints") {
            paginationComplaints(status, response);
            complaintsBarCharts.updateSeries([
                {
                    name: 'assigned',
                    data: [count.complaints.assigned[10]]
                },
                {
                    name: 'reported',
                    data: [count.complaints.reported[10]]
                },
                {
                    name: 'complaintClosed',
                    data: [count.complaints.complaintClosed[10]]
                },
                {
                    name: 'inspected',
                    data: [count.complaints.inspected[10]]
                },
                {
                    name: 'complaintsDemolished',
                    data: [count.complaints.complaintsDemolished[10]]
                }]);
            complaintsPieCharts.updateSeries([count.complaints.assigned[10],
            count.complaints.reported[10], count.complaints.complaintClosed[10], count.complaints.inspected[10], count.complaints.complaintsDemolished[10]]);
        }
        else if (type == "timeline") {

            paginationTimeline(status);
            timelineBarCharts.updateSeries([{
                name: '2015',

                data: [count.timeline.timeline2015[0]],
            },
            {
                name: '2016',
                data: [count.timeline.timeline2016[0]],
            }
                , {
                name: '2017',
                data: [count.timeline.timeline2017[0]],
            }
                , {
                name: '2018',
                data: [count.timeline.timeline2018[0]],
            }
                , {
                name: '2019',
                data: [count.timeline.timeline2019[0]],
            }
                , {
                name: '2020',
                data: [count.timeline.timeline2020[0]],
            }
                , {
                name: '2021',
                data: [count.timeline.timeline2021[0]],
            }
                , {
                name: '2022',
                data: [count.timeline.timeline2022[0]],
            }
                , {
                name: '2023',
                data: [count.timeline.timeline2023[0]],
            }
                , {
                name: '2024',
                data: [count.timeline.timeline2024[0]],
            }
                , {
                name: '2025',
                data: [count.timeline.timeline2025[0]],
            }])
            timelinePieCharts.updateSeries([count.timeline.timeline2015[0], count.timeline.timeline2016[0], count.timeline.timeline2017[0], count.timeline.timeline2018[0], count.timeline.timeline2019[0], count.timeline.timeline2020[0], count.timeline.timeline2021[0], count.timeline.timeline2022[0], count.timeline.timeline2023[0], count.timeline.timeline2024[0], count.timeline.timeline2025[0]])
        }
        bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
    }
}
$(document).ready(function () {

    $('#dataTableButton').hide();
    $('#dataTableContent').hide();
    $('#display_advance').hide();
    $("#legendsvg").hide();
    $(".esri-directions__panel-content").hide();
    // $(".carousel-inner").hide();
    $('.rightPanel2').css('margin-top', '7%');
    $("#createSlideDiv").hide();
    $("#slidesDiv").hide();
    $("#searchWidget").hide();
    $(".legend").hide();
    $('.filter').hide();
    legendChanges();
    $("#buildingDetail").hide();
    $("#collapse").hide();
    $('.charts').carousel({ interval: false, });
    $('.legend').show()


});



// *******************legend code start **********************
var changesClick = 0;
var timelineClick = 0;
var legendLanduseClick = 0;
var legendComplaintsClick = 0;
var legendDevelopmentClick = 0;

function legendChanges() {
    removeHighlight();
    type = "encroachment"
    $('.encroachments').removeClass('d-none');
    $('.developments').addClass('d-none');
    $('.landuse').addClass('d-none');
    $('.complaints').addClass('d-none');
    $('.timeline').addClass('d-none');



    getEncroachData().then(() => {

        if (EncroachmentResponse) {
            if (flagEncro == 0) {
                Area(EncroachmentResponse, type);
            }
            updateSeriesForInitial2015(EncroachmentResponse, type);
            updateMap(EncroachmentResponse, type);

        }
    });



    $('.legend').css({

        'height': '76px',
        'width': '40vw'

    })


    timelineClick = 0;
    legendLanduseClick = 0;
    legendComplaintsClick = 0;
    legendDevelopmentClick = 0;
    changesClick++;
    if (changesClick % 2 != 0) {
        document.getElementById('checkboxes').innerHTML = "";
        let checkbox = '';
        checkbox += `
            <section>
       <!-- Checbox One -->
       <label class="legendbtn">legal change
  <span class="checkmark1"></span>
</label>                                               
    </section>             
    <section>
      <!-- Checbox Two -->
      <label class="legendbtn">ilegal change
  <span class="checkmark2"></span>
</label>    
    </section>
    <section>
      <!-- Checbox Three -->
        <label class="legendbtn">ilegal 
  <span class="checkmark3"></span>
</label>
    </section>
    <section>
      <!-- Checbox Four -->
      <label class="legendbtn">For Demolishion
  <span class="checkmark4"></span>
</label>
    </section>
    <section>
      <!-- Checbox Five -->
      <label class="legendbtn">Demolished
  <span class="checkmark5"></span>
</label>
    </section>
    <section>
      <!-- Checbox six -->
      <label class="legendbtn">No change
  <span class="checkmark6"></span>
</label>
    </section>
    <section>
      <!-- Checbox Seven -->
      <label class="legendbtn">Disputed
  <span class="checkmark7"></span>
</label>
    </section>
    <section>
      <!-- Checbox Eight -->
      <label class="legendbtn">for Verification
  <span class="checkmark8"></span>
</label>
    </section>`;
        $(".legend").append(checkbox)
    }
}
function legendDevelopment() {
    removeHighlight();
    type = "development";
    // chartsImage();
    $('.developments').removeClass('d-none');
    $('.landuse').addClass('d-none');
    $('.complaints').addClass('d-none');
    $('.encroachments').addClass('d-none');
    $('.timeline').addClass('d-none');
    if (DevelopmentResponse) {
        if (flagDevelop == 0) {
            Area(DevelopmentResponse, type);
        }
        updateMap(DevelopmentResponse, type);
    }
    $('.legend').css({

        'height': '76px',
        'width': '40vw'

    })
    $("#changes").removeAttr('style');
    changesClick = 0;
    timelineClick = 0;
    legendLanduseClick = 0;
    legendDevelopmentClick++;
    legendComplaintsClick = 0;
    if (legendDevelopmentClick % 2 != 0) {
        document.getElementById('checkboxes').innerHTML = "";
        let checkbox = '';
        checkbox += `<section>
       <!-- Checbox One -->
       <label class="legendbtn">Under Construction
  <span class="checkmark9"></span>
</label>                                               
    </section>             
    <section>
      <!-- Checbox Two -->
      <label class="legendbtn">Under Maintainence
  <span class="checkmark10"></span>
</label>    
    </section>
    <section>
      <!-- Checbox Three -->
        <label class="legendbtn">completed 
  <span class="checkmark11"></span>
</label>
    </section>
    <section>
      <!-- Checbox Four -->
      <label class="legendbtn">Demolished
  <span class="checkmark12"></span>
</label>
    </section>
    <section>
      <!-- Checbox Five -->
      <label class="legendbtn">For Demolished
  <span class="checkmark13"></span>
</label>
    </section>
    <section>
      <!-- Checbox six -->
      <label class="legendbtn">stopped
  <span class="checkmark14"></span>
</label>
    </section>
    <section>
      <!-- Checbox Seven -->
      <label class="legendbtn">Depleted
  <span class="checkmark15"></span>
</label>
    </section>
   `;
        $(".legend").append(checkbox)
    }

}
function legendComplaints() {
    removeHighlight();
    type = "complaints";
    // chartsImage();
    $('.complaints').removeClass('d-none');
    $('.encroachments').addClass('d-none');
    $('.developments').addClass('d-none');
    $('.landuse').addClass('d-none');
    $('.timeline').addClass('d-none');


    if (ComplaintsResponse) {
        if (flagComplaints == 0) {
            Area(ComplaintsResponse, type);
        }
        updateMap(ComplaintsResponse, type);

    }
    $('.legend').css({

        'height': '38px',
        'width': '40vw'
    })
    $("#changes").removeAttr('style');
    changesClick = 0;
    timelineClick = 0;
    legendLanduseClick = 0;
    legendDevelopmentClick = 0;
    legendComplaintsClick++;
    if (legendComplaintsClick % 2 != 0) {
        document.getElementById('checkboxes').innerHTML = "";
        let checkbox = '';
        checkbox += `        <section>
       <!-- Checbox One -->
       <label class="legendbtn">inspected
  <span class="checkmark16"></span>
</label>                                               
    </section>             
    <section>
      <!-- Checbox Two -->
      <label class="legendbtn">Complaint Closed
  <span class="checkmark17"></span>
</label>    
    </section>
    <section>
      <!-- Checbox Three -->
        <label class="legendbtn">Assigned
  <span class="checkmark18"></span>
</label>
    </section>
    <section>
      <!-- Checbox Four -->
      <label class="legendbtn">Reported
  <span class="checkmark19"></span>
</label>
    </section>
    <section>
      <!-- Checbox Four -->
      <label class="legendbtn">No Complaints
  <span class="checkmark20"></span>
</label>
    </section>
    `;
        $(".legend").append(checkbox)
    }
    // else{
    //     document.getElementById('checkboxes').innerHTML = "";   
    // }
}
function legendLanduse() {
    removeHighlight();
    type = "landuse";
    // chartsImage();
    $('.landuse').removeClass('d-none');
    $('.complaints').addClass('d-none');
    $('.encroachments').addClass('d-none');
    $('.developments').addClass('d-none');
    $('.timeline').addClass('d-none');



    if (LanduseResponse) {
        if (flagLanduse == 0) {
            Area(LanduseResponse, type);
        }
        updateMap(LanduseResponse, type);

    }
    $('.legend').css({

        'height': '76px',
        'width': '41vw'

    })
    $("#changes").removeAttr('style');
    changesClick = 0;
    timelineClick = 0;
    legendComplaintsClick = 0;
    legendDevelopmentClick = 0;
    legendLanduseClick++;
    if (legendLanduseClick % 2 != 0) {
        document.getElementById('checkboxes').innerHTML = "";
        let checkbox = '';
        checkbox += `         <section>
       <!-- Checbox One -->
       <label class="legendbtn">Residentail
  <span class="checkmark21"></span>
</label>                                               
    </section>             
    <section>
      <!-- Checbox Two -->
      <label class="legendbtn">Commercial
  <span class="checkmark22"></span>
</label>    
    </section>
    <section>
      <!-- Checbox Three -->
        <label class="legendbtn">Govermental
  <span class="checkmark23"></span>
</label>
    </section>
    <section>
      <!-- Checbox Four -->
      <label class="legendbtn">Mixed Use
  <span class="checkmark24"></span>
</label>
    </section>
    <section>
      <!-- Checbox Five -->
      <label class="legendbtn">institutional
  <span class="checkmark25"></span>
</label>
    </section>
    <section>
      <!-- Checbox six -->
      <label class="legendbtn">Educational
  <span class="checkmark26"></span>
</label>
    </section>
    <section>
      <!-- Checbox Seven -->
      <label class="legendbtn">Utilites
  <span class="checkmark27"></span>
</label>
    </section>
    <section>
      <!-- Checbox Eight -->
      <label class="legendbtn">Not Specified
  <span class="checkmark28"></span>
</label>
    </section>
    <section>
      <!-- Checbox Eight -->
      <label class="legendbtn">Recreational
  <span class="checkmark29"></span>
</label>
    </section>
    <section>
      <!-- Checbox Eight -->
      <label class="legendbtn">Industrail
  <span class="checkmark30"></span>
</label>
    </section>
    <section>
      <!-- Checbox Eight -->
      <label class="legendbtn">commercial residential mix
  <span class="checkmark31"></span>
</label>
    </section>`;
        $(".legend").append(checkbox)
    }
    // else{
    //     document.getElementById('checkboxes').innerHTML = "";   
    // }
}
function legendTimeLine() {
    type = "timeline";
    if (TimeLineResponse) {
        if (flagTimeline == 0) {
            Area(TimeLineResponse, type);
        }
        updateMap(null, type);
    }

    $('.timeline').removeClass('d-none');
    $('.landuse').addClass('d-none');
    $('.complaints').addClass('d-none');
    $('.encroachments').addClass('d-none');
    $('.developments').addClass('d-none');


    $("#changes").removeAttr('style');
    // $('.charts').css({
    //     "display": "none"
    // })
    //hellooo
    // $('#charts_image').css({
    //     'visibility': 'visible'
    // });
    // $('.closeCharts').css({
    //     'display': 'none'
    // });
    $('.legend').css({
        'height': '40px',
        'width': '40vw'
    })
    changesClick = 0;
    legendLanduseClick = 0;
    legendComplaintsClick = 0;
    legendDevelopmentClick = 0;
    timelineClick++;
    if (timelineClick % 2 != 0) {
        document.getElementById('checkboxes').innerHTML = "";
        let checkbox = '';
        checkbox += `         <section>
       <!-- Checbox One -->
       <label class="legendbtn">2015
  <span class="checkmark32"></span>
</label>                                               
    </section>             
    <section>
      <!-- Checbox Two -->
      <label class="legendbtn">2016
  <span class="checkmark33"></span>
</label>    
    </section>
    <section>
      <!-- Checbox Three -->
        <label class="legendbtn">2017
  <span class="checkmark34"></span>
</label>
    </section>
    <section>
      <!-- Checbox Four -->
      <label class="legendbtn">2018
  <span class="checkmark35"></span>
</label>
    </section>
    <section>
      <!-- Checbox Five -->
      <label class="legendbtn">2019
  <span class="checkmark36"></span>
</label>
    </section>
    <section>
      <!-- Checbox six -->
      <label class="legendbtn">2020
  <span class="checkmark37"></span>
</label>
    </section>
    <section>
      <!-- Checbox Seven -->
      <label class="legendbtn">2021
  <span class="checkmark38"></span>
</label>
    </section>
    <section>
      <!-- Checbox Seven -->
      <label class="legendbtn">2022
  <span class="checkmark39"></span>
</label>
    </section>
    <section>
      <!-- Checbox Seven -->
      <label class="legendbtn">2023
  <span class="checkmark40"></span>
</label>
    </section>
    <section>
      <!-- Checbox Seven -->
      <label class="legendbtn">2024
  <span class="checkmark41"></span>
</label>
    </section>
    <section>
      <!-- Checbox Seven -->
      <label class="legendbtn">2025
  <span class="checkmark42"></span>
</label>
    </section>
 `;

        $(".legend").append(checkbox)
    }
    // else{
    //     document.getElementById('checkboxes').innerHTML = "";   
    // }
}
// ***********legend code End ********************
var landuseClick = 0;
var encroachmentClick = 0;
var developmentClick = 0;
var areaClick = 0;
var volumeClick = 0;
var heightClick = 0;
function landuse() {
    landuseClick++;
    const selections = [{
        id: 1,
        name: 'Car 1'
    }, {
        id: 2,
        name: 'Car 2'
    }, {
        id: 3,
        name: 'Car 3'
    },]
    if (landuseClick % 2 != 0) {
        let checkBox = '';
        selections.forEach((item, index) => {
            checkBox += `
            <div>
                <input type="checkbox" id="car${index}" name="car${index}" value="${item.id}" style="margin-left:35px; margin-top:4px;">
                <label>${item.name}</label>
            </div>
                    `;
        })
        $('#filterLanduse').append(checkBox);
        let landuseBadge = '';
        landuseBadge += `
             <div>
                <span class="badge badge-pill badge-warning">landuse</span>  
                </div>
                `;
        $('#landuseBadge').append(landuseBadge)
    } else {
        document.getElementById('filterLanduse').innerHTML = "";
        document.getElementById('landuseBadge').innerHTML = ""
    }
}
// ****************LAnduse end ***********************************
// function encroachment() {
//     encroachmentClick++;
//     const selections = [{
//         id: 1,
//         name: 'Car 1'
//     }, {
//         id: 2,
//         name: 'Car 2'
//     }, {
//         id: 3,
//         name: 'Car 3'
//     },]
//     if (encroachmentClick % 2 != 0) {
//         let checkBox = '';
//         selections.forEach((item, index) => {
//             checkBox += `
//         <div>
//             <input type="checkbox" id="car${index}" name="car${index}" value="${item.id}" style="margin-left:35px; margin-top:4px;">
//             <label>${item.name}</label>
//         </div>
//                 `;
//         })
//         $('#filterEnchroachment').append(checkBox);
//         let enchroachmentBadge = '';
//         enchroachmentBadge += `<div>
//             <span class="badge badge-pill badge-warning">Enchroachment x</span>  
//             </div>
//             `;
//         $('#enchroachmentBadge').append(enchroachmentBadge)
//     } else {
//         document.getElementById('filterEnchroachment').innerHTML = "";
//         document.getElementById('enchroachmentBadge').innerHTML = "";
//     }
// }
//  ****************** enchroachment ends **********************************
function development() {
    developmentClick++;
    const selections = [{
        id: 1,
        name: 'Car 1'
    }, {
        id: 2,
        name: 'Car 2'
    }, {
        id: 3,
        name: 'Car 3'
    },]
    if (developmentClick % 2 != 0) {
        let checkbox = '';
        selections.forEach((item, index) => {
            checkbox += `<div>
                    <input type="checkbox" id="car${index}" name="car${index}" value="${item.id}" style="margin-left:35px; margin-top:4px;">
                <label>${item.name}</label>
                    </div>`;
        })
        $('#filterDevelopment').append(checkbox);
        let developmentBadge = '';
        developmentBadge += `  <div>
                <span class="badge badge-pill badge-warning">development</span>  
                </div>`;
        $('#developmentBadge').append(developmentBadge)
    } else {
        document.getElementById('filterDevelopment').innerHTML = "";
        document.getElementById('developmentBadge').innerHTML = "";
    }
}
// ******************* Development Ends*********************************
function areas() {
    areaClick++;
    if (areaClick % 2 != 0) {
        let slider = '';
        //                 slider += `<label for="customRange2">Example range</label>
        // <input type="range" class="custom-range" min="0" max="5" id="customRange2" value=[1,4]>`;
        slider += `<div class="slider-box">
                        <label for="priceRange">Price Range:</label>
                        <input type="text" id="priceRange" readonly>
                        <div id="price-range" class="slider"></div>
                        <label for="MPGRange">MPG Range:</label>
                        <input type="text" id="MPGRange" readonly>
                        <div id="mpg-range" class="slider"></div>
                        <label for="mileageRange">Mileage Range:</label>
                        <input type="text" id="mileageRange" readonly>
                        <div id="mileage-range" class="slider"></div>
                        </div>`;
        $("#filterArea").append(slider);
        let areaBadge = '';
        areaBadge += ` <div>
                <span class="badge badge-pill badge-warning">Area</span>  
                </div`;
        $("#areaBadge").append(areaBadge);
        $("#price-range").slider({
            range: true,
            min: 0,
            max: 200000,
            values: [0, 200000],
            slide: function (event, ui) {
                $("#priceRange").val("$" + ui.values[0] + " - $" + ui.values[1]);
            }
        });
        $("#priceRange").val(
            "$" +
            $("#price-range").slider("values", 0) +
            " - $" +
            $("#price-range").slider("values", 1)
        );
        $("#mpg-range").slider({
            range: true,
            min: 10,
            max: 100,
            values: [0, 100],
            slide: function (event, ui) {
                $("#MPGRange").val(ui.values[0] + " - " + ui.values[1]);
            }
        });
        $("#MPGRange").val(
            $("#mpg-range").slider("values", 0) +
            " - " +
            $("#mpg-range").slider("values", 1)
        );
        $("#mileage-range").slider({
            range: true,
            min: 0,
            max: 200000,
            values: [0, 200000],
            slide: function (event, ui) {
                $("#mileageRange").val(ui.values[0] + " - " + ui.values[1]);
            }
        });
        $("#mileageRange").val(
            $("#mileage-range").slider("values", 0) +
            " - " +
            $("#mileage-range").slider("values", 1)
        );
    } else {
        document.getElementById('filterArea').innerHTML = "";
        document.getElementById('areaBadge').innerHTML = "";
    }
}
// ********************* area ends **********************************
function volume() {
    volumeClick++;
    if (volumeClick % 2 != 0) {
        let slider = '';
        slider += `<div class="slider-box">
                        <label for="priceRange">Price Range:</label>
                        <input type="text" id="priceRange" readonly>
                        <div id="price-range" class="slider"></div>
                        <label for="MPGRange">MPG Range:</label>
                        <input type="text" id="MPGRange" readonly>
                        <div id="mpg-range" class="slider"></div>
                        <label for="mileageRange">square FT:</label>
                        <input type="text" id="mileageRange" readonly>
                        <div id="mileage-range" class="slider"></div>
                        </div>`;
        $("#filterVolume").append(slider);
        let volumeBadge = '';
        volumeBadge += ` <div>
                <span class="badge badge-pill badge-warning">volume</span>  
                </div`;
        $("#volumeBadge").append(volumeBadge);
        $("#price-range").slider({
            range: true,
            min: 0,
            max: 200000,
            values: [0, 200000],
            slide: function (event, ui) {
                $("#priceRange").val("$" + ui.values[0] + " - $" + ui.values[1]);
            }
        });
        $("#priceRange").val(
            "$" +
            $("#price-range").slider("values", 0) +
            " - $" +
            $("#price-range").slider("values", 1)
        );
        $("#mpg-range").slider({
            range: true,
            min: 10,
            max: 100,
            values: [0, 100],
            slide: function (event, ui) {
                $("#MPGRange").val(ui.values[0] + " - " + ui.values[1]);
            }
        });
        $("#MPGRange").val(
            $("#mpg-range").slider("values", 0) +
            " - " +
            $("#mpg-range").slider("values", 1)
        );
        $("#mileage-range").slider({
            range: true,
            min: 250,
            max: 2000,
            values: [250, 2000],
            slide: function (event, ui) {
                $("#mileageRange").val(ui.values[0] + " - " + ui.values[1]);
            }
        });
        $("#mileageRange").val(
            $("#mileage-range").slider("values", 0) +
            " - " +
            $("#mileage-range").slider("values", 1)
        );
        // $('#customRange2').slider().on('change', function(event) {
        //     var a = event.value.newValue;
        //     var b = event.value.oldValue;
        //     var changed = !($.inArray(a[0], b) !== -1 &&
        //         $.inArray(a[1], b) !== -1 &&
        //         $.inArray(b[0], a) !== -1 &&
        //         $.inArray(b[1], a) !== -1 &&
        //         a.length === b.length);
        //     if (changed) {
        //         
        //         
        //     }
        // });
    } else {
        document.getElementById('filterVolume').innerHTML = "";
        document.getElementById('volumeBadge').innerHTML = "";
    }
}
// ********************* Volume Ends ********************
function height() {
    heightClick++;
    if (heightClick % 2 != 0) {
        let slider = '';
        slider += `<div class="slider-box">
                        <label for="priceRange">Price Range:</label>
                        <input type="text" id="heightRange" readonly>
                        <div id="height-range" class="slider"></div>
                        <label for="MPGRange">MPG Range:</label>
                        <input type="text" id="MPGVHRange" readonly>
                        <div id="mpgvh-range" class="slider"></div>
                        <label for="mileageRange">square FT:</label>
                        <input type="text" id="mileageHRange" readonly>
                        <div id="mileageh-range" class="slider"></div>
                        </div>`;
        $("#filterHeight").append(slider);
        let heightBadge = '';
        heightBadge += ` <div>
                <span class="badge badge-pill badge-warning">Height</span>  
                </div`;
        $("#heightBadge").append(heightBadge);
        $("#height-range").slider({
            range: true,
            min: 0,
            max: 200000,
            values: [0, 200000],
            slide: function (event, ui) {
                $("#heightRange").val("$" + ui.values[0] + " - $" + ui.values[1]);
            }
        });
        $("#heightRange").val(
            "$" +
            $("#height-range").slider("values", 0) +
            " - $" +
            $("#height-range").slider("values", 1)
        );
        $("#mpgvh-range").slider({
            range: true,
            min: 10,
            max: 100,
            values: [0, 100],
            slide: function (event, ui) {
                $("#MPGVHRange").val(ui.values[0] + " - " + ui.values[1]);
            }
        });
        $("#MPGVHRange").val(
            $("#mpgvh-range").slider("values", 0) +
            " - " +
            $("#mpgvh-range").slider("values", 1)
        );
        $("#mileageh-range").slider({
            range: true,
            min: 250,
            max: 2000,
            values: [250, 2000],
            slide: function (event, ui) {
                $("#mileageHRange").val(ui.values[0] + " - " + ui.values[1]);
            }
        });
        $("#mileageHRange").val(
            $("#mileageh-range").slider("values", 0) +
            " - " +
            $("#mileageh-range").slider("values", 1)
        );
        // $('#customRange2').slider().on('change', function(event) {
        //     var a = event.value.newValue;
        //     var b = event.value.oldValue;
        //     var changed = !($.inArray(a[0], b) !== -1 &&
        //         $.inArray(a[1], b) !== -1 &&
        //         $.inArray(b[0], a) !== -1 &&
        //         $.inArray(b[1], a) !== -1 &&
        //         a.length === b.length);
        //     if (changed) {
        //         
        //         
        //     }
        // });
    } else {
        document.getElementById('filterHeight').innerHTML = "";
        document.getElementById('heightBadge').innerHTML = "";
    }
}
var clickme = 0;
$('#legendDiv').click(function () {
    clickme++;
    $('.legend').toggle();
});
$("#lists li").click(function () {
    $('#lists .pagination li').removeClass('active');
    $(this).toggleClass('active');
    // this.style = "background-color: #4B5D67;color: #F9F9F9 ;padding: 2px;border-radius: 40px 40px 40px 40px;margin-top:5px"
    // last-child.style.removeProperty("background-color");
});
var view;
var webscene;
var bgExpand;
var filtercount = 0;
var areacount = 0;
var distcount = 0;
var clickbase = 0;
var slidecount = 0;
var screenshotcount = 0;
var directioncount = 0;
var layerclick = 0;
var daycount = 0;
var layerListCount = 0;
var selectCount = 0;
var bgExpand, bgExpand2, expandHandle1, expandHandle2, bgExpand3, expandHandle3, bgExpand4, expandHandle4;
var highlightHandle = null;
require([
    "esri/WebScene",
    "esri/views/SceneView",
    "esri/layers/GraphicsLayer",
    "esri/widgets/Sketch/SketchViewModel",
    "esri/geometry/geometryEngine",
    "esri/Graphic",
    "esri/core/promiseUtils",
    "esri/widgets/DirectLineMeasurement3D",
    "esri/widgets/AreaMeasurement3D",
    "esri/widgets/DirectLineMeasurement3D/DirectLineMeasurement3DViewModel",
    "esri/widgets/AreaMeasurement3D/AreaMeasurement3DViewModel",
    "esri/widgets/Search",
    "esri/layers/MapImageLayer",
    "esri/config",
    "esri/widgets/Directions",
    "esri/widgets/BasemapGallery",
    "esri/widgets/Daylight",
    "esri/widgets/LineOfSight",
    "esri/core/watchUtils",
    "esri/widgets/Expand",
    "esri/geometry/Point",
    "esri/widgets/LayerList",
    "esri/tasks/support/Query",
    "esri/widgets/Editor",
    "esri/widgets/Bookmarks",
    "esri/widgets/Slider",
    "esri/layers/SceneLayer",
    "esri/Camera",
    "esri/widgets/Fullscreen",
    "esri/core/Accessor",
    "esri/webscene/Slide",
    "esri/widgets/TimeSlider",
    "esri/Camera",
    "esri/core/watchUtils",
], function (
    WebScene,
    SceneView,
    GraphicsLayer,
    SketchViewModel,
    geometryEngine,
    Graphic,
    promiseUtils,
    DirectLineMeasurement3D,
    AreaMeasurement3D,
    DirectLineMeasurement3DViewModel,
    AreaMeasurement3DViewModel,
    Search,
    MapImageLayer,

    esriConfig,
    Directions,
    BasemapGallery,
    Daylight,
    LineOfSight,
    watchUtils,
    Expand,
    Point,
    LayerList,
    Query,

    FeatureLayer,
    Editor,
    Bookmarks,
    SceneLayer,
    Slider,

    Fullscreen,
    Camera,
    Slide,
    TimeSlider,
    Camera,
    watchUtils



) {

    const webscene = new WebScene({
        portalItem: {
            id: "4f32e39e12b8499a9f3bb6e728b92c21"
        }
    })
    //8418e5d3bd4e42f388943f804ddabb69

    //8b0068fe94794b5888c3b63a01dc00be

    //701e25b12867467abcc375aa6571e181
    const view = new SceneView({
        map: webscene,
        container: "viewDiv",
        highlightOptions: {
            color: "red"
        } // Div element
    });
    window.view = view;
    view.watch("camera", (camera) => {
        // 
        // 

    })




    var camera = new Camera();
    // the position is autocast as new Point()
    camera.position = {

        latitude: 22.28243461819386,
        longitude: 114.11128459073682,
        z: 3762.2907671239227 // altitude in meters
    }
    camera.heading = 89.94190518013454
    camera.tilt = 65.10965027585844

    setTimeout(() => {

        // go to the new camera
        view.goTo(camera);
    }, 10000);



    // add a GraphicsLayer for the sketches and the buffer
    const sketchLayer = new GraphicsLayer();
    const bufferLayer = new GraphicsLayer();
    view.map.addMany([bufferLayer, sketchLayer]);

    let sceneLayer = null;
    let sceneLayerView = null;
    let bufferSize = 0;

    // Assign scene layer once webscene is loaded and initialize UI
    webscene.load().then(function () {

        sceneLayer = webscene.layers.find(function (layer) {

            return layer.title === "HongKong";
        });
        sceneLayer.outFields = ["*"];

        view.whenLayerView(sceneLayer).then(function (layerView) {
            sceneLayerView = layerView;
            queryDiv.style.display = "none";
        });
    });

    view.ui.add([queryDiv], "bottom-left");

    // use SketchViewModel to draw polygons that are used as a query
    let sketchGeometry = null;
    const sketchViewModel = new SketchViewModel({
        layer: sketchLayer,
        defaultUpdateOptions: {
            tool: "reshape",
            toggleToolOnClick: false
        },
        view: view,
        defaultCreateOptions: {
            hasZ: false
        }
    });

    sketchViewModel.on("create", function (event) {
        if (event.state === "complete") {
            sketchGeometry = event.graphic.geometry;
            runQuery();
        }
    });

    sketchViewModel.on("update", function (event) {
        if (event.state === "complete") {
            sketchGeometry = event.graphics[0].geometry;
            runQuery();
        }
    });
    // draw geometry buttons - use the selected geometry to sktech

    document
        .getElementById("polygon-geometry-button")
        .addEventListener("click", geometryButtonsClickHandler);

    function geometryButtonsClickHandler(event) {
        const geometryType = event.target.value;
        clearGeometry();
        sketchViewModel.create(geometryType);
    }


    // get user entered values for buffer



    // Clear the geometry and set the default renderer
    document
        .getElementById("clearGeometry")
        .addEventListener("click", clearGeometry);

    // Clear the geometry and set the default renderer
    function clearGeometry() {
        sketchGeometry = null;
        sketchViewModel.cancel();
        sketchLayer.removeAll();
        bufferLayer.removeAll();
        clearHighlighting();
    }

    // set the geometry query on the visible SceneLayerView
    var debouncedRunQuery = promiseUtils.debounce(function () {
        if (!sketchGeometry) {
            return;
        }
        updateBufferGraphic(bufferSize);
        return promiseUtils.eachAlways([
            updateSceneLayer()
        ]);
    });

    function runQuery() {
        debouncedRunQuery().catch((error) => {
            if (error.name === "AbortError") {
                return;
            }


        })
    }

    // Set the renderer with objectIds


    function clearHighlighting() {
        if (highlightHandle) {
            highlightHandle.remove();
            highlightHandle = null;
        }
    }
    $(".clearHighlighting").on('click', () => {

        clearHighlighting();
    })

    var avoidLooping = 1;

    function highlightBuildings(objectIds) {

        if (avoidLooping === 1) {

            selectionResponse = [];
            dataTableResponse.features.forEach(i => {
                objectIds.forEach(element => {
                    if (i.attributes.OBJECTID == element) {
                        selectionResponse.push(i.attributes);
                    }
                })
            });
            swal({
                title: "No of records found" + " " + selectionResponse.length,
                text: "",
                icon: "info",
                button: "Ok",
            });
            updateSelectionSeries(selectionResponse);
            trHTML = '';
            dataTableInfo(selectionResponse);
            $('#dataTableButton').show();

            // Remove any previous highlighting
            // removeHighlight();
            // clearHighlighting();

            selectData(objectIds);


        }
        avoidLooping++;
        // Remove any previous highlighting
        clearHighlighting();
        const objectIdField = sceneLayer.objectIdField;
        document.getElementById("count").innerHTML = objectIds.length;

        highlightHandle = sceneLayerView.highlight(objectIds);
    }
    const updateSelectionSeries = async (selectionResponse) => {
        try {
            if (type == "encroachment") {

                if (selectionFlagEncro == 0) {

                    const tt = await selectionCalculation(selectionResponse);
                }
            }
            if (type == "development") {

                if (selectionFlagDevelop == 0) {

                    const tt = await selectionCalculation(selectionResponse);
                }
            } if (type == "landuse") {

                if (selectionFlagLanduse == 0) {

                    const tt = await selectionCalculation(selectionResponse);
                }
            } if (type == "complaints") {

                if (selectionFlagComplaints == 0) {

                    const tt = await selectionCalculation(selectionResponse);
                }
            }

        }
        catch {

        }
    }

    function selectionCalculation(selectionResponse) {
        return new Promise((resolve, reject) => {
            if (type == "encroachment") {
                selectionFlagEncro = 1;

                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2015 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2016 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2017 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                f += i.area1;
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2018 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2019 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                h = 0;
                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2020 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2021 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2022 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2023 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2024 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;

                encro.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Encroachment2025 == elements) {
                            if (elements == "legal change") {
                                legalChange++;
                                a += i.area1;
                            } else if (elements == "illegal change") {
                                illegalChange++;
                                b += i.area1;
                            } else if (elements == "disputed") {
                                disputed++;
                                c += i.area1;
                            } else if (elements == "verification pending") {
                                verificationPending++;
                                d += i.area1;
                            } else if (elements == "illegal") {
                                illegal++;
                                e += i.area1;
                            } else if (elements == "demolished") {
                                encroachmentDemolished++;
                            } else if (elements == "for demolition") {
                                encroachmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "unaffected") {
                                unaffected++;
                                h += i.area1;
                            }
                        }
                    });
                });
                countSelection.encroachment.legalChange.push(legalChange);
                countSelection.encroachment.illegalChange.push(illegalChange);
                countSelection.encroachment.disputed.push(disputed);
                countSelection.encroachment.verificationPending.push(verificationPending);
                countSelection.encroachment.illegal.push(illegal);
                countSelection.encroachment.encroachmentDemolished.push(encroachmentDemolished);
                countSelection.encroachment.encroachmentForDemolition.push(encroachmentForDemolition);
                countSelection.encroachment.unaffected.push(unaffected);
                dataSelection.encroachmentArea.legalChange.push(a);
                dataSelection.encroachmentArea.illegalChange.push(b);
                dataSelection.encroachmentArea.disputed.push(c);
                dataSelection.encroachmentArea.verificationPending.push(d)
                dataSelection.encroachmentArea.illegal.push(e);
                dataSelection.encroachmentArea.encroachmentDemolished.push(f);
                dataSelection.encroachmentArea.encroachmentForDemolition.push(g);
                dataSelection.encroachmentArea.unaffected.push(h);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                legalChange = 0;
                illegalChange = 0;
                disputed = 0;
                verificationPending = 0;
                illegal = 0;
                encroachmentDemolished = 0;
                encroachmentForDemolition = 0;
                unaffected = 0;



            }
            if (type == "landuse") {
                selectionFlagLanduse = 1;
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;


                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2015 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2016 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2017 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2018 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2019 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2020 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2021 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2022 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2023 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2024 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                land.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Landuse2025 == elements) {
                            if (elements == "residential") {
                                residentialCount++;
                                a += i.area1;
                            } else if (elements == "commericial") {
                                commercialCount++;
                                b += i.area1;
                            } else if (elements == "educational") {
                                educationalCount++;
                                c += i.area1;
                            } else if (elements == "recreational") {
                                recreationalCount++;
                                d += i.area1;
                            } else if (elements == "industrial") {
                                industrialCount++;
                                e += i.area1;
                            } else if (elements == "governmental") {
                                governmentalCount++;
                                f += i.area1;
                            } else if (elements == "institutional") {
                                institutionalCount++;
                                g += i.area1;
                            } else if (elements == "utilities") {
                                utilitiesCount++;
                                h += i.area1;
                            } else if (elements == "mixed use") {
                                mixedUseCount++;
                                i += i.area1;
                            } else if (elements == "commercial residential mix") {
                                commercialResidentialMixCount++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.landuse.residential.push(residentialCount);
                countSelection.landuse.commercial.push(commercialCount);
                countSelection.landuse.educational.push(educationalCount);
                countSelection.landuse.industrial.push(industrialCount);
                countSelection.landuse.recreational.push(recreationalCount);
                countSelection.landuse.commercialResidentialMix.push(commercialResidentialMixCount);
                countSelection.landuse.governmental.push(governmentalCount);
                countSelection.landuse.institutional.push(institutionalCount);
                countSelection.landuse.utilities.push(utilitiesCount);
                countSelection.landuse.mixedUse.push(mixedUseCount);
                dataSelection.landuseArea.residential.push(a);
                dataSelection.landuseArea.commercial.push(b);
                dataSelection.landuseArea.educational.push(c);
                dataSelection.landuseArea.recreational.push(d)
                dataSelection.landuseArea.industrial.push(e);
                dataSelection.landuseArea.governmental.push(f);
                dataSelection.landuseArea.institutional.push(g);
                dataSelection.landuseArea.utilities.push(h);
                dataSelection.landuseArea.mixedUse.push(i)
                dataSelection.landuseArea.commercialResidentialMix.push(j);
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                residentialCount = 0;
                commercialCount = 0;
                educationalCount = 0;
                industrialCount = 0;
                recreationalCount = 0;
                commercialResidentialMixCount = 0;
                governmentalCount = 0;
                institutionalCount = 0;
                utilitiesCount = 0;
                mixedUseCount = 0;
                resolve();
            }
            if (type == "development") {
                selectionFlagDevelop = 1;
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;


                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2015 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2016 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2017 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2018 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2019 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2020 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2021 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2022 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2023 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2024 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;
                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                develop.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Development2025 == elements) {
                            if (elements == "completed") {
                                completed++;
                                a += i.area1;
                            } else if (elements == "unchanged") {
                                unchanged++;
                                b += i.area1;
                            } else if (elements == "demolished") {
                                developmentDemolished++;
                                c += i.area1
                            } else if (elements == "under construction") {
                                underConstruction++;
                                d += i.area1;
                            } else if (elements == "depleted") {
                                depleted++;
                                e += i.area1;
                            } else if (elements == "planned") {
                                planned++;
                                f += i.area1;
                            } else if (elements == "for demolition") {
                                developmentForDemolition++;
                                g += i.area1;
                            } else if (elements == "proposed") {
                                proposed++;
                                h += i.area1;
                            } else if (elements == "under maintainence") {
                                underMaintenence++;
                                i += i.area1;
                            } else if (elements == "stopped") {
                                stopped++;
                                j += i.area1;
                            }
                        }
                    });
                });
                countSelection.development.completed.push(completed);
                countSelection.development.unchanged.push(unchanged);
                countSelection.development.developmentDemolished.push(developmentDemolished);
                countSelection.development.underConstruction.push(underConstruction);
                countSelection.development.depleted.push(depleted);
                countSelection.development.planned.push(planned);
                countSelection.development.proposed.push(proposed);
                countSelection.development.underMaintenence.push(underMaintenence);
                countSelection.development.stopped.push(stopped);
                countSelection.development.developmentForDemolition.push(developmentForDemolition);
                dataSelection.developmentArea.completed.push(Math.round(a));
                dataSelection.developmentArea.unchanged.push(Math.round(b));
                dataSelection.developmentArea.developmentDemolished.push(Math.round(c));
                dataSelection.developmentArea.underConstruction.push(Math.round(d))
                dataSelection.developmentArea.depleted.push(Math.round(e));
                dataSelection.developmentArea.planned.push(Math.round(f));
                dataSelection.developmentArea.developmentForDemolition.push(Math.round(g));
                dataSelection.developmentArea.proposed.push(Math.round(h));
                dataSelection.developmentArea.underMaintenence.push(Math.round(i));
                dataSelection.developmentArea.stopped.push(Math.round(j));
                a = 0;
                b = 0;
                c = 0;
                d = 0;
                e = 0;
                f = 0;
                g = 0;
                h = 0;
                i = 0;
                j = 0;

                completed = 0;
                unchanged = 0;
                developmentDemolished = 0;
                underConstruction = 0;
                depleted = 0;
                planned = 0;
                proposed = 0;
                underMaintenence = 0;
                stopped = 0;
                developmentForDemolition = 0;
                resolve();
            }
            if (type == "complaints") {
                selectionFlagComplaints = 1;
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;



                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2015 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2016 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2017 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2018 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2019 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2020 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2021 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2022 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2023 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2024 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                complain.forEach(elements => {
                    selectionResponse.filter(i => {
                        if (i.Complaints2025 == elements) {
                            if (elements == "assigned") {
                                assigned++;
                            }
                            else if (elements == "reported") {
                                reported++;
                            } else if (elements == "complaint closed") {
                                complaintClosed++;
                            } else if (elements == "inspected") {
                                inspected++;
                            } else if (elements == "demolished") {
                                complaintsDemolished++;
                            }
                        }
                    });
                });
                countSelection.complaints.assigned.push(assigned);
                countSelection.complaints.reported.push(reported);
                countSelection.complaints.complaintClosed.push(complaintClosed);
                countSelection.complaints.inspected.push(inspected);
                countSelection.complaints.complaintsDemolished.push(complaintsDemolished);
                assigned = 0;
                reported = 0;
                complaintClosed = 0;
                inspected = 0;
                complaintsDemolished = 0;
                //initial complaints chart highlight Code and CountSelection ENDs
                resolve();
            }




            if (appState.maxYear == 2015) {
                status = appState.maxYear;

                if (type == "landuse") {

                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[0]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[0]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[0]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[0]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[0]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[0]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[0]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[0]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[0]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[0]]
                    }]);


                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[0]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[0]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[0]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[0]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[0]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[0]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[0]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[0]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[0]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[0]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[0],
                    countSelection.landuse.commercial[0], countSelection.landuse.educational[0], countSelection.landuse.recreational[0], countSelection.landuse.industrial[0], countSelection.landuse.governmental[0], countSelection.landuse.institutional[0], countSelection.landuse.utilities[0], countSelection.landuse.mixedUse[0], countSelection.landuse.commercialResidentialMix[0]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[0],
                    dataSelection.landuseArea.commercial[0], dataSelection.landuseArea.educational[0], dataSelection.landuseArea.recreational[0], dataSelection.landuseArea.industrial[0], dataSelection.landuseArea.governmental[0], dataSelection.landuseArea.institutional[0], dataSelection.landuseArea.utilities[0], dataSelection.landuseArea.mixedUse[0], dataSelection.landuseArea.commercialResidentialMix[0]
                    ]);
                } else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[0],
                    dataSelection.developmentArea.unchanged[0], dataSelection.developmentArea.developmentDemolished[0], dataSelection.developmentArea.underConstruction[0], dataSelection.developmentArea.depleted[0], dataSelection.developmentArea.planned[0], dataSelection.developmentArea.proposed[0], dataSelection.developmentArea.underMaintenence[0], dataSelection.developmentArea.stopped[0], dataSelection.developmentArea.developmentForDemolition[0]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[0]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[0]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[0]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[0]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[0]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[0]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[0]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[0]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[0]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[0]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[0],
                    countSelection.development.unchanged[0], countSelection.development.developmentDemolished[0], countSelection.development.underConstruction[0], countSelection.development.depleted[0], countSelection.development.planned[0], countSelection.development.proposed[0], countSelection.development.underMaintenence[0], countSelection.development.stopped[0], countSelection.development.developmentForDemolition[0]
                    ]);
                } else if (type == "encroachment") {


                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[0], dataSelection.encroachmentArea.illegalChange[0], dataSelection.encroachmentArea.disputed[0], dataSelection.encroachmentArea.verificationPending[0], dataSelection.encroachmentArea.illegal[0], dataSelection.encroachmentArea.encroachmentDemolished[0], dataSelection.encroachmentArea.encroachmentForDemolition[0], dataSelection.encroachmentArea.unaffected[0]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[0]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[0]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[0]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[0]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[0]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[0]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[0]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[0]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[0],
                    countSelection.encroachment.illegalChange[0], countSelection.encroachment.disputed[0], countSelection.encroachment.verificationPending[0], countSelection.encroachment.illegal[0], countSelection.encroachment.encroachmentDemolished[0], countSelection.encroachment.encroachmentForDemolition[0], countSelection.encroachment.unaffected[0]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[0]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[0]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[0]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[0]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[0]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[0],
                    countSelection.complaints.reported[0], countSelection.complaints.complaintClosed[0], countSelection.complaints.inspected[0], countSelection.complaints.complaintsDemolished[0]]);
                }

            }
            else if (appState.maxYear == 2016) {


                status = appState.maxYear;
                if (type == "landuse") {
                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[1]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[1]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[1]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[1]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[1]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[1]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[1]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[1]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[1]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[1]]
                    }]);
                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[1]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[1]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[1]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[1]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[1]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[1]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[1]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[1]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[1]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[1]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[1],
                    countSelection.landuse.commercial[1], countSelection.landuse.educational[1], countSelection.landuse.recreational[1], countSelection.landuse.industrial[1], countSelection.landuse.governmental[1], countSelection.landuse.institutional[1], countSelection.landuse.utilities[1], countSelection.landuse.mixedUse[1], countSelection.landuse.commercialResidentialMix[1]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[1],
                    dataSelection.landuseArea.commercial[1], dataSelection.landuseArea.educational[1], dataSelection.landuseArea.recreational[1], dataSelection.landuseArea.industrial[1], dataSelection.landuseArea.governmental[1], dataSelection.landuseArea.institutional[1], dataSelection.landuseArea.utilities[1], dataSelection.landuseArea.mixedUse[1], dataSelection.landuseArea.commercialResidentialMix[1]
                    ]);
                }
                else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[1],
                    dataSelection.developmentArea.unchanged[1], dataSelection.developmentArea.developmentDemolished[1], dataSelection.developmentArea.underConstruction[1], dataSelection.developmentArea.depleted[1], dataSelection.developmentArea.planned[1], dataSelection.developmentArea.proposed[1], dataSelection.developmentArea.underMaintenence[1], dataSelection.developmentArea.stopped[1], dataSelection.developmentArea.developmentForDemolition[1]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[1]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[1]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[1]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[1]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[1]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[1]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[1]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[1]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[1]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[1]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[1],
                    countSelection.development.unchanged[1], countSelection.development.developmentDemolished[1], countSelection.development.underConstruction[1], countSelection.development.depleted[1], countSelection.development.planned[1], countSelection.development.proposed[1], countSelection.development.underMaintenence[1], countSelection.development.stopped[1], countSelection.development.developmentForDemolition[1]
                    ]);
                } else if (type == "encroachment") {
                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[1], dataSelection.encroachmentArea.illegalChange[1], dataSelection.encroachmentArea.disputed[1], dataSelection.encroachmentArea.verificationPending[1], dataSelection.encroachmentArea.illegal[1], dataSelection.encroachmentArea.encroachmentDemolished[1], dataSelection.encroachmentArea.encroachmentForDemolition[1], dataSelection.encroachmentArea.unaffected[1]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[1]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[1]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[1]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[1]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[1]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[1]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[1]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[1]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[1],
                    countSelection.encroachment.illegalChange[1], countSelection.encroachment.disputed[1], countSelection.encroachment.verificationPending[1], countSelection.encroachment.illegal[1], countSelection.encroachment.encroachmentDemolished[1], countSelection.encroachment.encroachmentForDemolition[1], countSelection.encroachment.unaffected[1]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[1]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[1]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[1]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[1]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[1]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[1],
                    countSelection.complaints.reported[1], countSelection.complaints.complaintClosed[1], countSelection.complaints.inspected[1], countSelection.complaints.complaintsDemolished[1]]);
                }

            }
            else if (appState.maxYear == 2017) {
                status = appState.maxYear;
                if (type == "landuse") {
                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[2]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[2]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[2]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[2]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[2]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[2]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[2]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[2]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[2]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[2]]
                    }]);
                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[2]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[2]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[2]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[2]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[2]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[2]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[2]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[2]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[2]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[2]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[2],
                    countSelection.landuse.commercial[2], countSelection.landuse.educational[2], countSelection.landuse.recreational[2], countSelection.landuse.industrial[2], countSelection.landuse.governmental[2], countSelection.landuse.institutional[2], countSelection.landuse.utilities[2], countSelection.landuse.mixedUse[2], countSelection.landuse.commercialResidentialMix[2]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[2],
                    dataSelection.landuseArea.commercial[2], dataSelection.landuseArea.educational[2], dataSelection.landuseArea.recreational[2], dataSelection.landuseArea.industrial[2], dataSelection.landuseArea.governmental[2], dataSelection.landuseArea.institutional[2], dataSelection.landuseArea.utilities[2], dataSelection.landuseArea.mixedUse[2], dataSelection.landuseArea.commercialResidentialMix[2]
                    ]);
                } else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[2],
                    dataSelection.developmentArea.unchanged[2], dataSelection.developmentArea.developmentDemolished[2], dataSelection.developmentArea.underConstruction[2], dataSelection.developmentArea.depleted[2], dataSelection.developmentArea.planned[2], dataSelection.developmentArea.proposed[2], dataSelection.developmentArea.underMaintenence[2], dataSelection.developmentArea.stopped[2], dataSelection.developmentArea.developmentForDemolition[2]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[2]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[2]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[2]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[2]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[2]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[2]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[2]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[2]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[2]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[2]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[2],
                    countSelection.development.unchanged[2], countSelection.development.developmentDemolished[2], countSelection.development.underConstruction[2], countSelection.development.depleted[2], countSelection.development.planned[2], countSelection.development.proposed[2], countSelection.development.underMaintenence[2], countSelection.development.stopped[2], countSelection.development.developmentForDemolition[2]
                    ]);
                } else if (type == "encroachment") {
                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[2], dataSelection.encroachmentArea.illegalChange[2], dataSelection.encroachmentArea.disputed[2], dataSelection.encroachmentArea.verificationPending[2], dataSelection.encroachmentArea.illegal[2], dataSelection.encroachmentArea.encroachmentDemolished[2], dataSelection.encroachmentArea.encroachmentForDemolition[2], dataSelection.encroachmentArea.unaffected[2]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[2]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[2]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[2]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[2]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[2]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[2]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[2]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[2]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[2],
                    countSelection.encroachment.illegalChange[2], countSelection.encroachment.disputed[2], countSelection.encroachment.verificationPending[2], countSelection.encroachment.illegal[2], countSelection.encroachment.encroachmentDemolished[2], countSelection.encroachment.encroachmentForDemolition[2], countSelection.encroachment.unaffected[2]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[2]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[2]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[2]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[2]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[2]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[2],
                    countSelection.complaints.reported[2], countSelection.complaints.complaintClosed[2], countSelection.complaints.inspected[2], countSelection.complaints.complaintsDemolished[2]]);
                }

            }
            else if (appState.maxYear == 2018) {
                status = appState.maxYear;
                if (type == "landuse") {
                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[3]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[3]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[3]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[3]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[3]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[3]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[3]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[3]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[3]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[3]]
                    }]);
                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[3]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[3]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[3]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[3]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[3]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[3]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[3]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[3]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[3]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[3]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[3],
                    countSelection.landuse.commercial[3], countSelection.landuse.educational[3], countSelection.landuse.recreational[3], countSelection.landuse.industrial[3], countSelection.landuse.governmental[3], countSelection.landuse.institutional[3], countSelection.landuse.utilities[3], countSelection.landuse.mixedUse[3], countSelection.landuse.commercialResidentialMix[3]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[3],
                    dataSelection.landuseArea.commercial[3], dataSelection.landuseArea.educational[3], dataSelection.landuseArea.recreational[3], dataSelection.landuseArea.industrial[3], dataSelection.landuseArea.governmental[3], dataSelection.landuseArea.institutional[3], dataSelection.landuseArea.utilities[3], dataSelection.landuseArea.mixedUse[3], dataSelection.landuseArea.commercialResidentialMix[3]
                    ]);
                } else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[3],
                    dataSelection.developmentArea.unchanged[3], dataSelection.developmentArea.developmentDemolished[3], dataSelection.developmentArea.underConstruction[3], dataSelection.developmentArea.depleted[3], dataSelection.developmentArea.planned[3], dataSelection.developmentArea.proposed[3], dataSelection.developmentArea.underMaintenence[3], dataSelection.developmentArea.stopped[3], dataSelection.developmentArea.developmentForDemolition[3]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[3]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[3]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[3]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[3]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[3]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[3]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[3]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[3]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[3]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[3]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[3],
                    countSelection.development.unchanged[3], countSelection.development.developmentDemolished[3], countSelection.development.underConstruction[3], countSelection.development.depleted[3], countSelection.development.planned[3], countSelection.development.proposed[3], countSelection.development.underMaintenence[3], countSelection.development.stopped[3], countSelection.development.developmentForDemolition[3]
                    ]);
                } else if (type == "encroachment") {
                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[3], dataSelection.encroachmentArea.illegalChange[3], dataSelection.encroachmentArea.disputed[3], dataSelection.encroachmentArea.verificationPending[3], dataSelection.encroachmentArea.illegal[3], dataSelection.encroachmentArea.encroachmentDemolished[3], dataSelection.encroachmentArea.encroachmentForDemolition[3], dataSelection.encroachmentArea.unaffected[3]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[3]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[3]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[3]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[3]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[3]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[3]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[3]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[3]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[3],
                    countSelection.encroachment.illegalChange[3], countSelection.encroachment.disputed[3], countSelection.encroachment.verificationPending[3], countSelection.encroachment.illegal[3], countSelection.encroachment.encroachmentDemolished[3], countSelection.encroachment.encroachmentForDemolition[3], countSelection.encroachment.unaffected[3]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[3]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[3]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[3]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[3]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[3]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[3],
                    countSelection.complaints.reported[3], countSelection.complaints.complaintClosed[3], countSelection.complaints.inspected[3], countSelection.complaints.complaintsDemolished[3]]);
                }

            }
            else if (appState.maxYear == 2019) {
                status = appState.maxYear;
                if (type == "landuse") {
                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[4]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[4]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[4]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[4]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[4]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[4]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[4]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[4]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[4]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[4]]
                    }]);
                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[4]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[4]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[4]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[4]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[4]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[4]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[4]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[4]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[4]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[4]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[4],
                    countSelection.landuse.commercial[4], countSelection.landuse.educational[4], countSelection.landuse.recreational[4], countSelection.landuse.industrial[4], countSelection.landuse.governmental[4], countSelection.landuse.institutional[4], countSelection.landuse.utilities[4], countSelection.landuse.mixedUse[4], countSelection.landuse.commercialResidentialMix[4]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[4],
                    dataSelection.landuseArea.commercial[4], dataSelection.landuseArea.educational[4], dataSelection.landuseArea.recreational[4], dataSelection.landuseArea.industrial[4], dataSelection.landuseArea.governmental[4], dataSelection.landuseArea.institutional[4], dataSelection.landuseArea.utilities[4], dataSelection.landuseArea.mixedUse[4], dataSelection.landuseArea.commercialResidentialMix[4]
                    ]);
                } else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[4],
                    dataSelection.developmentArea.unchanged[4], dataSelection.developmentArea.developmentDemolished[4], dataSelection.developmentArea.underConstruction[4], dataSelection.developmentArea.depleted[4], dataSelection.developmentArea.planned[4], dataSelection.developmentArea.proposed[4], dataSelection.developmentArea.underMaintenence[4], dataSelection.developmentArea.stopped[4], dataSelection.developmentArea.developmentForDemolition[4]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[4]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[4]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[4]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[4]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[4]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[4]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[4]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[4]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[4]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[4]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[4],
                    countSelection.development.unchanged[4], countSelection.development.developmentDemolished[4], countSelection.development.underConstruction[4], countSelection.development.depleted[4], countSelection.development.planned[4], countSelection.development.proposed[4], countSelection.development.underMaintenence[4], countSelection.development.stopped[4], countSelection.development.developmentForDemolition[4]
                    ]);
                } else if (type == "encroachment") {
                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[4], dataSelection.encroachmentArea.illegalChange[4], dataSelection.encroachmentArea.disputed[4], dataSelection.encroachmentArea.verificationPending[4], dataSelection.encroachmentArea.illegal[4], dataSelection.encroachmentArea.encroachmentDemolished[4], dataSelection.encroachmentArea.encroachmentForDemolition[4], dataSelection.encroachmentArea.unaffected[4]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[4]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[4]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[4]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[4]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[4]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[4]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[4]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[4]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[4],
                    countSelection.encroachment.illegalChange[4], countSelection.encroachment.disputed[4], countSelection.encroachment.verificationPending[4], countSelection.encroachment.illegal[4], countSelection.encroachment.encroachmentDemolished[4], countSelection.encroachment.encroachmentForDemolition[4], countSelection.encroachment.unaffected[4]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[4]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[4]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[4]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[4]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[4]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[4],
                    countSelection.complaints.reported[4], countSelection.complaints.complaintClosed[4], countSelection.complaints.inspected[4], countSelection.complaints.complaintsDemolished[4]]);
                }

            }
            else if (appState.maxYear == 2020) {
                status = appState.maxYear;
                if (type == "landuse") {
                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[5]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[5]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[5]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[5]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[5]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[5]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[5]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[5]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[5]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[5]]
                    }]);
                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[5]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[5]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[5]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[5]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[5]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[5]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[5]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[5]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[5]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[5]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[5],
                    countSelection.landuse.commercial[5], countSelection.landuse.educational[5], countSelection.landuse.recreational[5], countSelection.landuse.industrial[5], countSelection.landuse.governmental[5], countSelection.landuse.institutional[5], countSelection.landuse.utilities[5], countSelection.landuse.mixedUse[5], countSelection.landuse.commercialResidentialMix[5]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[5],
                    dataSelection.landuseArea.commercial[5], dataSelection.landuseArea.educational[5], dataSelection.landuseArea.recreational[5], dataSelection.landuseArea.industrial[5], dataSelection.landuseArea.governmental[5], dataSelection.landuseArea.institutional[5], dataSelection.landuseArea.utilities[5], dataSelection.landuseArea.mixedUse[5], dataSelection.landuseArea.commercialResidentialMix[5]
                    ]);
                } else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[5],
                    dataSelection.developmentArea.unchanged[5], dataSelection.developmentArea.developmentDemolished[5], dataSelection.developmentArea.underConstruction[5], dataSelection.developmentArea.depleted[5], dataSelection.developmentArea.planned[5], dataSelection.developmentArea.proposed[5], dataSelection.developmentArea.underMaintenence[5], dataSelection.developmentArea.stopped[5], dataSelection.developmentArea.developmentForDemolition[5]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[5]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[5]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[5]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[5]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[5]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[5]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[5]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[5]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[5]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[5]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[5],
                    countSelection.development.unchanged[5], countSelection.development.developmentDemolished[5], countSelection.development.underConstruction[5], countSelection.development.depleted[5], countSelection.development.planned[5], countSelection.development.proposed[5], countSelection.development.underMaintenence[5], countSelection.development.stopped[5], countSelection.development.developmentForDemolition[5]
                    ]);
                } else if (type == "encroachment") {
                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[5], dataSelection.encroachmentArea.illegalChange[5], dataSelection.encroachmentArea.disputed[5], dataSelection.encroachmentArea.verificationPending[5], dataSelection.encroachmentArea.illegal[5], dataSelection.encroachmentArea.encroachmentDemolished[5], dataSelection.encroachmentArea.encroachmentForDemolition[5], dataSelection.encroachmentArea.unaffected[5]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[5]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[5]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[5]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[5]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[5]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[5]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[5]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[5]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[5],
                    countSelection.encroachment.illegalChange[5], countSelection.encroachment.disputed[5], countSelection.encroachment.verificationPending[5], countSelection.encroachment.illegal[5], countSelection.encroachment.encroachmentDemolished[5], countSelection.encroachment.encroachmentForDemolition[5], countSelection.encroachment.unaffected[5]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[5]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[5]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[5]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[5]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[5]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[5],
                    countSelection.complaints.reported[5], countSelection.complaints.complaintClosed[5], countSelection.complaints.inspected[5], countSelection.complaints.complaintsDemolished[5]]);
                }

            }
            else if (appState.maxYear == 2021) {
                status = appState.maxYear;
                if (type == "landuse") {
                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[6]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[6]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[6]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[6]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[6]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[6]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[6]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[6]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[6]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[6]]
                    }]);
                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[6]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[6]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[6]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[6]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[6]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[6]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[6]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[6]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[6]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[6]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[6],
                    countSelection.landuse.commercial[6], countSelection.landuse.educational[6], countSelection.landuse.recreational[6], countSelection.landuse.industrial[6], countSelection.landuse.governmental[6], countSelection.landuse.institutional[6], countSelection.landuse.utilities[6], countSelection.landuse.mixedUse[6], countSelection.landuse.commercialResidentialMix[6]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[6],
                    dataSelection.landuseArea.commercial[6], dataSelection.landuseArea.educational[6], dataSelection.landuseArea.recreational[6], dataSelection.landuseArea.industrial[6], dataSelection.landuseArea.governmental[6], dataSelection.landuseArea.institutional[6], dataSelection.landuseArea.utilities[6], dataSelection.landuseArea.mixedUse[6], dataSelection.landuseArea.commercialResidentialMix[6]
                    ]);
                } else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[6],
                    dataSelection.developmentArea.unchanged[6], dataSelection.developmentArea.developmentDemolished[6], dataSelection.developmentArea.underConstruction[6], dataSelection.developmentArea.depleted[6], dataSelection.developmentArea.planned[6], dataSelection.developmentArea.proposed[6], dataSelection.developmentArea.underMaintenence[6], dataSelection.developmentArea.stopped[6], dataSelection.developmentArea.developmentForDemolition[6]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[6]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[6]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[6]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[6]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[6]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[6]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[6]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[6]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[6]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[6]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[6],
                    countSelection.development.unchanged[6], countSelection.development.developmentDemolished[6], countSelection.development.underConstruction[6], countSelection.development.depleted[6], countSelection.development.planned[6], countSelection.development.proposed[6], countSelection.development.underMaintenence[6], countSelection.development.stopped[6], countSelection.development.developmentForDemolition[6]
                    ]);
                } else if (type == "encroachment") {
                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[6], dataSelection.encroachmentArea.illegalChange[6], dataSelection.encroachmentArea.disputed[6], dataSelection.encroachmentArea.verificationPending[6], dataSelection.encroachmentArea.illegal[6], dataSelection.encroachmentArea.encroachmentDemolished[6], dataSelection.encroachmentArea.encroachmentForDemolition[6], dataSelection.encroachmentArea.unaffected[6]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[6]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[6]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[6]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[6]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[6]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[6]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[6]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[6]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[6],
                    countSelection.encroachment.illegalChange[6], countSelection.encroachment.disputed[6], countSelection.encroachment.verificationPending[6], countSelection.encroachment.illegal[6], countSelection.encroachment.encroachmentDemolished[6], countSelection.encroachment.encroachmentForDemolition[6], countSelection.encroachment.unaffected[6]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[6]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[6]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[6]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[6]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[6]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[6],
                    countSelection.complaints.reported[6], countSelection.complaints.complaintClosed[6], countSelection.complaints.inspected[6], countSelection.complaints.complaintsDemolished[6]]);
                }

            }
            else if (appState.maxYear == 2022) {
                status = appState.maxYear;
                if (type == "landuse") {
                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[7]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[7]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[7]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[7]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[7]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[7]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[7]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[7]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[7]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[7]]
                    }]);
                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[7]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[7]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[7]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[7]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[7]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[7]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[7]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[7]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[7]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[7]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[7],
                    countSelection.landuse.commercial[7], countSelection.landuse.educational[7], countSelection.landuse.recreational[7], countSelection.landuse.industrial[7], countSelection.landuse.governmental[7], countSelection.landuse.institutional[7], countSelection.landuse.utilities[7], countSelection.landuse.mixedUse[7], countSelection.landuse.commercialResidentialMix[7]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[7],
                    dataSelection.landuseArea.commercial[7], dataSelection.landuseArea.educational[7], dataSelection.landuseArea.recreational[7], dataSelection.landuseArea.industrial[7], dataSelection.landuseArea.governmental[7], dataSelection.landuseArea.institutional[7], dataSelection.landuseArea.utilities[7], dataSelection.landuseArea.mixedUse[7], dataSelection.landuseArea.commercialResidentialMix[7]
                    ]);
                } else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[7],
                    dataSelection.developmentArea.unchanged[7], dataSelection.developmentArea.developmentDemolished[7], dataSelection.developmentArea.underConstruction[7], dataSelection.developmentArea.depleted[7], dataSelection.developmentArea.planned[7], dataSelection.developmentArea.proposed[7], dataSelection.developmentArea.underMaintenence[7], dataSelection.developmentArea.stopped[7], dataSelection.developmentArea.developmentForDemolition[7]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[7]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[7]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[7]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[7]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[7]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[7]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[7]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[7]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[7]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[7]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[7],
                    countSelection.development.unchanged[7], countSelection.development.developmentDemolished[7], countSelection.development.underConstruction[7], countSelection.development.depleted[7], countSelection.development.planned[7], countSelection.development.proposed[7], countSelection.development.underMaintenence[7], countSelection.development.stopped[7], countSelection.development.developmentForDemolition[7]
                    ]);
                } else if (type == "encroachment") {
                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[7], dataSelection.encroachmentArea.illegalChange[7], dataSelection.encroachmentArea.disputed[7], dataSelection.encroachmentArea.verificationPending[7], dataSelection.encroachmentArea.illegal[7], dataSelection.encroachmentArea.encroachmentDemolished[7], dataSelection.encroachmentArea.encroachmentForDemolition[7], dataSelection.encroachmentArea.unaffected[7]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[7]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[7]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[7]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[7]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[7]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[7]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[7]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[7]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[7],
                    countSelection.encroachment.illegalChange[7], countSelection.encroachment.disputed[7], countSelection.encroachment.verificationPending[7], countSelection.encroachment.illegal[7], countSelection.encroachment.encroachmentDemolished[7], countSelection.encroachment.encroachmentForDemolition[7], countSelection.encroachment.unaffected[7]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[7]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[7]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[7]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[7]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[7]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[7],
                    countSelection.complaints.reported[7], countSelection.complaints.complaintClosed[7], countSelection.complaints.inspected[7], countSelection.complaints.complaintsDemolished[7]]);
                }

            }
            else if (appState.maxYear == 2023) {
                status = appState.maxYear;
                if (type == "landuse") {
                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[8]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[8]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[8]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[8]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[8]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[8]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[8]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[8]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[8]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[8]]
                    }]);
                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[8]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[8]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[8]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[8]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[8]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[8]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[8]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[8]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[8]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[8]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[8],
                    countSelection.landuse.commercial[8], countSelection.landuse.educational[8], countSelection.landuse.recreational[8], countSelection.landuse.industrial[8], countSelection.landuse.governmental[8], countSelection.landuse.institutional[8], countSelection.landuse.utilities[8], countSelection.landuse.mixedUse[8], countSelection.landuse.commercialResidentialMix[8]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[8],
                    dataSelection.landuseArea.commercial[8], dataSelection.landuseArea.educational[8], dataSelection.landuseArea.recreational[8], dataSelection.landuseArea.industrial[8], dataSelection.landuseArea.governmental[8], dataSelection.landuseArea.institutional[8], dataSelection.landuseArea.utilities[8], dataSelection.landuseArea.mixedUse[8], dataSelection.landuseArea.commercialResidentialMix[8]
                    ]);
                } else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[8],
                    dataSelection.developmentArea.unchanged[8], dataSelection.developmentArea.developmentDemolished[8], dataSelection.developmentArea.underConstruction[8], dataSelection.developmentArea.depleted[8], dataSelection.developmentArea.planned[8], dataSelection.developmentArea.proposed[8], dataSelection.developmentArea.underMaintenence[8], dataSelection.developmentArea.stopped[8], dataSelection.developmentArea.developmentForDemolition[8]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[8]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[8]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[8]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[8]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[8]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[8]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[8]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[8]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[8]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[8]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[8],
                    countSelection.development.unchanged[8], countSelection.development.developmentDemolished[8], countSelection.development.underConstruction[8], countSelection.development.depleted[8], countSelection.development.planned[8], countSelection.development.proposed[8], countSelection.development.underMaintenence[8], countSelection.development.stopped[8], countSelection.development.developmentForDemolition[8]
                    ]);
                } else if (type == "encroachment") {
                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[8], dataSelection.encroachmentArea.illegalChange[8], dataSelection.encroachmentArea.disputed[8], dataSelection.encroachmentArea.verificationPending[8], dataSelection.encroachmentArea.illegal[8], dataSelection.encroachmentArea.encroachmentDemolished[8], dataSelection.encroachmentArea.encroachmentForDemolition[8], dataSelection.encroachmentArea.unaffected[8]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[8]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[8]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[8]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[8]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[8]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[8]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[8]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[8]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[8],
                    countSelection.encroachment.illegalChange[8], countSelection.encroachment.disputed[8], countSelection.encroachment.verificationPending[8], countSelection.encroachment.illegal[8], countSelection.encroachment.encroachmentDemolished[8], countSelection.encroachment.encroachmentForDemolition[8], countSelection.encroachment.unaffected[8]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[8]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[8]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[8]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[8]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[8]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[8],
                    countSelection.complaints.reported[8], countSelection.complaints.complaintClosed[8], countSelection.complaints.inspected[8], countSelection.complaints.complaintsDemolished[8]]);
                }

            }
            else if (appState.maxYear == 2024) {
                status = appState.maxYear;
                if (type == "landuse") {
                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[9]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[9]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[9]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[9]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[9]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[9]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[9]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[9]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[9]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[9]]
                    }]);

                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[9]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[9]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[9]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[9]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[9]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[9]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[9]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[9]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[9]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[9]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[9],
                    countSelection.landuse.commercial[9], countSelection.landuse.educational[9], countSelection.landuse.recreational[9], countSelection.landuse.industrial[9], countSelection.landuse.governmental[9], countSelection.landuse.institutional[9], countSelection.landuse.utilities[9], countSelection.landuse.mixedUse[9], countSelection.landuse.commercialResidentialMix[9]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[9],
                    dataSelection.landuseArea.commercial[9], dataSelection.landuseArea.educational[9], dataSelection.landuseArea.recreational[9], dataSelection.landuseArea.industrial[9], dataSelection.landuseArea.governmental[9], dataSelection.landuseArea.institutional[9], dataSelection.landuseArea.utilities[9], dataSelection.landuseArea.mixedUse[9], dataSelection.landuseArea.commercialResidentialMix[9]
                    ]);
                } else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[9],
                    dataSelection.developmentArea.unchanged[9], dataSelection.developmentArea.developmentDemolished[9], dataSelection.developmentArea.underConstruction[9], dataSelection.developmentArea.depleted[9], dataSelection.developmentArea.planned[9], dataSelection.developmentArea.proposed[9], dataSelection.developmentArea.underMaintenence[9], dataSelection.developmentArea.stopped[9], dataSelection.developmentArea.developmentForDemolition[9]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[9]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[9]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[9]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[9]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[9]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[9]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[9]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[9]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[9]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[9]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[9],
                    countSelection.development.unchanged[9], countSelection.development.developmentDemolished[9], countSelection.development.underConstruction[9], countSelection.development.depleted[9], countSelection.development.planned[9], countSelection.development.proposed[9], countSelection.development.underMaintenence[9], countSelection.development.stopped[9], countSelection.development.developmentForDemolition[9]
                    ]);
                } else if (type == "encroachment") {
                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[9], dataSelection.encroachmentArea.illegalChange[9], dataSelection.encroachmentArea.disputed[9], dataSelection.encroachmentArea.verificationPending[9], dataSelection.encroachmentArea.illegal[9], dataSelection.encroachmentArea.encroachmentDemolished[9], dataSelection.encroachmentArea.encroachmentForDemolition[9], dataSelection.encroachmentArea.unaffected[9]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[9]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[9]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[9]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[9]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[9]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[9]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[9]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[9]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[9],
                    countSelection.encroachment.illegalChange[9], countSelection.encroachment.disputed[9], countSelection.encroachment.verificationPending[9], countSelection.encroachment.illegal[9], countSelection.encroachment.encroachmentDemolished[9], countSelection.encroachment.encroachmentForDemolition[9], countSelection.encroachment.unaffected[9]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[9]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[9]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[9]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[9]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[9]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[9],
                    countSelection.complaints.reported[9], countSelection.complaints.complaintClosed[9], countSelection.complaints.inspected[9], countSelection.complaints.complaintsDemolished[9]]);
                }

            }
            else if (appState.maxYear == 2025) {
                status = appState.maxYear;
                if (type == "landuse") {
                    status = appState.maxYear;
                    landuseBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [countSelection.landuse.residential[10]]
                    }, {
                        name: 'Commercial',
                        data: [countSelection.landuse.commercial[10]]
                    },
                    {
                        name: 'Educational',
                        data: [countSelection.landuse.educational[10]]
                    }, {
                        name: 'Recreational',
                        data: [countSelection.landuse.industrial[10]]
                    }, {
                        name: 'Industrial',
                        data: [countSelection.landuse.recreational[10]]
                    }, {
                        name: 'Governmental',
                        data: [countSelection.landuse.commercialResidentialMix[10]]
                    }, {
                        name: 'Institutional',
                        data: [countSelection.landuse.governmental[10]]
                    }, {
                        name: 'Utilities',
                        data: [countSelection.landuse.institutional[10]]
                    }, {
                        name: 'MixedUse',
                        data: [countSelection.landuse.utilities[10]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [countSelection.landuse.mixedUse[10]]
                    }]);
                    landuseAreaBarCharts.updateSeries([{
                        name: 'Residential',
                        data: [dataSelection.landuseArea.residential[10]]
                    }, {
                        name: 'Commercial',
                        data: [dataSelection.landuseArea.commercial[10]]
                    },
                    {
                        name: 'Educational',
                        data: [dataSelection.landuseArea.educational[10]]
                    }, {
                        name: 'Recreational',
                        data: [dataSelection.landuseArea.industrial[10]]
                    }, {
                        name: 'Industrial',
                        data: [dataSelection.landuseArea.recreational[10]]
                    }, {
                        name: 'Governmental',
                        data: [dataSelection.landuseArea.commercialResidentialMix[10]]
                    }, {
                        name: 'Institutional',
                        data: [dataSelection.landuseArea.governmental[10]]
                    }, {
                        name: 'Utilities',
                        data: [dataSelection.landuseArea.institutional[10]]
                    }, {
                        name: 'MixedUse',
                        data: [dataSelection.landuseArea.utilities[10]]
                    }, {
                        name: 'Commercial Residential Mix',
                        data: [dataSelection.landuseArea.mixedUse[10]]
                    }]);
                    landusePieCharts.updateSeries([countSelection.landuse.residential[10],
                    countSelection.landuse.commercial[10], countSelection.landuse.educational[10], countSelection.landuse.recreational[10], countSelection.landuse.industrial[10], countSelection.landuse.governmental[10], countSelection.landuse.institutional[10], countSelection.landuse.utilities[10], countSelection.landuse.mixedUse[10], countSelection.landuse.commercialResidentialMix[10]
                    ]);
                    landuseAreaPieCharts.updateSeries([dataSelection.landuseArea.residential[10],
                    dataSelection.landuseArea.commercial[10], dataSelection.landuseArea.educational[10], dataSelection.landuseArea.recreational[10], dataSelection.landuseArea.industrial[10], dataSelection.landuseArea.governmental[10], dataSelection.landuseArea.institutional[10], dataSelection.landuseArea.utilities[10], dataSelection.landuseArea.mixedUse[10], dataSelection.landuseArea.commercialResidentialMix[10]
                    ]);
                } else if (type == "development") {
                    developmentAreaPieCharts.updateSeries([dataSelection.developmentArea.completed[10],
                    dataSelection.developmentArea.unchanged[10], dataSelection.developmentArea.developmentDemolished[10], dataSelection.developmentArea.underConstruction[10], dataSelection.developmentArea.depleted[10], dataSelection.developmentArea.planned[10], dataSelection.developmentArea.proposed[10], dataSelection.developmentArea.underMaintenence[10], dataSelection.developmentArea.stopped[10], dataSelection.developmentArea.developmentForDemolition[10]
                    ]);
                    developmentAreaBarCharts.updateSeries([{
                        name: 'Completed',
                        data: [dataSelection.developmentArea.completed[10]]
                    }, {
                        name: 'Unchanged',
                        data: [dataSelection.developmentArea.unchanged[10]]
                    }, {
                        name: 'Demolished',
                        data: [dataSelection.developmentArea.developmentDemolished[10]]
                    }, {
                        name: 'Under Construction',
                        data: [dataSelection.developmentArea.underConstruction[10]]
                    }, {
                        name: 'Depleted',
                        data: [dataSelection.developmentArea.depleted[10]]
                    }, {
                        name: 'Planned',
                        data: [dataSelection.developmentArea.planned[10]]
                    }, {
                        name: 'Proposed',
                        data: [dataSelection.developmentArea.proposed[10]]
                    }, {
                        name: 'Under Maintenence',
                        data: [dataSelection.developmentArea.underMaintenence[10]]
                    }, {
                        name: 'Stopped',
                        data: [dataSelection.developmentArea.stopped[10]]
                    }, {
                        name: 'For Demolition',
                        data: [dataSelection.developmentArea.developmentForDemolition[10]]
                    },]);
                    developmentPieCharts.updateSeries([countSelection.development.completed[10],
                    countSelection.development.unchanged[10], countSelection.development.developmentDemolished[10], countSelection.development.underConstruction[10], countSelection.development.depleted[10], countSelection.development.planned[10], countSelection.development.proposed[10], countSelection.development.underMaintenence[10], countSelection.development.stopped[10], countSelection.development.developmentForDemolition[10]
                    ]);
                } else if (type == "encroachment") {
                    encroachmentAreaPieCharts.updateSeries([dataSelection.encroachmentArea.legalChange[10], dataSelection.encroachmentArea.illegalChange[10], dataSelection.encroachmentArea.disputed[10], dataSelection.encroachmentArea.verificationPending[10], dataSelection.encroachmentArea.illegal[10], dataSelection.encroachmentArea.encroachmentDemolished[10], dataSelection.encroachmentArea.encroachmentForDemolition[10], dataSelection.encroachmentArea.unaffected[10]
                    ]);
                    encroachmentBarCharts.updateSeries([{
                        name: 'Legal Change',
                        data: [countSelection.encroachment.legalChange[10]]
                    },
                    {
                        name: 'Illegal Change',
                        data: [countSelection.encroachment.illegalChange[10]]
                    },
                    {
                        name: 'Disputed',
                        data: [countSelection.encroachment.disputed[10]]
                    },
                    {
                        name: 'Verification Pending',
                        data: [countSelection.encroachment.verificationPending[10]]
                    },
                    {
                        name: 'Illegal',
                        data: [countSelection.encroachment.illegal[10]]
                    },
                    {
                        name: 'Demolished',
                        data: [countSelection.encroachment.encroachmentDemolished[10]]
                    },
                    {
                        name: 'For Demolition',
                        data: [countSelection.encroachment.encroachmentForDemolition[10]]
                    },
                    {
                        name: 'Unaffected',
                        data: [countSelection.encroachment.unaffected[10]]
                    }
                    ]);
                    encroachmentPieCharts.updateSeries([countSelection.encroachment.legalChange[10],
                    countSelection.encroachment.illegalChange[10], countSelection.encroachment.disputed[10], countSelection.encroachment.verificationPending[10], countSelection.encroachment.illegal[10], countSelection.encroachment.encroachmentDemolished[10], countSelection.encroachment.encroachmentForDemolition[10], countSelection.encroachment.unaffected[10]
                    ]);
                } else if (type == "complaints") {
                    complaintsBarCharts.updateSeries([
                        {
                            name: 'assigned',
                            data: [countSelection.complaints.assigned[10]]
                        },
                        {
                            name: 'reported',
                            data: [countSelection.complaints.reported[10]]
                        },
                        {
                            name: 'complaintClosed',
                            data: [countSelection.complaints.complaintClosed[10]]
                        },
                        {
                            name: 'inspected',
                            data: [countSelection.complaints.inspected[10]]
                        },
                        {
                            name: 'complaintsDemolished',
                            data: [countSelection.complaints.complaintsDemolished[10]]
                        }]);
                    complaintsPieCharts.updateSeries([countSelection.complaints.assigned[10],
                    countSelection.complaints.reported[10], countSelection.complaints.complaintClosed[10], countSelection.complaints.inspected[10], countSelection.complaints.complaintsDemolished[10]]);
                }

            }
            reslove();

        })
    }

    // update the graphic with buffer
    function updateBufferGraphic(buffer) {

        // add a polygon graphic for the buffer
        if (buffer > 0) {
            var bufferGeometry = geometryEngine.geodesicBuffer(
                sketchGeometry,
                buffer,
                "meters"
            );
            if (bufferLayer.graphics.length === 0) {
                bufferLayer.add(
                    new Graphic({
                        geometry: bufferGeometry,
                        symbol: sketchViewModel.polygonSymbol
                    })
                );
            } else {
                bufferLayer.graphics.getItemAt(0).geometry = bufferGeometry;
            }
        } else {
            bufferLayer.removeAll();
        }
    }

    function updateSceneLayer() {
        const query = sceneLayerView.createQuery();
        query.geometry = sketchGeometry;
        query.distance = bufferSize;
        return sceneLayerView
            .queryObjectIds(query)
            .then(highlightBuildings);
    }







    function clearCharts() {

    }
    const start = new Date(2015, 0, 1)
    const end = new Date(2025, 0, 1)

    //Add timeSlider 
    const timeSlider = new TimeSlider({
        container: "timeSliderDiv",
        view: view,
        mode: "instant",
        // show data within a given time range
        // in this case data within one year
        fullTimeExtent: { // entire extent of the timeSlider
            start: new Date(2015, 0, 1),
            end: new Date(2025, 0, 1)
        },
        values: [ // location of timeSlider thumbs

            new Date(2010, 1, 1)
        ],
        stops: {
            interval: {
                value: 1,
                unit: "years"
            },
            timeExtent: {
                start,
                end
            }
        }
    });

    view.ui.add(timeSlider, "manual");
    //  var bgExpand2 = new Expand({
    //     view: view,
    //     content: directionsWidget
    //     });
    //  // Add the Directions widget to the top right corner of the view
    //  view.ui.add(bgExpand2, "bottom-right");
    view.ui.add(["createSlideDiv", "slidesDiv"], "top-right");
    /*********************************************************************
     * Function to create the UI for a slide by creating DOM nodes and
     * adding them to the slidesDiv container.
     *********************************************************************/
    function createSlideUI(slide, placement) {
        /*********************************************************************
         * Create a new <div> element which contains all the slide information.
         * Store a reference to the created DOM node so we can use it to place
         * other DOM nodes and connect events.
         *********************************************************************/
        var slideElement = document.createElement("div");
        // Assign the ID of the slide to the <span> element
        slideElement.id = slide.id;
        slideElement.classList.add("slide");
        /*********************************************************************
         * Place the newly created DOM node cat the beginning of the slidesDiv
         *********************************************************************/
        var slidesDiv = document.getElementById("slidesDiv");
        if (placement === "first") {
            slidesDiv.insertBefore(slideElement, slidesDiv.firstChild);
        } else {
            slidesDiv.appendChild(slideElement);
        }
        /*********************************************************************
         * Create a <div> element to contain the slide title text
         *********************************************************************/
        var title = document.createElement("div");
        title.innerText = slide.title.text;
        // Place the title of the slide in the <div> element
        slideElement.appendChild(title);
        /*********************************************************************
         * Create a new <img> element and place it inside the newly created slide
         * element. This will reference the thumbnail from the slide.
         *********************************************************************/
        var img = new Image();
        // Set the src URL of the image to the thumbnail URL of the slide
        img.src = slide.thumbnail.url;
        // Set the title property of the image to the title of the slide
        img.title = slide.title.text;
        // Place the image inside the new <div> element
        slideElement.appendChild(img);
        /*********************************************************************
         * Set up a click event handler on the newly created slide. When clicked,
         * the code defined below will execute.
         *********************************************************************/
        slideElement.addEventListener("click", function () {
            /*******************************************************************
             * Remove the "active" class from all elements with the .slide class
             *******************************************************************/
            var slides = document.querySelectorAll(".slide");
            Array.from(slides).forEach(function (node) {
                node.classList.remove("active");
            });
            /*******************************************************************
             * Add the "active" class on the current element being selected
             *******************************************************************/
            slideElement.classList.add("active");
            /******************************************************************
             * Applies a slide's settings to the SceneView.
             *
             * Each slide has a viewpoint and visibleLayers property that define
             * the point of view or camera for the slide and the layers that should
             * be visible to the user when the slide is selected. This method
             * allows the user to animate to the given slide's viewpoint and turn
             * on its visible layers and basemap layers in the view.
             ******************************************************************/
            slide.applyTo(view);
        });
    }
    view.when(function () {
        webscene.allLayers.forEach(layer => {
            if (layer.title == "HongKong") {
                //layer title =HongKong1 - HongKong



                bdgLayer = layer;
                //             bdgLayer.popupTemplate = {
                //             content: `Building is {${config.heightField}}m tall, was built in
                //             {${config.yearField}} and is has a {${config.usageField}} use.`
                //             };
                view.whenLayerView(layer).then(function (lyrView) {
                    bdgLayerView = lyrView;
                    appState.maxYear = 2015;

                    bdgLayer.definitionExpression = `(${appState.startYearField} IS  NULL OR ${appState.maxYear} >=  ${appState.startYearField}) AND  (${appState.maxYear} <=  ${appState.endYearField} OR ${appState.endYearField} IS  NULL)`;
                    //-------------------------------- Time slider code ------------------------------------------------
                    const timeSlider = time.createTimeSlider(view);
                    timeSlider.watch("timeExtent", function (timeExtent) {
                        removeHighlight();
                        appState.maxYear = timeExtent.end.getFullYear();  //get year from time slider
                        //code below for filter
                        years = appState.maxYear; //New
                        $("#filterArea").empty(); // to remove oldselection
                        $('#filterAreaName').empty(); //New
                        $('#filterComplaint').empty(); //New
                        $('#filterDevelopment').empty(); //New
                        $('#filterEnchroachment').empty(); //New
                        $("#filterHeight").empty(); //New
                        $('#filterLanduse').empty(); //New
                        $("#filterVolume").empty(); //New

                        //Badge 
                        $("#areaBadge").empty();
                        $("#areaNameBadge").empty();
                        $("#complaintBadge").empty();
                        $("#developmentBadge").empty();
                        $("#enchroachmentBadge").empty();
                        $("#heightBadge").empty();
                        $("#landuseBadge").empty();
                        $("#volumeBadge").empty();
                        areaAnd = ""    //for query concat
                        complaintAnd = ""
                        developementAnd = ""
                        encroachmentAnd = ""
                        landuseAnd = ""
                        yearAnd = ""
                        areaClick = 0;       //to append to new node
                        areaNameClick = 0;
                        complaintClick = 0;
                        developementClick = 0;
                        encroachmentClick = 0;
                        heightClick = 0;
                        landuseClick = 0;
                        volumeClick = 0;
                        yearsClick = 0;

                        if (type == "encroachment") {
                            updateMap(EncroachmentResponse, type);
                        } else if (type == "development") {
                            updateMap(DevelopmentResponse, type);
                        }
                        else if (type == "landuse") {
                            updateMap(LanduseResponse, type);
                        }
                        else if (type == "complaints") {
                            updateMap(ComplaintsResponse, type);
                        }
                        else if (type == "timeline") {
                            updateMap(null, type);

                        }
                    });
                    $("#legendEncroachment").click();
                });
            }
        });
        /*********************************************************************
         * The slides will be placed in the 'slidesDiv' <div> element.
         *********************************************************************/
        document.getElementById("slidesDiv").style.visibility = "visible";
        /*********************************************************************
         * The slides are a collection inside the presentation property of
         * the WebScene.
         *********************************************************************/
        var slides = webscene.presentation.slides;
        /*********************************************************************
         * Loop through each slide in the collection and render the slide
         *********************************************************************/
        slides.forEach(createSlideUI);
        /*********************************************************************
         * Create a new slide using Slide.createFrom after clicking on the
         * create slide button, using the text from the title input for the
         * title of the slide.
         *********************************************************************/
        document
            .getElementById("createSlideButton")
            .addEventListener("click", function () {
                /*******************************************************************
                 * Use the Slide.createFrom static method to create a new slide which
                 * contains a snapshot (visible layers, basemap, camera) of the
                 * current view. This method returns a Promise which resolves with a
                 * new Slide instance once the slide as been successfully created.
                 *******************************************************************/
                Slide.createFrom(view).then(function (slide) {
                    /*****************************************************************
                     * Set the slide title
                     *****************************************************************/
                    slide.title.text = document.getElementById(
                        "createSlideTitleInput"
                    ).value;
                    /*****************************************************************
                     * Add the slide to the slides collection of the scene presentation
                     * such that if the scene were to published back to the portal, the
                     * newly created slide would be correctly persisted as part of the
                     * WebScene
                     *****************************************************************/
                    webscene.presentation.slides.add(slide);
                    /*****************************************************************
                     * Create UI for the slide and present it to the user
                     *****************************************************************/
                    createSlideUI(slide, "first");
                });
            });
    });
    var fullscreen = null;
    var layerList = null;
    var activeWidgetDist = null;
    var activeWidgetArea = null;
    var lineOfSight = null;
    var searchWidget = null;

    const widgetDivCont = document.getElementById('widgetDivCont');
    const bmBtn = document.getElementById('basemapBtn');
    const layerBtn = document.getElementById('llBtn');
    const daylightBtn = document.getElementById('dayBtn');
    const distanceBtn = document.getElementById('distanceButton');
    const areaBtn = document.getElementById('areaButton');
    const deleteme = document.getElementById('crross');
    const bookmarkBtn = document.getElementById('bookmark');
    const slideBtn = document.getElementById('slideWidget');
    const directionBtn = document.getElementById('directionButton');
    const screenshotBtn = document.getElementById("screenshotBtn");
    const maskDiv = document.getElementById("maskDiv");
    const screenshotDiv = document.getElementById("screenshotDiv");
    const myfilter = document.getElementById("filterButton");
    const LayersBtn = document.getElementById("layerListDiv");
    const selectTool = document.getElementById('selectBtn');


    fullscreen = new Fullscreen({
        view: view,

    });

    view.ui.add(fullscreen, "bottom-right");
    view.ui.add(fullscreenButton, "bottom-right");



    document.getElementById("searchLogo").addEventListener('click', function () {
        var searchWidget = new Search({
            view: view,
            container: "searchWidget"
        });
    })
    LayersBtn.addEventListener("click", function () {
        layerListCount++;
        if (layerListCount % 2 == 0 || layerListCount == 0) {
            $('.esri-layer-list__list').css({
                'display': 'none'
            })
        }
        else {
            $('.esri-layer-list__list').css({
                'display': 'block'
            })
            var layerList = new LayerList({
                view: view,
                container: "viewDiv"
            });
        }
    })
    //    var layerList = new LayerList({
    //         view: view
    //       });
    //       // Add widget to the top right corner of the view
    //       view.ui.add(layerList, "bottom-left");
    screenshotBtn.addEventListener("click", function () {
        screenshotcount = 1;
        $("#areaButton").css({
            "background-color": ""
        })
        $("#areasvg").css({
            "fill": ""
        });
        $("#filtersvg").css({
            "fill": ""
        });
        $("#filterButton").css({
            "background-color": ""
        });
        $("#distanceButton").css({
            "background-color": ""
        })
        $("#distancesvg").css({
            "fill": ""
        });
        $("#basemapBtn").css({
            "background-color": ""
        })
        $("#basemapsvg").css({
            "fill": ""
        });
        $("#slideWidget").css({
            "background-color": ""
        })
        $("#slidersvg").css({
            "fill": ""
        });
        $("#screenshotBtn").css({
            "background-color": "#4B5D67"
        })
        $("#screenshotsvg").css({
            "fill": "#F9F9F9  !important"
        });
        $("#directionButton").css({
            "background-color": ""
        })
        $("#directionsvg").css({
            "fill": ""
        });
        $("#llBtn").css({
            "background-color": ""
        })
        $("#linesvg").css({
            "fill": ""
        })
        $("#selectBtn").css({
            "background-color": ""
        })

        $("#selectsvg").css({
            "fill": ""
        })

        $("#dayBtn").css({
            "background-color": ""
        });
        $("#daysvg").css({
            "fill": ""
        });
        screenshotBtn.classList.add("active");
        view.container.classList.add("screenshotCursor");
        let area = null;
        // listen for drag events and compute the selected area
        const dragHandler = view.on("drag", function (event) {
            // prevent navigation in the view
            event.stopPropagation();
            // when the user starts dragging or is dragging
            if (event.action !== "end") {
                // calculate the extent of the area selected by dragging the cursor
                const xmin = clamp(Math.min(event.origin.x, event.x), 0, view.width);
                const xmax = clamp(Math.max(event.origin.x, event.x), 0, view.width);
                const ymin = clamp(Math.min(event.origin.y, event.y), 0, view.height);
                const ymax = clamp(Math.max(event.origin.y, event.y), 0, view.height);
                area = {
                    x: xmin,
                    y: ymin,
                    width: xmax - xmin,
                    height: ymax - ymin
                };
                // set the position of the div element that marks the selected area
                setMaskPosition(area);
            }
            // when the user stops dragging
            else {
                // remove the drag event listener from the SceneView
                dragHandler.remove();
                // the screenshot of the selected area is taken
                view.takeScreenshot({ area: area, format: "png" }).then(function (screenshot) {
                    // display a preview of the image
                    showPreview(screenshot);
                    // create the image for download
                    document.getElementById("downloadBtn").onclick = function () {
                        const text = document.getElementById("textInput").value;
                        // if a text exists, then add it to the image
                        if (text) {
                            const dataUrl = getImageWithText(screenshot, text);
                            downloadImage(webscene.portalItem.title + ".png", dataUrl);
                        }
                        // otherwise download only the webscene screenshot
                        else {
                            downloadImage(webscene.portalItem.title + ".png", screenshot.dataUrl);
                        }
                    };
                    // the screenshot mode is disabled
                    screenshotBtn.classList.remove("active");
                    view.container.classList.remove("screenshotCursor");
                    setMaskPosition(null);
                });
            }
        });
        function setMaskPosition(area) {
            if (area) {
                maskDiv.classList.remove("hide");
                maskDiv.style.left = area.x + "px";
                maskDiv.style.top = area.y + "px";
                maskDiv.style.width = area.width + "px";
                maskDiv.style.height = area.height + "px";
            } else {
                maskDiv.classList.add("hide");
            }
        }
        function clamp(value, from, to) {
            return value < from ? from : value > to ? to : value;
        }
    });
    // creates an image that will be appended to the DOM
    // so that users can have a preview of what they will download
    function showPreview(screenshot) {
        screenshotDiv.classList.remove("hide");
        // add the screenshot dataUrl as the src of an image element
        const screenshotImage = document.getElementsByClassName("js-screenshot-image")[0];
        screenshotImage.width = screenshot.data.width;
        screenshotImage.height = screenshot.data.height;
        screenshotImage.src = screenshot.dataUrl;
    }
    // returns a new image created by adding a custom text to the webscene image
    function getImageWithText(screenshot, text) {
        const imageData = screenshot.data;
        // to add the text to the screenshot we create a new canvas element
        const canvas = document.createElement("canvas");
        const context = canvas.getContext("2d");
        canvas.height = imageData.height;
        canvas.width = imageData.width;
        // add the screenshot data to the canvas
        context.putImageData(imageData, 0, 0);
        context.font = "20px Arial";
        context.fillStyle = "#000";
        context.fillRect(0, imageData.height - 40, context.measureText(text).width + 20, 30);
        // add the text from the textInput element
        context.fillStyle = "#fff";
        context.fillText(text, 10, imageData.height - 20);
        return canvas.toDataURL();
    }
    function downloadImage(filename, dataUrl) {
        // the download is handled differently in Microsoft browsers
        // because the download attribute for <a> elements is not supported
        if (!window.navigator.msSaveOrOpenBlob) {
            // in browsers that support the download attribute
            // a link is created and a programmatic click will trigger the download
            const element = document.createElement("a");
            element.setAttribute("href", dataUrl);
            element.setAttribute("download", filename);
            element.style.display = "none";
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        } else {
            // for MS browsers convert dataUrl to Blob
            const byteString = atob(dataUrl.split(",")[1]);
            const mimeString = dataUrl
                .split(",")[0]
                .split(":")[1]
                .split(";")[0];
            const ab = new ArrayBuffer(byteString.length);
            const ia = new Uint8Array(ab);
            for (let i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            const blob = new Blob([ab], { type: mimeString });
            // download file
            window.navigator.msSaveOrOpenBlob(blob, filename);
        }
    }
    // button to hide the print preview html element
    document.getElementById("closeBtn").addEventListener("click", function () {
        screenshotDiv.classList.add("hide");
        screenshotcount = 0;
        $("#screenshotBtn").css({
            "background-color": ""
        })
        $("#screenshotsvg").css({
            "fill": ""
        })
    });
    myfilter.addEventListener('click', function () {
        $("#areaButton").css({
            "background-color": ""
        })
        $("#areasvg").css({
            "fill": ""
        });
        $("#distanceButton").css({
            "background-color": ""
        })
        $("#distancesvg").css({
            "fill": ""
        });
        $("#basemapBtn").css({
            "background-color": ""
        })
        $("#basemapsvg").css({
            "fill": ""
        });
        $("#slideWidget").css({
            "background-color": ""
        })
        $("#slidersvg").css({
            "fill": ""
        });
        $("#screenshotBtn").css({
            "background-color": ""
        })
        $("#screenshotsvg").css({
            "fill": ""
        });
        $("#directionButton").css({
            "background-color": ""
        })
        $("#directionsvg").css({
            "fill": ""
        });
        $("#llBtn").css({
            "background-color": ""
        })
        $("#linesvg").css({
            "fill": ""
        });
        $("#selectBtn").css({
            "background-color": ""
        });
        $("#selectsvg").css({
            "fill": ""
        });
        $("#dayBtn").css({
            "background-color": ""
        });
        $("#daysvg").css({
            "fill": ""
        });
        filtercount++;
        if (lineOfSight != null) {
            lineOfSight.viewModel.clear();
        }
        if (activeWidgetArea != null) {
            activeWidgetArea.viewModel.clear();
        }
        if (activeWidgetDist != null) {
            activeWidgetDist.viewModel.clear();
        }
        if (areacount >= 1) {
            areacount = 2;
        } else {
            areacount = 0;
        }
        if (distcount >= 1) {
            distcount = 2;
        } else {
            distcount = 0;
        }
        if (layerclick >= 1) {
            layerclick = 2;
        } else {
            layerclick = 0;
        }
        queryDiv.style.display = "none";
        selectCount = 0;
        clickbase = 0;
        daycount = 0;
        slidecount = 0;
        slidecount = 0;
        directioncount = 0;
        $("#createSlideDiv").hide();
        $("#buildingDetail").hide();
        $("#slidesDiv").hide();
        $('.esri-directions__panel-content').hide();
        $('.esri-direct-line-measurement-3d__container').css({
            "display": "none"
        })
        $('.esri-area-measurement-3d__container').css({
            "display": "none"
        });
        $('.esri-line-of-sight__container').css({
            "display": "none"
        })
        document.getElementById('widgetDivCont').innerHTML = "";
        widgetDivCont.style.display = "none";
        if (filtercount % 2 != 0) {
            filterCarousel = 1;
            $("#filterButton").css({
                "background-color": "#4B5D67"
            })
            $("#filtersvg").css({
                "fill": "#F9F9F9  !important"
            })
            $('.filter').show();

        }
        else {
            filterCarousel = 0;
            $("#filtersvg").css({
                "fill": ""
            });
            $("#filterButton").css({
                "background-color": ""
            })
            $('.filter').hide();
            filtercount = 0;

        }
    });
    directionBtn.addEventListener('click', function () {
        directioncount++;
        $("#filtersvg").css({
            "fill": ""
        });
        $("#filterButton").css({
            "background-color": ""
        });
        $("#areaButton").css({
            "background-color": ""
        })
        $("#areasvg").css({
            "fill": ""
        });
        $("#distanceButton").css({
            "background-color": ""
        })
        $("#distancesvg").css({
            "fill": ""
        });
        $("#basemapBtn").css({
            "background-color": ""
        })
        $("#basemapsvg").css({
            "fill": ""
        });
        $("#slideWidget").css({
            "background-color": ""
        })
        $("#slidersvg").css({
            "fill": ""
        });
        $("#screenshotBtn").css({
            "background-color": ""
        })
        $("#screenshotsvg").css({
            "fill": ""
        });
        $("#llBtn").css({
            "background-color": ""
        })
        $("#linesvg").css({
            "fill": ""
        });
        $("#selectBtn").css({
            "background-color": ""
        });
        $("#selectsvg").css({
            "fill": ""
        });
        $("#dayBtn").css({
            "background-color": ""
        });
        $("#daysvg").css({
            "fill": ""
        });
        if (lineOfSight != null) {
            lineOfSight.viewModel.clear();
        }
        if (activeWidgetArea != null) {
            activeWidgetArea.viewModel.clear();
        }
        if (activeWidgetDist != null) {
            activeWidgetDist.viewModel.clear();
        }
        if (areacount >= 1) {
            areacount = 2;
        } else {
            areacount = 0;
        }
        if (distcount >= 1) {
            distcount = 2;
        } else {
            distcount = 0;
        }
        if (layerclick >= 1) {
            layerclick = 2;
        } else {
            layerclick = 0;
        }
        clickbase = 0;
        daycount = 0;
        filtercount = 0;
        slidecount = 0;
        $('.filter').hide();
        $("#buildingDetail").hide();
        $("#createSlideDiv").hide();
        $("#slidesDiv").hide();
        $('.esri-direct-line-measurement-3d__container').css({
            "display": "none"
        })
        $('.esri-area-measurement-3d__container').css({
            "display": "none"
        });
        $('.esri-line-of-sight__container').css({
            "display": "none"
        })
        document.getElementById('widgetDivCont').innerHTML = "";
        widgetDivCont.style.display = "none";
        queryDiv.style.display = "none";
        selectCount = 0;
        if (directioncount % 2 != 0) {
            filterCarousel = 1;

            $("#directionButton").css({
                "background-color": "#4B5D67"
            })
            $("#directionsvg").css({
                "fill": "#F9F9F9  !important"
            })
            var directionsWidget = new Directions({
                view: view,
                container: "viewDiv",
                // Point the URL to a valid route service that uses an
                // ArcGIS Online hosted service proxy instead of the default service
                // routeServiceUrl: "https://utility.arcgis.com/usrsvcs/appservices/srsKxBIxJZB0pTZ0/rest/services/World/Route/NAServer/Route_World"
                routeServiceUrl: "https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World"
            });
        }
        else {
            filtercount = 0;

            $("#directionButton").css({
                "background-color": ""
            })
            $("#directionsvg").css({
                "fill": ""
            })
            $('.esri-directions__panel-content').hide();
            directioncount = 0;
        }
    })
    slideBtn.addEventListener('click', function () {
        slidecount++;
        $("#filtersvg").css({
            "fill": ""
        });
        $("#filterButton").css({
            "background-color": ""
        });
        $("#areaButton").css({
            "background-color": ""
        })
        $("#areasvg").css({
            "fill": ""
        });
        $("#distanceButton").css({
            "background-color": ""
        })
        $("#distancesvg").css({
            "fill": ""
        });
        $("#basemapBtn").css({
            "background-color": ""
        })
        $("#basemapsvg").css({
            "fill": ""
        });
        $("#screenshotBtn").css({
            "background-color": ""
        })
        $("#screenshotsvg").css({
            "fill": ""
        });
        $("#directionButton").css({
            "background-color": ""
        })
        $("#directionsvg").css({
            "fill": ""
        });
        $("#llBtn").css({
            "background-color": ""
        })
        $("#linesvg").css({
            "fill": ""
        });
        $("#selectBtn").css({
            "background-color": ""
        });
        $("#selectsvg").css({
            "fill": ""
        });
        $("#dayBtn").css({
            "background-color": ""
        });
        $("#daysvg").css({
            "fill": ""
        });
        if (lineOfSight != null) {
            lineOfSight.viewModel.clear();
        }
        if (activeWidgetArea != null) {
            activeWidgetArea.viewModel.clear();
        }
        if (activeWidgetDist != null) {
            activeWidgetDist.viewModel.clear();
        }
        if (areacount >= 1) {
            areacount = 2;
        } else {
            areacount = 0;
        }
        if (distcount >= 1) {
            distcount = 2;
        } else {
            distcount = 0;
        }
        if (layerclick >= 1) {
            layerclick = 2;
        } else {
            layerclick = 0;
        }
        clickbase = 0;
        daycount = 0;
        directioncount = 0;
        filtercount = 0;
        $('.filter').hide();
        $("#buildingDetail").hide();
        $('.esri-directions__panel-content').hide();
        $('.esri-direct-line-measurement-3d__container').css({
            "display": "none"
        })
        $('.esri-area-measurement-3d__container').css({
            "display": "none"
        });
        $('.esri-line-of-sight__container').css({
            "display": "none"
        })
        document.getElementById('widgetDivCont').innerHTML = "";
        widgetDivCont.style.display = "none";
        queryDiv.style.display = "none";
        selectCount = 0;
        if (slidecount % 2 != 0) {
            filterCarousel = 1;

            $("#slideWidget").css({
                "background-color": "#4B5D67"
            })
            $("#slidersvg").css({
                "fill": "#F9F9F9  !important"
            })
            $("#createSlideDiv").show();
            $("#slidesDiv").show();
        }
        else {
            filterCarousel = 0;

            $("#slideWidget").css({
                "background-color": ""
            })
            $("#slidersvg").css({
                "fill": ""
            })
            $("#createSlideDiv").hide();
            $("#slidesDiv").hide();
            slidecount = 0;
        }
    })
    bmBtn.addEventListener('click', function () {
        $("#filtersvg").css({
            "fill": ""
        });
        $("#filterButton").css({
            "background-color": ""
        });
        $("#distanceButton").css({
            "background-color": ""
        })
        $("#distancesvg").css({
            "fill": ""
        });
        $("#areaButton").css({
            "background-color": ""
        })
        $("#areasvg").css({
            "fill": ""
        });
        $("#slideWidget").css({
            "background-color": ""
        })
        $("#slidersvg").css({
            "fill": ""
        });
        $("#screenshotBtn").css({
            "background-color": ""
        })
        $("#screenshotsvg").css({
            "fill": ""
        });
        $("#directionButton").css({
            "background-color": ""
        })
        $("#directionsvg").css({
            "fill": ""
        });
        $("#llBtn").css({
            "background-color": ""
        })
        $("#linesvg").css({
            "fill": ""
        });
        $("#selectBtn").css({
            "background-color": ""
        });
        $("#selectsvg").css({
            "fill": ""
        });
        $("#dayBtn").css({
            "background-color": ""
        });
        $("#daysvg").css({
            "fill": ""
        });
        if (lineOfSight != null) {
            lineOfSight.viewModel.clear();
        }
        if (activeWidgetArea != null) {
            activeWidgetArea.viewModel.clear();
        }
        if (activeWidgetDist != null) {
            activeWidgetDist.viewModel.clear();
        }
        if (areacount >= 1) {
            areacount = 2;
        } else {
            areacount = 0;
        }
        if (distcount >= 1) {
            distcount = 2;
        } else {
            distcount = 0;
        }
        if (layerclick >= 1) {
            layerclick = 2;
        } else {
            layerclick = 0;
        }
        $("#createSlideDiv").hide();
        $("#slidesDiv").hide();
        clickbase++;
        daycount = 0;
        slidecount = 0;
        directioncount = 0;
        filtercount = 0;
        $('.filter').hide();
        $("#buildingDetail").hide();
        $('.esri-directions__panel-content').hide();
        $('.esri-direct-line-measurement-3d__container').css({
            "display": "none"
        })
        $('.esri-area-measurement-3d__container').css({
            "display": "none"
        });
        $('.esri-line-of-sight__container').css({
            "display": "none"
        })
        queryDiv.style.display = "none";
        selectCount = 0;
        if (clickbase % 2 == 0) {
            filterCarousel = 0;

            document.getElementById('widgetDivCont').innerHTML = "";
            widgetDivCont.style.display = "none";
            $('.esri-view .esri-view-user-storage').css({
                "overflow-y": "scroll",
                "display": "none",
                "margin-top": "100px"
            })
            $("#basemapBtn").css({
                "background-color": ""
            })
            $("#basemapsvg").css({
                "fill": ""
            })
            clickbase = 0;
        } else {
            filterCarousel = 1;

            $("#basemapBtn").css({
                "background-color": "#4B5D67"
            })
            $("#basemapsvg").css({
                "fill": "#F9F9F9  !important"
            })
            $('.esri-view .esri-view-user-storage').css({
                "overflow-y": "scroll",
                "display": "block",
                "margin-top": "100px",
            })
            document.getElementById('widgetDivCont').innerHTML = "";
            widgetDivCont.style.display = "block";
            var basemapGallery = new BasemapGallery({
                view: view,
                container: widgetDivCont,
            });
        }
    })
    //Line of sight start

    layerBtn.addEventListener('click', function () {
        $("#filtersvg").css({
            "fill": ""
        });
        $("#filterButton").css({
            "background-color": ""
        });
        $("#areaButton").css({
            "background-color": ""
        })
        $("#areasvg").css({
            "fill": ""
        });
        $("#distanceButton").css({
            "background-color": ""
        })
        $("#distancesvg").css({
            "fill": ""
        });
        $("#basemapBtn").css({
            "background-color": ""
        })
        $("#basemapsvg").css({
            "fill": ""
        });
        $("#slideWidget").css({
            "background-color": ""
        })
        $("#slidersvg").css({
            "fill": ""
        });
        $("#screenshotBtn").css({
            "background-color": ""
        })
        $("#screenshotsvg").css({
            "fill": ""
        });
        $("#directionButton").css({
            "background-color": ""
        })
        $("#directionsvg").css({
            "fill": ""
        });
        $("#dayBtn").css({
            "background-color": ""
        });
        $("#daysvg").css({
            "fill": ""
        });
        $("#selectBtn").css({
            "background-color": ""
        });
        $("#selectsvg").css({
            "fill": ""
        });
        if (activeWidgetArea != null) {
            activeWidgetArea.viewModel.clear();
        }
        if (activeWidgetDist != null) {
            activeWidgetDist.viewModel.clear();
        }
        if (areacount >= 1) {
            areacount = 2;
        } else {
            areacount = 0;
        }
        if (distcount >= 1) {
            distcount = 2;
        } else {
            distcount = 0;
        }
        clickbase = 0;
        daycount = 0;
        slidecount = 0;
        directioncount = 0;
        filtercount = 0;
        $('.filter').hide();
        $("#buildingDetail").hide();
        $('.esri-directions__panel-content').hide();
        $("#createSlideDiv").hide();
        $("#slidesDiv").hide();
        $('.esri-direct-line-measurement-3d__container').css({
            "display": "none"
        })
        $('.esri-area-measurement-3d__container').css({
            "display": "none"
        });
        document.getElementById('widgetDivCont').innerHTML = "";
        widgetDivCont.style.display = "none";
        view.graphics.removeAll();
        layerclick++;
        queryDiv.style.display = "none";
        selectCount = 0;
        if (layerclick == 1) {
            $("#llBtn").css({
                "background-color": "#4B5D67"
            })
            $("#linesvg").css({
                "fill": "#F9F9F9  !important"
            })
            lineOfSight = new LineOfSight({
                view: view,
                container: "viewDiv"
            });
            document.getElementsByClassName('.esri-line-of-sight__container').innerHTML = "";
            getlineofsight();
        }
        if (layerclick % 2 == 0) {
            filterCarousel = 0;

            $("#llBtn").css({
                "background-color": ""
            })
            $("#linesvg").css({
                "fill": ""
            })
            lineOfSight.viewModel.clear();
            $('.esri-line-of-sight__container').css({
                "display": "none"
            }
            )
            $('.esri-view .esri-view-user-storage').css({
                "overflow-y": "scroll",
                "display": "none",
            })
        } else {
            filterCarousel = 1;
            $("#llBtn").css({
                "background-color": "#4B5D67"
            })
            $("#linesvg").css({
                "fill": "#F9F9F9  !important"
            })
            clickbase = 0;
            daycount = 0;
            $('.esri-line-of-sight__container').css({
                "display": "block"
            }
            )
            $('.esri-view .esri-view-user-storage').css({
                "overflow-y": "scroll",
                "display": "block",
            })
            getlineofsight();
        }
    })
    function getlineofsight() {
        /**************************************
         * Add symbols to mark the intersections
         * for the line of sight
         **************************************/
        const viewModel = lineOfSight.viewModel;
        // watch when observer location changes
        viewModel.watch("observer", function (value) {
            setIntersectionMarkers();
        });
        // watch when a new target is added or removed
        viewModel.targets.on("change", function (event) {
            event.added.forEach(function (target) {
                setIntersectionMarkers();
                // for each target watch when the intersection changes
                target.watch("intersectedLocation", setIntersectionMarkers);
            });
        });
        // an inverted cone marks the intersection that occludes the view
        const intersectionSymbol = {
            type: "point-3d",
            symbolLayers: [{
                type: "object",
                resource: {
                    primitive: "inverted-cone"
                },
                material: {
                    color: [255, 100, 100]
                },
                height: 10,
                depth: 10,
                width: 10,
                anchor: "relative",
                anchorPosition: {
                    x: 0,
                    y: 0,
                    z: -0.7
                }
            }]
        };
        function setIntersectionMarkers() {
            view.graphics.removeAll();
            viewModel.targets.forEach(function (target) {
                if (target.intersectedLocation) {
                    view.graphics.removeAll();
                    const graphic = new Graphic({
                        symbol: intersectionSymbol,
                        geometry: target.intersectedLocation
                    });
                    view.graphics.add(graphic);
                }
            });
        }
        /**************************************
         * Create an analysis by setting
         * the initial observer and four targets
         **************************************/
        viewModel.observer = new Point({
            latitude: 42.3521,
            longitude: -71.0564,
            z: 139
        });
        viewModel.targets = [
            createTarget(42.3492, -71.0529),
            createTarget(42.3477, -71.0542),
            createTarget(42.3485, -71.0533),
            createTarget(42.3467, -71.0549)
        ];
        function createTarget(lat, lon, z) {
            return {
                location: new Point({
                    latitude: lat,
                    longitude: lon,
                    z: z || 0
                })
            };
        }
        // start the tool to create the line of sight analysis
        viewModel.start();
        // resume the analysis
        watchUtils.whenEqualOnce(viewModel, "state", "creating", function (value) {
            viewModel.stop();
        });
        // add an Expand widget to make the menu responsive
        widgetDivCont.style.display = "none";
        const expand = new Expand({
            expandTooltip: "Expand line of sight widget",
            view: view,
            content: "viewDiv",
            expanded: true
        });
        // view.when(function() {
        //     // allow user to turn the layer with new planned buildings on/off
        //     // and see how the line of sight analysis changes
        //     const plannedBuildingsLayer = view.map.layers.filter(function(layer) {
        //         return layer.title === "Boston major projects - MajorProjectsBuildings";
        //     }).getItemAt(0);
        //     document.getElementById("layerVisibility").addEventListener("change", function(event) {
        //         plannedBuildingsLayer.visible = event.target.checked;
        //     });
        // });
        view.graphics.removeAll();
    }
    //Line of sight end
    //selection tool start
    selectTool.addEventListener('click', function () {
        selectCount++;
        $("#filtersvg").css({
            "fill": ""
        });

        $("#filterButton").css({
            "background-color": ""
        });
        $("#distanceButton").css({
            "background-color": ""
        })

        $("#distancesvg").css({
            "fill": ""
        });
        $("#basemapBtn").css({
            "background-color": ""
        })

        $("#basemapsvg").css({
            "fill": ""
        });
        $("#areaButton").css({
            "background-color": ""
        })

        $("#areasvg").css({
            "fill": ""
        });
        $("#slideWidget").css({
            "background-color": ""
        })

        $("#slidersvg").css({
            "fill": ""
        });
        $("#screenshotBtn").css({
            "background-color": ""
        })

        $("#screenshotsvg").css({
            "fill": ""
        });
        $("#directionButton").css({
            "background-color": ""
        })

        $("#directionsvg").css({
            "fill": ""
        });
        $("#llBtn").css({
            "background-color": ""
        })

        $("#linesvg").css({
            "fill": ""
        });

        $("#dayBtn").css({
            "background-color": ""
        });

        $("#daysvg").css({
            "fill": ""
        });
        if (lineOfSight != null) {
            lineOfSight.viewModel.clear();
        }
        if (activeWidgetArea != null) {
            activeWidgetArea.viewModel.clear();
        }
        if (activeWidgetDist != null) {
            activeWidgetDist.viewModel.clear();
        }
        if (areacount >= 1) {
            areacount = 2;
        } else {
            areacount = 0;
        }
        if (distcount >= 1) {
            distcount = 2;
        } else {
            distcount = 0;
        }
        if (layerclick >= 1) {
            layerclick = 2;
        } else {
            layerclick = 0;
        }
        $("#createSlideDiv").hide();
        $("#slidesDiv").hide();
        clickbase = 0;
        daycount = 0;
        slidecount = 0;
        directioncount = 0;
        filtercount = 0;
        $('.filter').hide();
        $("#buildingDetail").hide();
        $('.esri-directions__panel-content').hide();
        $('.esri-direct-line-measurement-3d__container').css({

            "display": "none"
        })
        $('.esri-area-measurement-3d__container').css({

            "display": "none"
        });
        $('.esri-line-of-sight__container').css({
            "display": "none"
        })
        document.getElementById('widgetDivCont').innerHTML = "";
        widgetDivCont.style.display = "none";
        if (selectCount == 1) {
            $("#selectBtn").css({
                "background-color": "#4B5D67"
            })

            $("#selectsvg").css({
                "fill": "#F9F9F9  !important"
            })
            queryDiv.style.display = "block";
            view.ui.add([queryDiv], "bottom-right");
        }
        else {
            selectCount = 0;
            $("#selectBtn").css({
                "background-color": ""
            })

            $("#selectsvg").css({
                "fill": ""
            })
            queryDiv.style.display = "none";

        }

    })

    //selection tool end

    //day light widget start

    daylightBtn.addEventListener('click', function () {
        $("#filtersvg").css({
            "fill": ""
        });
        $("#filterButton").css({
            "background-color": ""
        });
        $("#areaButton").css({
            "background-color": ""
        });
        $("#areasvg").css({
            "fill": ""
        });
        $("#distanceButton").css({
            "background-color": ""
        })
        $("#distancesvg").css({
            "fill": ""
        });
        $("#basemapBtn").css({
            "background-color": ""
        })
        $("#basemapsvg").css({
            "fill": ""
        });
        $("#slideWidget").css({
            "background-color": ""
        })
        $("#slidersvg").css({
            "fill": ""
        });
        $("#screenshotBtn").css({
            "background-color": ""
        })
        $("#screenshotsvg").css({
            "fill": ""
        });
        $("#directionButton").css({
            "background-color": ""
        })
        $("#directionsvg").css({
            "fill": ""
        });
        $("#llBtn").css({
            "background-color": ""
        })
        $("#linesvg").css({
            "fill": ""
        });
        $("#selectBtn").css({
            "background-color": ""
        });
        $("#selectsvg").css({
            "fill": ""
        })
        if (lineOfSight != null) {
            lineOfSight.viewModel.clear();
        }
        if (activeWidgetArea != null) {
            activeWidgetArea.viewModel.clear();
        }
        if (activeWidgetDist != null) {
            activeWidgetDist.viewModel.clear();
        }
        if (areacount >= 1) {
            areacount = 2;
        } else {
            areacount = 0;
        }
        if (distcount >= 1) {
            distcount = 2;
        } else {
            distcount = 0;
        }
        if (layerclick >= 1) {
            layerclick = 2;
        } else {
            layerclick = 0;
        }
        clickbase = 0;
        slidecount = 0;
        directioncount = 0;
        filtercount = 0;
        queryDiv.style.display = "none";
        selectCount = 0;
        $("#buildingDetail").hide();
        $('.filter').hide();
        $('.esri-directions__panel-content').hide();
        $("#createSlideDiv").hide();
        $("#slidesDiv").hide();
        daycount++;
        $('.esri-direct-line-measurement-3d__container').css({
            "display": "none"
        })
        $('.esri-area-measurement-3d__container').css({
            "display": "none"
        });
        $('.esri-line-of-sight__container').css({
            "display": "none"
        }
        )
        if (daycount % 2 == 0) {
            filterCarousel = 0;

            $("#dayBtn").css({
                "background-color": ""
            });
            $("#daysvg").css({
                "fill": ""
            });
            document.getElementById('widgetDivCont').innerHTML = "";
            widgetDivCont.style.display = "none";
            $('.esri-view .esri-view-user-storage').css({
                "overflow-y": "scroll",
                "display": "none",
            })
            daycount = 0;
        } else {
            filterCarousel = 1;

            $("#dayBtn").css({
                "background-color": "#4B5D67"
            });
            $("#daysvg").css({
                "fill": "#F9F9F9  !important"
            });
            clickbase = 0;
            $('.esri-view .esri-view-user-storage').css({
                "overflow-y": "scroll",
                "display": "block",
            })
            widgetDivCont.style.display = "block";
            document.getElementById('widgetDivCont').innerHTML = "";
            const daylightWidget = new Daylight({
                view: view,
                container: "widgetDivCont",
                // plays the animation twice as fast than the default one
                playSpeedMultiplier: 2,
                // disable the timezone selection button
                visibleElements: {
                    timezone: false
                }
            });
            const btnDaylight = document.getElementById("buttonDaylight");
            // hide and show widget for display on small devices


        }
    })
    //day light widget end

    //measurement widget distance btn  
    // view.ui.add("distanceButton", "top-right");
    // view.ui.add("areaButton", "top-right");
    // $("#distanceButton").removeClass("d-none");
    document
        .getElementById("distanceButton")
        .addEventListener("click", function () {
            $("#areaButton").css({
                "background-color": ""
            })
            $("#areasvg").css({
                "fill": ""
            })
            $("#filtersvg").css({
                "fill": ""
            });
            $("#filterButton").css({
                "background-color": ""
            });
            $("#basemapBtn").css({
                "background-color": ""
            })
            $("#basemapsvg").css({
                "fill": ""
            });
            $("#slideWidget").css({
                "background-color": ""
            })
            $("#slidersvg").css({
                "fill": ""
            });
            $("#screenshotBtn").css({
                "background-color": ""
            })
            $("#screenshotsvg").css({
                "fill": ""
            });
            $("#directionButton").css({
                "background-color": ""
            })
            $("#directionsvg").css({
                "fill": ""
            });
            $("#llBtn").css({
                "background-color": ""
            })
            $("#linesvg").css({
                "fill": ""
            });
            $("#selectBtn").css({
                "background-color": ""
            });
            $("#selectsvg").css({
                "fill": ""
            });
            $("#dayBtn").css({
                "background-color": ""
            });
            $("#daysvg").css({
                "fill": ""
            });
            if (lineOfSight != null) {
                lineOfSight.viewModel.clear();
            }
            if (activeWidgetArea != null) {
                activeWidgetArea.viewModel.clear();
            }
            if (activeWidgetDist != null) {
                activeWidgetDist.viewModel.clear();
            }
            if (areacount >= 1) {
                areacount = 2;
            } else {
                areacount = 0;
            }
            if (layerclick >= 1) {
                layerclick = 2;
            } else {
                layerclick = 0;
            }
            clickbase = 0;
            daycount = 0;
            slidecount = 0;
            directioncount = 0;
            filtercount = 0;
            $('.filter').hide();
            $('.esri-directions__panel-content').hide();
            $("#createSlideDiv").hide();
            $("#slidesDiv").hide();
            distcount++;
            $('.esri-line-of-sight__container').css({
                "display": "none"
            })
            document.getElementById('widgetDivCont').innerHTML = "";
            widgetDivCont.style.display = "none";
            queryDiv.style.display = "none";
            selectCount = 0;
            $("#buildingDetail").hide();
            if (distcount == 1) {
                $("#distanceButton").css({
                    "background-color": "#4B5D67"
                });
                $("#distancesvg").css({
                    "fill": "#F9F9F9  !important"
                });
                $('.esri-area-measurement-3d__container').css({
                    "display": "none"
                })
                activeWidgetDist = new DirectLineMeasurement3D({
                    view: view,
                    container: "viewDiv"
                });
                //activeWidget.viewModel.DirectLineMeasurement3D();
            }
            if (distcount % 2 == 0) {
                filterCarousel = 0;

                $("#distanceButton").css({
                    "background-color": ""
                })
                $("#distancesvg").css({
                    "fill": ""
                })
                $('.esri-direct-line-measurement-3d__container').css({
                    "display": "none"
                })
                $('.esri-area-measurement-3d__container').css({
                    "display": "none"
                });
                activeWidgetDist.viewModel.clear();
            } else {
                filterCarousel = 1;

                $("#distanceButton").css({
                    "background-color": "#4B5D67"
                })
                $("#distancesvg").css({
                    "fill": "#F9F9F9  !important"
                })
                $('.esri-direct-line-measurement-3d__container').css({
                    "display": "block"
                })
                $('.esri-area-measurement-3d__container').css({
                    "display": "none"
                })
                activeWidgetDist.viewModel.clear();
            }
        });
    document
        .getElementById("areaButton")
        .addEventListener("click", function () {
            $("#filtersvg").css({
                "fill": ""
            });
            $("#filterButton").css({
                "background-color": ""
            })
            $("#distanceButton").css({
                "background-color": ""
            })
            $("#distancesvg").css({
                "fill": ""
            });
            $("#basemapBtn").css({
                "background-color": ""
            })
            $("#basemapsvg").css({
                "fill": ""
            });
            $("#slideWidget").css({
                "background-color": ""
            })
            $("#slidersvg").css({
                "fill": ""
            });
            $("#screenshotBtn").css({
                "background-color": ""
            })
            $("#screenshotsvg").css({
                "fill": ""
            });
            $("#directionButton").css({
                "background-color": ""
            })
            $("#directionsvg").css({
                "fill": ""
            });
            $("#llBtn").css({
                "background-color": ""
            })
            $("#linesvg").css({
                "fill": ""
            });
            $("#selectBtn").css({
                "background-color": ""
            });
            $("#selectsvg").css({
                "fill": ""
            })
            $("#dayBtn").css({
                "background-color": ""
            });
            $("#daysvg").css({
                "fill": ""
            });
            if (lineOfSight != null) {
                lineOfSight.viewModel.clear();
            }
            if (activeWidgetArea != null) {
                activeWidgetArea.viewModel.clear();
            }
            if (activeWidgetDist != null) {
                activeWidgetDist.viewModel.clear();
            }
            if (distcount >= 1) {
                distcount = 2;
            } else {
                distcount = 0;
            }
            if (layerclick >= 1) {
                layerclick = 2;
            } else {
                layerclick = 0;
            }
            clickbase = 0;
            daycount = 0;
            slidecount = 0;
            directioncount = 0;
            filtercount = 0;
            $('.filter').hide();
            $('.esri-directions__panel-content').hide();
            $("#createSlideDiv").hide();
            $("#slidesDiv").hide();
            document.getElementById('widgetDivCont').innerHTML = "";
            widgetDivCont.style.display = "none";
            $('.esri-line-of-sight__container').css({
                "display": "none"
            })
            queryDiv.style.display = "none";
            selectCount = 0;
            $("#buildingDetail").hide();
            areacount++;
            if (areacount == 1) {
                $("#areaButton").css({
                    "background-color": "#4B5D67"
                })
                $("#areasvg").css({
                    "fill": "#F9F9F9  !important"
                })
                $('.esri-direct-line-measurement-3d__container').css({
                    "display": "none"
                })
                activeWidgetArea = new AreaMeasurement3D({
                    view: view,
                    container: "viewDiv"
                });
                // activeWidget.viewModel.AreaMeasurement3D();
            }
            if (areacount % 2 == 0) {
                filterCarousel = 0;

                $("#areaButton").css({
                    "background-color": ""
                })
                $("#areasvg").css({
                    "fill": ""
                })
                activeWidgetArea.viewModel.clear();
                $('.esri-area-measurement-3d__container').css({
                    "display": "none"
                })
                $('.esri-direct-line-measurement-3d__container').css({
                    "display": "none"
                });
            } else {
                filterCarousel = 1;

                $("#areaButton").css({
                    "background-color": "#4B5D67"
                })
                $("#areasvg").css({
                    "fill": "#F9F9F9  !important"
                })
                $('.esri-direct-line-measurement-3d__container').css({
                    "display": "none"
                })
                $('.esri-area-measurement-3d__container').css({
                    "display": "block"
                })
                activeWidgetArea.viewModel.clear();
            }
        });


    view.on("click", function (evt) {
        $("#areaButton").css({
            "background-color": ""
        })
        $("#areasvg").css({
            "fill": ""
        })
        $("#filtersvg").css({
            "fill": ""
        });
        $("#filterButton").css({
            "background-color": ""
        })
        $("#distanceButton").css({
            "background-color": ""
        })
        $("#distancesvg").css({
            "fill": ""
        });
        $("#basemapBtn").css({
            "background-color": ""
        })
        $("#basemapsvg").css({
            "fill": ""
        });
        $("#slideWidget").css({
            "background-color": ""
        })
        $("#slidersvg").css({
            "fill": ""
        });
        $("#screenshotBtn").css({
            "background-color": ""
        })
        $("#screenshotsvg").css({
            "fill": ""
        });
        $("#directionButton").css({
            "background-color": ""
        })
        $("#directionsvg").css({
            "fill": ""
        });
        $("#llBtn").css({
            "background-color": ""
        })
        $("#linesvg").css({
            "fill": ""
        });
        $("#selectBtn").css({
            "background-color": ""
        });
        $("#selectsvg").css({
            "fill": ""
        })
        $("#dayBtn").css({
            "background-color": ""
        });
        $("#daysvg").css({
            "fill": ""
        });
        if (lineOfSight != null) {
            lineOfSight.viewModel.clear();
        }
        if (activeWidgetArea != null) {
            activeWidgetArea.viewModel.clear();
        }
        if (activeWidgetDist != null) {
            activeWidgetDist.viewModel.clear();
        }
        if (distcount >= 1) {
            distcount = 2;
        } else {
            distcount = 0;
        }
        if (areacount >= 1) {
            areacount = 2;
        } else {
            areacount = 0;
        }
        if (layerclick >= 1) {
            layerclick = 2;
        } else {
            layerclick = 0;
        }
        clickbase = 0;
        daycount = 0;
        slidecount = 0;
        directioncount = 0;
        filtercount = 0;
        $('.filter').hide();
        $('.esri-directions__panel-content').hide();
        $("#createSlideDiv").hide();
        $("#slidesDiv").hide();
        document.getElementById('widgetDivCont').innerHTML = "";
        widgetDivCont.style.display = "none";
        $('.esri-line-of-sight__container').css({
            "display": "none"
        })
        queryDiv.style.display = "none";
        selectCount = 0;
        $('.esri-direct-line-measurement-3d__container').css({
            "display": "none"
        })
        $('.esri-area-measurement-3d__container').css({
            "display": "none"
        });

        view.popup = null;

        // Search for symbols on click's position
        view.hitTest(evt.screenPoint)
            .then(function (response) {
                // Retrieve the first symbol
                var graphic = response.results[0].graphic;
                var specLayer = response.results[0].graphic.layer.id;
                var objID = graphic.attributes.OBJECTID;
                var test = graphic.attributes;
                var buildingNameData = graphic.attributes.unit_name;



                $("#buildingDetail").show();

                $("#UnitOwner").val(graphic.attributes.owner_name).focus().prop("readonly", true);
                $("#UnitDeveloper").val(graphic.attributes.developer_name).focus().prop("readonly", true);
                $("#UnitYearconstruct").val(graphic.attributes.date_constructed).focus().prop("readonly", true);
                $("#UnitAreaname").val(graphic.attributes.area_name).focus().prop("readonly", true);
                $("#UnitAreasq").val(graphic.attributes.area1).focus().prop("readonly", true);
                $("#UnitDescription").val(graphic.attributes.Description).focus().prop("readonly", true);
                $("#addressUnitDetails").val(graphic.attributes.address).focus().prop("readonly", true);
                $("#ObjectID").val(graphic.attributes.OBJECTID).focus().prop("readonly", true);

                document.getElementById('buildingName').innerHTML = buildingNameData;
                if ($("#UnitOwner").val() == '') {
                    $("#UnitOwner").val("-")
                }
                if ($("#UnitDeveloper").val() == '') {
                    $("#UnitDeveloper").val("-")
                }
                if ($("#UnitYearconstruct").val() == '') {
                    $("#UnitYearconstruct").val("-")
                }
                if ($("#UnitAreaname").val() == '') {
                    $("#UnitAreaname").val("-")
                }
                if ($("#UnitAreasq").val() == '') {
                    $("#UnitAreasq").val("-")
                }
                if ($("#UnitDescription").val() == '') {
                    $("#UnitDescription").val("-")
                }
                if ($("#addressUnitDetails").val() == '') {
                    $("#addressUnitDetails").val("-")
                }


            });
    });
    // var activeWidget = null;
    // var distcount = 0;
    // var areacount = 0;
    // distanceBtn.addEventListener('click', function () {
    //     distcount++;
    //     if (distcount == 1)
    //     {
    //         getdistance();
    //     }
    //     if (distcount % 2 == 0) {
    //         widgetDivCont.style.display = "none";
    //         document.getElementById('widgetDivCont').innerHTML = "";
    //         setActiveButton(null);
    //     } else {
    //         getdistance();            
    //     }
    // });
    // areaBtn.addEventListener('click', function () {
    //     areacount++;
    //     if (areacount % 2 == 0) {
    //         widgetDivCont.style.display = "none";
    //         document.getElementById('widgetDivCont').innerHTML = "";
    //         setActiveButton(null);
    //     } else {
    //         document.getElementById('widgetDivCont').innerHTML = "";
    //         widgetDivCont.style.display = "block";
    //         if (!this.classList.contains("active")) {
    //             setActiveWidget("area");
    //         }
    //     }
    // });
    // function getdistance() {
    //             activeWidget = new DirectLineMeasurement3D({
    //                 view: view,
    //                 container: "viewDiv",
    //             });
    //             // skip the initial 'new measurement' button
    //             activeWidget.viewModel.newMeasurement();
    //             setActiveButton(document.getElementById("distanceBtn"));
    //           // case null:
    //               if (activeWidget) {
    //                   view.ui.remove(activeWidget);
    //                   activeWidget.destroy();
    //                   activeWidget = null;
    //               }
    //             // setActiveButton(document.getElementById("distanceButton"));
    //         }
    //         function getarea() {
    //             activeWidget = new AreaMeasurement3D({
    //                 view: view,
    //                 container: widgetDivCont,
    //             });
    //             // skip the initial 'new measurement' button
    //             activeWidget.viewModel.newMeasurement();
    //             setActiveButton(document.getElementById("areaButton"));
    //         // case null:
    //             if (activeWidget) {
    //                 view.ui.remove(activeWidget);
    //                 activeWidget.destroy();
    //                 activeWidget = null;
    //             }
    //         //     break;
    // }
    // function setActiveButton(selectedButton) {
    //     // focus the view to activate keyboard shortcuts for sketching
    //     view.focus();
    //     var elements = document.getElementsByClassName("active");
    //     for (var i = 0; i < elements.length; i++) {
    //         elements[i].classList.remove("active");
    //     }
    //     if (selectedButton) {
    //         selectedButton.classList.add("active");
    //     }
    // }
    // ################################ Measurement widget code ends #######################
    // var directionsWidget = new Directions({
    //     view: view,
    //     container: bgExpand3,
    //     // Point the URL to a valid route service that uses an
    //     // ArcGIS Online hosted service proxy instead of the default service
    //     // routeServiceUrl: "https://utility.arcgis.com/usrsvcs/appservices/srsKxBIxJZB0pTZ0/rest/services/World/Route/NAServer/Route_World"
    //     routeServiceUrl: "https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World"
    // });
    // var bgExpand3 = new Expand({
    //     view: view,
    //     content: directionsWidget
    // });
    // // Add the Directions widget to the top right corner of the view
    // view.ui.add(bgExpand3, "bottom-right");
    // view.when(function() {
    //     // allow user to turn the layer with new planned buildings on/off
    //     // and see how the line of sight analysis changes
    //     const plannedBuildingsLayer = view.map.layers
    //         .filter(function(layer) {
    //             return (
    //                 layer.title === "Doha"
    //             );
    //         })
    //         .getItemAt(0);
    //     // document
    //     //     .getElementById("layerVisibility")
    //     //     .addEventListener("change", function(event) {
    //     //         plannedBuildingsLayer.visible = event.target.checked;
    //     //     });
    // });
    // ///************* screenshot widget****************************** ////////////////
    // // the button that triggers area selection mode
    // const screenshotBtn = document.getElementById("screenshotBtn11");
    // // the orange mask used to select the area
    // const maskDiv = document.getElementById("maskDiv");
    // // element where we display the print preview
    // const screenshotDiv = document.getElementById("screenshotDiv");
    // // replace the navigation elements with screenshot area selection button
    // view.ui.empty("top-left");   
    // view.ui.add(screenshotBtn, "bottom-left");
    // // add an event listener to trigger the area selection mode
    // screenshotBtn.addEventListener("click", function() {
    //     screenshotBtn.classList.add("active");
    //     view.container.classList.add("screenshotCursor");
    //     let area = null;
    //     // listen for drag events and compute the selected area
    //     const dragHandler = view.on("drag", function(event) {
    //         // prevent navigation in the view
    //         event.stopPropagation();
    //         // when the user starts dragging or is dragging
    //         if (event.action !== "end") {
    //             // calculate the extent of the area selected by dragging the cursor
    //             const xmin = clamp(Math.min(event.origin.x, event.x), 0, view.width);
    //             const xmax = clamp(Math.max(event.origin.x, event.x), 0, view.width);
    //             const ymin = clamp(Math.min(event.origin.y, event.y), 0, view.height);
    //             const ymax = clamp(Math.max(event.origin.y, event.y), 0, view.height);
    //             area = {
    //                 x: xmin,
    //                 y: ymin,
    //                 width: xmax - xmin,
    //                 height: ymax - ymin
    //             };
    //             // set the position of the div element that marks the selected area
    //             setMaskPosition(area);
    //         }
    //         // when the user stops dragging
    //         else {
    //             // remove the drag event listener from the SceneView
    //             dragHandler.remove();
    //             // the screenshot of the selected area is taken
    //             view.takeScreenshot({
    //                 area: area,
    //                 format: "png"
    //             }).then(function(screenshot) {
    //                 // display a preview of the image
    //                 showPreview(screenshot);
    //                 // create the image for download
    //                 document.getElementById("downloadBtn").onclick = function() {
    //                     const text = document.getElementById("textInput").value;
    //                     // if a text exists, then add it to the image
    //                     if (text) {
    //                         const dataUrl = getImageWithText(screenshot, text);
    //                         downloadImage(webscene.portalItem.title + ".png", dataUrl);
    //                     }
    //                     // otherwise download only the webscene screenshot
    //                     else {
    //                           downloadImage(webscene.portalItem.title + ".png", screenshot.dataUrl);
    //                     }
    //                 };
    //                 // the screenshot mode is disabled
    //                 screenshotBtn.classList.remove("active");
    //                 view.container.classList.remove("screenshotCursor");
    //                 setMaskPosition(null);
    //             });
    //         }
    //     });
    //     function setMaskPosition(area) {
    //         if (area) {
    //             maskDiv.classList.remove("hide");
    //             maskDiv.style.left = area.x + "px";
    //             maskDiv.style.top = area.y + "px";
    //             maskDiv.style.width = area.width + "px";
    //             maskDiv.style.height = area.height + "px";
    //         } else {
    //             maskDiv.classList.add("hide");
    //         }
    //     }
    //     function clamp(value, from, to) {
    //         return value < from ? from : value > to ? to : value;
    //     }
    // });
    // // creates an image that will be appended to the DOM
    // // so that users can have a preview of what they will download
    // function showPreview(screenshot) {
    //     screenshotDiv.classList.remove("hide");
    //     // add the screenshot dataUrl as the src of an image element
    //     const screenshotImage = document.getElementsByClassName("js-screenshot-image")[0];
    //     screenshotImage.width = screenshot.data.width;
    //     screenshotImage.height = screenshot.data.height;
    //     screenshotImage.src = screenshot.dataUrl;
    // }
    // // returns a new image created by adding a custom text to the webscene image
    // function getImageWithText(screenshot, text) {
    //     const imageData = screenshot.data;
    //     // to add the text to the screenshot we create a new canvas element
    //     const canvas = document.createElement("canvas");
    //     const context = canvas.getContext("2d");
    //     canvas.height = imageData.height;
    //     canvas.width = imageData.width;
    //     // add the screenshot data to the canvas
    //     context.putImageData(imageData, 0, 0);
    //     context.font = "20px Arial";
    //     context.fillStyle = "#000";
    //     context.fillRect(0, imageData.height - 40, context.measureText(text).width + 20, 30);
    //     // add the text from the textInput element
    //     context.fillStyle = "#fff";
    //     context.fillText(text, 10, imageData.height - 20);
    //     return canvas.toDataURL();
    // }
    // function downloadImage(filename, dataUrl) {
    //     // the download is handled differently in Microsoft browsers
    //     // because the download attribute for <a> elements is not supported
    //     if (!window.navigator.msSaveOrOpenBlob) {
    //         // in browsers that support the download attribute
    //         // a link is created and a programmatic click will trigger the download
    //         const element = document.createElement("a");
    //         element.setAttribute("href", dataUrl);
    //         element.setAttribute("download", filename);
    //         element.style.display = "none";
    //         document.body.appendChild(element);
    //         element.click();
    //         document.body.removeChild(element);
    //     } else {
    //         // for MS browsers convert dataUrl to Blob
    //         const byteString = atob(dataUrl.split(",")[1]);
    //         const mimeString = dataUrl
    //             .split(",")[0]
    //             .split(":")[1]
    //             .split(";")[0];
    //         const ab = new ArrayBuffer(byteString.length);
    //         const ia = new Uint8Array(ab);
    //         for (let i = 0; i < byteString.length; i++) {
    //             ia[i] = byteString.charCodeAt(i);
    //         }
    //         const blob = new Blob([ab], {
    //             type: mimeString
    //         });
    //         // download file
    //         window.navigator.msSaveOrOpenBlob(blob, filename);
    //     }
    // }
    // // button to hide the print preview html element
    // document.getElementById("closeBtn").addEventListener("click", function() {
    //     screenshotDiv.classList.add("hide");
    // });
    // //////********************************** search widget*********************//////////////////////
    // ///************ LOS widget start***********************
    // const lineOfSight = new LineOfSight({
    //     view: view,
    //     container: "losWidget"
    // });
    // /**************************************
    //  * Add symbols to mark the intersections
    //  * for the line of sight
    //  **************************************/
    // const viewModel = lineOfSight.viewModel;
    // // watch when observer location changes
    // viewModel.watch("observer", function(value) {
    //     setIntersectionMarkers();
    // });
    // // watch when a new target is added or removed
    // viewModel.targets.on("change", function(event) {
    //     event.added.forEach(function(target) {
    //         setIntersectionMarkers();
    //         // for each target watch when the intersection changes
    //         target.watch("intersectedLocation", setIntersectionMarkers);
    //     });
    // });
    // // an inverted cone marks the intersection that occludes the view
    // const intersectionSymbol = {
    //     type: "point-3d",
    //     symbolLayers: [{
    //         type: "object",
    //         resource: {
    //             primitive: "inverted-cone"
    //         },
    //         material: {
    //             color: [255, 100, 100]
    //         },
    //         height: 10,
    //         depth: 10,
    //         width: 10,
    //         anchor: "relative",
    //         anchorPosition: {
    //             x: 0,
    //             y: 0,
    //             z: -0.7
    //         }
    //     }]
    // };
    // function setIntersectionMarkers() {
    //     view.graphics.removeAll();
    //     viewModel.targets.forEach(function(target) {
    //         if (target.intersectedLocation) {
    //             const graphic = new Graphic({
    //                 symbol: intersectionSymbol,
    //                 geometry: target.intersectedLocation
    //             });
    //             view.graphics.add(graphic);
    //         }
    //     });
    // }
    // /**************************************
    //  * Create an analysis by setting
    //  * the initial observer and four targets
    //  **************************************/
    // viewModel.observer = new Point({
    //     latitude: 42.3521,
    //     longitude: -71.0564,
    //     z: 139
    // });
    // viewModel.targets = [
    //     createTarget(42.3492, -71.0529),
    //     createTarget(42.3477, -71.0542),
    //     createTarget(42.3485, -71.0533),
    //     createTarget(42.3467, -71.0549)
    // ];
    // function createTarget(lat, lon, z) {
    //     return {
    //         location: new Point({
    //             latitude: lat,
    //             longitude: lon,
    //             z: z || 0
    //         })
    //     };
    // }
    // // start the tool to create the line of sight analysis
    // viewModel.start();
    // // resume the analysis
    // watchUtils.whenEqualOnce(
    //     viewModel,
    //     "state",
    //     "creating",
    //     function(value) {
    //         viewModel.stop();
    //     }
    // );
    // // add an Expand widget to make the menu responsive
    // const bgExpand4 = new Expand({
    //     expandTooltip: "Expand line of sight widget",
    //     view: view,
    //     content: document.getElementById("menu"),
    //     expanded: false
    // });
    // view.ui.add(bgExpand4, "bottom-right");
    // //*****************************************los widget ends***************************
    // const daylightWidget = new Daylight({
    //     view: view,
    //     // plays the animation twice as fast than the default one
    //     playSpeedMultiplier: 2,
    //     // disable the timezone selection button
    //     visibleElements: {
    //         timezone: false
    //     }
    // });
    // const btnDaylight = document.getElementById("buttonDaylight");
    // view.ui.add(btnDaylight, "top-right");
    // //  view.ui.add(daylightWidget, "top-right");
    // // hide and show widget for display on small devices
    // let widgetIsVisible = true;
    // btnDaylight.addEventListener("click", function() {
    //     if (widgetIsVisible) {
    //         view.ui.remove(daylightWidget);
    //         widgetIsVisible = false;
    //     } else {
    //         view.ui.add(daylightWidget, "top-right");
    //         widgetIsVisible = true;
    //     }
    // });
    // ################################ Measurement widget code start ######################
    // add the toolbar for the measurement widgets

    // var activeWidget = null;
    // view.ui.add("distanceButton", "top-right");
    // view.ui.add("areaButton", "top-right");
    // $("#distanceButton").removeClass("d-none");
    // document
    //     .getElementById("distanceButton")
    //     .addEventListener("click", function() {
    //         setActiveWidget(null);
    //         if (!this.classList.contains("active")) {
    //             setActiveWidget("distance");
    //         } else {
    //             setActiveButton(null);
    //         }
    //     });
    // document
    //     .getElementById("areaButton")
    //     .addEventListener("click", function() {
    //         setActiveWidget(null);
    //         if (!this.classList.contains("active")) {
    //             setActiveWidget("area");
    //         } else {
    //             setActiveButton(null);
    //         }
    //     });
    // function setActiveWidget(type) {
    //     switch (type) {
    //         case "distance":
    //             activeWidget = new DirectLineMeasurement3D({
    //                 view: view
    //             });
    //             // skip the initial 'new measurement' button
    //             activeWidget.viewModel.newMeasurement();
    //             view.ui.add(activeWidget, "top-right");
    //             setActiveButton(document.getElementById("distanceButton"));
    //             break;
    //         case "area":
    //             activeWidget = new AreaMeasurement3D({
    //                 view: view
    //             });
    //             // skip the initial 'new measurement' button
    //             activeWidget.viewModel.newMeasurement();
    //             view.ui.add(activeWidget, "top-right");
    //             setActiveButton(document.getElementById("areaButton"));
    //             break;
    //         case null:
    //             if (activeWidget) {
    //                 view.ui.remove(activeWidget);
    //                 activeWidget.destroy();
    //                 activeWidget = null;
    //             }
    //             break;
    //     }
    // }
    // function setActiveButton(selectedButton) {
    //     // focus the view to activate keyboard shortcuts for sketching
    //     view.focus();
    //     var elements = document.getElementsByClassName("active");
    //     for (var i = 0; i < elements.length; i++) {
    //         elements[i].classList.remove("active");
    //     }
    //     if (selectedButton) {
    //         selectedButton.classList.add("active");
    //     }
    // }
    // ################################ Measurement widget code ends #######################
    //-------------- Base map code start --------------------------------
});
function openTable() {
    countDataTable++;
    flagDataTable = 1;
    if (flagCharts == 1) {

        $('#closeback').css({
            'display': 'none'
        });
        $('#charts_image').css({
            'visibility': 'visible'
        });
        $('.charts').css({
            'display': 'none'
        });
    }
    if (countDataTable % 2 != 0) {
        $("#dataTableContent").show();
        $('.legend').hide();
    }
    else {
        $("#dataTableContent").hide();
    }

}
function closeBuild() {
    $("#buildingDetail").hide();
}
function openSearch() {
    $("#searchWidget").show();
}
function closeSearch() {
    $("#searchWidget").hide();
}

var heigtha = "";
var widtha = "";
if (window.matchMedia("(max-width: 2800px) and (min-width: 1341px)").matches) {
    heigtha = "300px";
    widtha = "300px";
}
else {
    if (window.matchMedia("(max-width: 1340px)").matches) {
        heigtha = "250px";
        widtha = "250px";
    }
    else {
        heigtha = "500px";
        widtha = "500px";
    }
}
$("#distanceButton").hover(function () {
    $("#distancesvg").css({
        "fill": "#F9F9F9 "
    })
});
$("#distanceButton").mouseleave(function () {
    if (distcount == 0 || distcount % 2 == 0) {
        $("#distancesvg").css({
            "fill": "#4B5D67"
        })
    }
});
$("#areaButton").hover(function () {
    $("#areasvg").css({
        "fill": "#F9F9F9 "
    })
});
$("#areaButton").mouseleave(function () {
    if (areacount == 0 || areacount % 2 == 0)
        $("#areasvg").css({
            "fill": "#4B5D67"
        })
});
$("#basemapBtn").hover(function () {
    $("#basemapsvg").css({
        "fill": "#F9F9F9 "
    })
});
$("#basemapBtn").mouseleave(function () {
    if (clickbase == 0) {
        $("#basemapsvg").css({
            "fill": "#4B5D67"
        })
    }
});
$("#slideWidget").hover(function () {
    $("#slidersvg").css({
        "fill": "#F9F9F9 "
    })
});
$("#slideWidget").mouseleave(function () {
    if (slidecount == 0) {
        $("#slidersvg").css({
            "fill": "#4B5D67"
        })
    }
});
$("#screenshotBtn").hover(function () {
    $("#screenshotsvg").css({
        "fill": "#F9F9F9 "
    })
});
$("#screenshotBtn").mouseleave(function () {
    if (screenshotcount == 0) {
        $("#screenshotsvg").css({
            "fill": "#4B5D67"
        })
    }
});
$("#directionButton").hover(function () {
    $("#directionsvg").css({
        "fill": "#F9F9F9 "
    })
});
$("#directionButton").mouseleave(function () {
    if (directioncount == 0) {
        $("#directionsvg").css({
            "fill": "#4B5D67"
        })
    }
});
$("#dayBtn").hover(function () {
    $("#daysvg").css({
        "fill": "#F9F9F9 "
    })
});
$("#dayBtn").mouseleave(function () {
    if (daycount == 0) {
        $("#daysvg").css({
            "fill": "#4B5D67"
        })
    }
});
$("#llBtn").hover(function () {
    $("#linesvg").css({
        "fill": "#F9F9F9 "
    })
});
$("#llBtn").mouseleave(function () {
    if (layerclick == 0 || layerclick % 2 == 0) {
        $("#linesvg").css({
            "fill": "#4B5D67"
        })
    }
});
$("#selectBtn").hover(function () {
    $("#selectsvg").css({
        "fill": "#F9F9F9 "
    })
});
$("#selectBtn").mouseleave(function () {
    if (selectCount == 0 || selectCount % 2 == 0) {
        $("#selectsvg").css({
            "fill": "#4B5D67"
        })
    }

});

$("#filterButton").hover(function () {
    $("#filtersvg").css({
        "fill": "#F9F9F9 "
    })
});
$("#filterButton").mouseleave(function () {
    if (filtercount == 0) {
        $("#filtersvg").css({
            "fill": "#4B5D67"
        })
    }
    else {
        $("#filtersvg").css({
            "fill": "#F9F9F9 "
        })
    }
});
var legendCount = 0;
var timeCount = 0;
var layerClickCount = 0;
$("#legendDiv").click(function () {
    legendCount++;
    timeCount = 0;
    layerClickCount = 0;
    layerListCount = 0;
    $("#searchWidget").hide();
    $(".esri-component.esri-time-slider.esri-widget.esri-time-slider__mode--instant.esri-time-slider__layout--compact").hide();
    $('.esri-layer-list__list').css({
        'display': 'none'
    });
    $("#timeSlideButton").css(
        {
            "fill": "#4B5D67"
        });
    $("#timeSlideDiv").css(
        {
            "background-color": ""
        });
    $("#layerListButton").css(
        {
            "fill": "#4B5D67"
        });
    $("#layerListDiv").css(
        {
            "background-color": ""
        });
    if (legendCount % 2 == 0) {
        $("#legendButton").css(
            {
                "fill": ""
            });
        $("#legendDiv").css(
            {
                "background-color": ""
            });
    }
    else {
        $("#legendButton").css(
            {
                "fill": "#F9F9F9 "
            });
        $("#legendDiv").css(
            {
                "background-color": "#4B5D67"
            });
    }
})
$("#legendDiv").hover(function () {
    $("#legendButton").css(
        {
            "fill": "#F9F9F9 "
        });
});
$("#legendDiv").mouseleave(function () {
    if (legendCount % 2 == 0 || legendCount == 0) {
        $("#legendButton").css({
            "fill": "#4B5D67"
        })
    }
    else {
        $("#legendButton").css({
            "fill": "#F9F9F9 "
        })
    }
});
$("#layerListDiv").click(function () {
    layerClickCount++;
    timeCount = 0;
    legendCount = 0;
    clickme = 0;

    $("#searchWidget").hide();
    $(".esri-component.esri-time-slider.esri-widget.esri-time-slider__mode--instant.esri-time-slider__layout--compact").hide();
    $("#timeSlideButton").css(
        {
            "fill": "#4B5D67"
        });
    $("#timeSlideDiv").css(
        {
            "background-color": ""
        });
    $("#legendButton").css(
        {
            "fill": "#4B5D67"
        });
    $("#legendDiv").css(
        {
            "background-color": ""
        });
    if (layerClickCount % 2 == 0) {
        $("#layerListButton").css(
            {
                "fill": ""
            });
        $("#layerListDiv").css(
            {
                "background-color": ""
            });
    }
    else {
        $("#layerListButton").css(
            {
                "fill": "#F9F9F9 "
            });
        $("#layerListDiv").css(
            {
                "background-color": "#4B5D67"
            });
    }
})
$("#layerListDiv").hover(function () {
    $("#layerListButton").css(
        {
            "fill": "#F9F9F9 "
        });
});
$("#layerListDiv").mouseleave(function () {
    if (layerClickCount % 2 == 0 || layerClickCount == 0) {
        $("#layerListButton").css({
            "fill": "#4B5D67"
        })
    }
    else {
        $("#layerListButton").css({
            "fill": "#F9F9F9 "
        })
    }
});
$("#timeSlideDiv").click(function () {
    timeCount++;
    layerClickCount = 0;
    legendCount = 0;
    layerListCount = 0;
    $("#searchWidget").hide();
    $('.esri-layer-list__list').css({
        'display': 'none'
    });
    clickme = 0;

    $("#layerListButton").css(
        {
            "fill": "#4B5D67"
        });
    $("#layerListDiv").css(
        {
            "background-color": ""
        });
    $("#legendButton").css(
        {
            "fill": "#4B5D67"
        });
    $("#legendDiv").css(
        {
            "background-color": ""
        });
    if (timeCount % 2 == 0) {
        $(".esri-component.esri-time-slider.esri-widget.esri-time-slider__mode--instant.esri-time-slider__layout--compact").hide();
        $("#timeSlideButton").css(
            {
                "fill": ""
            });
        $("#timeSlideDiv").css(
            {
                "background-color": ""
            });
    }
    else {
        $(".esri-component.esri-time-slider.esri-widget.esri-time-slider__mode--instant.esri-time-slider__layout--compact").show();
        $("#timeSlideButton").css(
            {
                "fill": "#F9F9F9 "
            });
        $("#timeSlideDiv").css(
            {
                "background-color": "#4B5D67"
            });
    }
})
$("#timeSlideDiv").hover(function () {
    $("#timeSlideButton").css(
        {
            "fill": "#F9F9F9 "
        });
});
$("#timeSlideDiv").mouseleave(function () {
    if (timeCount % 2 == 0 || timeCount == 0) {
        $("#timeSlideButton").css({
            "fill": "#4B5D67"
        })
    }
    else {
        $("#timeSlideButton").css({
            "fill": "#F9F9F9 "
        })
    }
});
$("#homeDiv").hover(function () {

    $("#homeText").css({
        "display": "block"
    })
});
$("#homeDiv").mouseleave(function () {

    $("#homeText").css({
        "display": "none"
    })
});
$("#computerDiv").hover(function () {

    $("#controlText").css({
        "display": "block"
    })
});
$("#computerDiv").mouseleave(function () {

    $("#controlText").css({
        "display": "none"
    })
});
$("#gavelDiv").hover(function () {

    $("#regulationText").css({
        "display": "block"
    })
});
$("#gavelDiv").mouseleave(function () {

    $("#regulationText").css({
        "display": "none"
    })
});

$("#calendarDiv").hover(function () {

    $("#calendarText").css({
        "display": "block"
    })
});
$("#calendarDiv").mouseleave(function () {

    $("#calendarText").css({
        "display": "none"
    })
});
$("#aboutDiv").hover(function () {

    $("#aboutText").css({
        "display": "block"
    })
});
$("#aboutDiv").mouseleave(function () {

    $("#aboutText").css({
        "display": "none"
    })
});
// $("#legendShow").click(function(){
//     legendShowClick++;
//     if(legendShowClick ==1 )
//     {
//         
//     $('.legend').hide();
//     $('#legendsvg').show();
//     $('#closelegend').hide();
//     }
//     else
//     {
//         $('.legend').show();
//     $('#legendsvg').hide();
//     $('#closelegend').show();
//     legendShowClick = 0;

//     }


// })

// function laptopView()
// {
//     if (window.matchMedia("(max-height: 810px)").matches) {
//     $("#dropdownDiv1").show();
//     }
// }
// $("#dropdownDiv1").click(function(){
//     $(".rightPanel").css({
//         "display":"none"
//     });
//     $("#collapse").css({
//         "display":"block"
//     });
//     $("#dropdownDiv1").css({   
//         "display":"none"
//     });
//     $("#toolbar").css({
//         "display":"block" 
//     });
// })
// $("#collapse").click(function(){
//     $("#toolbar").css({
//         "display":"none"
//     });
//     $("#collapse").css({
//         "display":"none"
//     });
//     $("#dropdownDiv1").css({
//         "display":"block"
//     });
//     $(".rightPanel").css({
//         "display":"block"
//     });
// })
// -------------------------------------To clear highlights-------------------------------
function removeHighlight() {
    if (highlightHandle) { // To clear the highlight of building first
        highlightHandle.remove();
        highlightHandle = null;
    }
}



function onClickLandusePieChart(landuse) {


    if (appState.maxYear == 2015) {
        if (landuse == "Residential") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.residential2015);
        }
        if (landuse == "Commercial") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.commercial2015);
        }
        if (landuse == "Educational") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.educational2015);
        } if (landuse == "Industrial") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.industrial2015);
        }
        if (landuse == "Recreational") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.recreational2015);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.commercialResidentialMix2015);
        }
        if (landuse == "Governmental") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.governmental2015);
        }
        if (landuse == "Utilities") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.utilities2015);
        }
        if (landuse == "MixedUse") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.mixedUse2015);
        }

        if (landuse == "Institutional") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.institutional2015);
        }

    }
    else if (appState.maxYear == 2016) {


        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.residential2016);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.commercial2016);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.educational2016);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.industrial2016);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.recreational2016);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.commercialResidentialMix2016);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.governmental2016);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.utilities2016);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.mixedUse2016);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.institutional2016);
        }
    }

    else if (appState.maxYear == 2017) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.residential2017);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.commercial2017);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.educational2017);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.industrial2017);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.recreational2017);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.commercialResidentialMix2017);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.governmental2017);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.utilities2017);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.mixedUse2017);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.institutional2017);
        }
    }
    else if (appState.maxYear == 2018) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.residential2018);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.commercial2018);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.educational2018);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.industrial2018);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.recreational2018);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.commercialResidentialMix2018);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.governmental2018);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.utilities2018);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.mixedUse2018);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.institutional2018);
        }
    }
    else if (appState.maxYear == 2019) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.residential2019);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.commercial2019);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.educational2019);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.industrial2019);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.recreational2019);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.commercialResidentialMix2019);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.governmental2019);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.utilities2019);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.mixedUse2019);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.institutional2019);
        }
    }
    else if (appState.maxYear == 2020) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.residential2020);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.commercial2020);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.educational2020);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.industrial2020);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.recreational2020);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.commercialResidentialMix2020);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.governmental2020);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.utilities2020);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.mixedUse2020);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.institutional2020);
        }
    }
    else if (appState.maxYear == 2021) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.residential2021);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.commercial2021);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.educational2021);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.industrial2021);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.recreational2021);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.commercialResidentialMix2021);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.governmental2021);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.utilities2021);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.mixedUse2021);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.institutional2021);
        }
    }
    else if (appState.maxYear == 2022) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.residential2022);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.commercial2022);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.educational2022);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.industrial2022);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.recreational2022);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.commercialResidentialMix2022);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.governmental2022);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.utilities2022);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.mixedUse2022);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.institutional2022);
        }
    }
    else if (appState.maxYear == 2023) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.residential2023);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.commercial2023);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.educational2023);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.industrial2023);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.recreational2023);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.commercialResidentialMix2023);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.governmental2023);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.utilities2023);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.mixedUse2023);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.institutional2023);
        }
    }
    else if (appState.maxYear == 2024) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.residential2024);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.commercial2024);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.educational2024);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.industrial2024);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.recreational2024);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.commercialResidentialMix2024);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.governmental2024);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.utilities2024);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.mixedUse2024);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.institutional2024);
        }
    }
    else if (appState.maxYear == 2025) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.residential2025);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.commercial2025);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.educational2025);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.industrial2025);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.recreational2025);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.commercialResidentialMix2025);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.governmental2025);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.utilities2025);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.mixedUse2025);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.institutional2025);
        }
    }


}


function onClickTimelinePieChart(timeline) {
    if (appState.maxYear == 2015) {
        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }

    }
    else if (appState.maxYear == 2016) {

        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }
        if (timeline == "2016") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2016);
        }
        if (timeline == "2017") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2017);
        } if (timeline == "2018") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2018);
        }
        if (timeline == "2019") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2019);
        }
        if (timeline == "2020") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2020);
        }
        if (timeline == "2021") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2021);
        }
        if (timeline == "2022") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2022);
        }
        if (timeline == "2023") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2023);
        }

        if (timeline == "2024") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2024);
        }
        if (timeline == "2025") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2025);
        }
    }

    else if (appState.maxYear == 2017) {
        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }
        if (timeline == "2016") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2016);
        }
        if (timeline == "2017") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2017);
        }
    }
    else if (appState.maxYear == 2018) {
        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }
        if (timeline == "2016") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2016);
        }
        if (timeline == "2017") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2017);
        } if (timeline == "2018") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2018);
        }

    }
    else if (appState.maxYear == 2019) {
        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }
        if (timeline == "2016") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2016);
        }
        if (timeline == "2017") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2017);
        } if (timeline == "2018") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2018);
        }
        if (timeline == "2019") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2019);
        }

    }
    else if (appState.maxYear == 2020) {
        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }
        if (timeline == "2016") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2016);
        }
        if (timeline == "2017") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2017);
        } if (timeline == "2018") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2018);
        }
        if (timeline == "2019") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2019);
        }
        if (timeline == "2020") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2020);
        }

    }
    else if (appState.maxYear == 2021) {
        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }
        if (timeline == "2016") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2016);
        }
        if (timeline == "2017") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2017);
        } if (timeline == "2018") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2018);
        }
        if (timeline == "2019") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2019);
        }
        if (timeline == "2020") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2020);
        }
        if (timeline == "2021") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2021);
        }

    }
    else if (appState.maxYear == 2022) {
        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }
        if (timeline == "2016") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2016);
        }
        if (timeline == "2017") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2017);
        } if (timeline == "2018") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2018);
        }
        if (timeline == "2019") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2019);
        }
        if (timeline == "2020") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2020);
        }
        if (timeline == "2021") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2021);
        }
        if (timeline == "2022") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2022);
        }

    }
    else if (appState.maxYear == 2023) {
        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }
        if (timeline == "2016") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2016);
        }
        if (timeline == "2017") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2017);
        } if (timeline == "2018") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2018);
        }
        if (timeline == "2019") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2019);
        }
        if (timeline == "2020") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2020);
        }
        if (timeline == "2021") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2021);
        }
        if (timeline == "2022") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2022);
        }
        if (timeline == "2023") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2023);
        }


    }
    else if (appState.maxYear == 2024) {
        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }
        if (timeline == "2016") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2016);
        }
        if (timeline == "2017") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2017);
        } if (timeline == "2018") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2018);
        }
        if (timeline == "2019") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2019);
        }
        if (timeline == "2020") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2020);
        }
        if (timeline == "2021") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2021);
        }
        if (timeline == "2022") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2022);
        }
        if (timeline == "2023") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2023);
        }

        if (timeline == "2024") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2024);
        }

    }
    else if (appState.maxYear == 2025) {
        if (timeline == "2015") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2015);
        }
        if (timeline == "2016") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2016);
        }
        if (timeline == "2017") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2017);
        } if (timeline == "2018") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2018);
        }
        if (timeline == "2019") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2019);
        }
        if (timeline == "2020") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2020);
        }
        if (timeline == "2021") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2021);
        }
        if (timeline == "2022") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2022);
        }
        if (timeline == "2023") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2023);
        }

        if (timeline == "2024") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2024);
        }
        if (timeline == "2025") {
            removeHighlight();
            highlightHandle = bdgLayerView.highlight(highlightCharts.timeline.timeline2025);
        }
    }


}
function onClickDevelopmentPieChart(development) {

    if (appState.maxYear == 2015) {

        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.completed2015);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.unchanged2015);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.demolished2015);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.underConstruction2015);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.depleted2015);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.planned2015);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.proposed2015);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.underMaintenence2015);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.stopped2015);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.forDemolition2015);
        }
    }
    else if (appState.maxYear == 2016) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.completed2016);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.unchanged2016);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.demolished2016);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.underConstruction2016);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.depleted2016);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.planned2016);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.proposed2016);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.underMaintenence2016);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.stopped2016);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.forDemolition2016);
        }
    }
    else if (appState.maxYear == 2017) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.completed2017);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.unchanged2017);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.demolished2017);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.underConstruction2017);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.depleted2017);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.planned2017);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.proposed2017);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.underMaintenence2017);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.stopped2017);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.forDemolition2017);
        }
    }
    else if (appState.maxYear == 2018) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.completed2018);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.unchanged2018);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.demolished2018);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.underConstruction2018);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.depleted2018);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.planned2018);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.proposed2018);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.underMaintenence2018);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.stopped2018);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.forDemolition2018);
        }
    }
    else if (appState.maxYear == 2019) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.completed2019);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.unchanged2019);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.demolished2019);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.underConstruction2019);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.depleted2019);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.planned2019);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.proposed2019);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.underMaintenence2019);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.stopped2019);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.forDemolition2019);
        }
    }
    else if (appState.maxYear == 2020) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.completed2020);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.unchanged2020);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.demolished2020);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.underConstruction2020);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.depleted2020);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.planned2020);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.proposed2020);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.underMaintenence2020);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.stopped2020);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.forDemolition2020);
        }
    }
    else if (appState.maxYear == 2021) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.completed202021);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.unchanged202021);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.demolished202021);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.underConstruction202021);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.depleted202021);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.planned202021);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.proposed202021);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.underMaintenence202021);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.stopped202021);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.forDemolition202021);
        }
    }
    else if (appState.maxYear == 2022) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.completed2022);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.unchanged2022);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.demolished2022);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.underConstruction2022);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.depleted2022);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.planned2022);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.proposed2022);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.underMaintenence2022);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.stopped2022);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.forDemolition2022);
        }
    }
    else if (appState.maxYear == 2023) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.completed2023);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.unchanged2023);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.demolished2023);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.underConstruction2023);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.depleted2023);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.planned2023);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.proposed2023);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.underMaintenence2023);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.stopped2023);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.forDemolition2023);
        }
    }
    else if (appState.maxYear == 2024) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.completed2024);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.unchanged2024);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.demolished2024);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.underConstruction2024);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.depleted2024);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.planned2024);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.proposed2024);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.underMaintenence2024);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.stopped2024);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.forDemolition2024);
        }
    }
    else if (appState.maxYear == 2025) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.completed2025);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.unchanged2025);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.demolished2025);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.underConstruction2025);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.depleted2025);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.planned2025);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.proposed2025);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.underMaintenence2025);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.stopped2025);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.forDemolition2025);
        }
    }



}

function onClickEncroachmentPieChart(encroachment) {
    removeHighlight();


    if (appState.maxYear == 2015) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.legalChange2015);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.illegalChange2015);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.disputed2015);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.verificationPending2015);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.illegal2015);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.demolished2015);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.forDemolition2015);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.unaffected2015);
        }


    }

    else if (appState.maxYear == 2016) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.legalChange2016);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.illegalChange2016);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.disputed2016);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.verificationPending2016);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.illegal2016);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.demolished2016);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.forDemolition2016);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.unaffected2016);
        }


    }
    else if (appState.maxYear == 2017) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.legalChange2017);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.illegalChange2017);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.disputed2017);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.verificationPending2017);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.illegal2017);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.demolished2017);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.forDemolition2017);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.unaffected2017);
        }


    }
    else if (appState.maxYear == 2018) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.legalChange2018);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.illegalChange2018);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.disputed2018);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.verificationPending2018);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.illegal2018);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.demolished2018);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.forDemolition2018);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.unaffected2018);
        }


    }
    else if (appState.maxYear == 2019) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.legalChange2019);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.illegalChange2019);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.disputed2019);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.verificationPending2019);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.illegal2019);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.demolished2019);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.forDemolition2019);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.unaffected2019);
        }


    }
    else if (appState.maxYear == 2020) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.legalChange2020);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.illegalChange2020);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.disputed2020);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.verificationPending2020);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.illegal2020);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.demolished2020);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.forDemolition2020);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.unaffected2020);
        }


    }
    else if (appState.maxYear == 2021) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.legalChange2021);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.illegalChange2021);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.disputed2021);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.verificationPending2021);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.illegal2021);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.demolished2021);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.forDemolition2021);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.unaffected2021);
        }


    }
    else if (appState.maxYear == 2022) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.legalChange2022);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.illegalChange2022);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.disputed2022);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.verificationPending2022);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.illegal2022);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.demolished2022);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.forDemolition2022);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.unaffected2022);
        }


    }
    else if (appState.maxYear == 2023) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.legalChange2023);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.illegalChange2023);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.disputed2023);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.verificationPending2023);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.illegal2023);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.demolished2023);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.forDemolition2023);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.unaffected2023);
        }


    }
    else if (appState.maxYear == 2024) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.legalChange2024);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.illegalChange2024);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.disputed2024);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.verificationPending2024);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.illegal2024);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.demolished2024);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.forDemolition2024);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.unaffected2024);
        }


    }
    else if (appState.maxYear == 2025) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.legalChange2025);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.illegalChange2025);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.disputed2025);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.verificationPending2025);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.illegal2025);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.demolished2025);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.forDemolition2025);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.unaffected2025);
        }


    }

}

function onClickComplaintsPieChart(complaints) {

    if (appState.maxYear == 2015) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.assigned2015);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.reported2015);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.complaintClosed2015);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.inspected2015);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.demolished2015);
        }

    }
    else if (appState.maxYear == 2016) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2016.assigned2016);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2016.reported2016);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2016.complaintClosed2016);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2016.inspected2016);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2016.demolished2016);
        }

    }
    else if (appState.maxYear == 2017) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2017.assigned2017);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2017.reported2017);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2017.complaintClosed2017);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2017.inspected2017);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2017.demolished2017);
        }

    }
    else if (appState.maxYear == 2018) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2018.assigned2018);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2018.reported2018);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2018.complaintClosed2018);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2018.inspected2018);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2018.demolished2018);
        }

    }
    else if (appState.maxYear == 2019) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2019.assigned2019);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2019.reported2019);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2019.complaintClosed2019);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2019.inspected2019);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2019.demolished2019);
        }

    }
    else if (appState.maxYear == 2020) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2020.assigned2020);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2020.reported2020);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2020.complaintClosed2020);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2020.inspected2020);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2020.demolished2020);
        }

    }
    else if (appState.maxYear == 2021) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2021.assigned2021);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2021.reported2021);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2021.complaintClosed2021);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2021.inspected2021);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2021.demolished2021);
        }

    }
    else if (appState.maxYear == 2022) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2022.assigned2022);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2022.reported2022);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2022.complaintClosed2022);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2022.inspected2022);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.demolished2015);
        }

    }
    else if (appState.maxYear == 2023) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2023.assigned2023);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2023.reported2023);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2023.complaintClosed2023);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2023.inspected2023);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2023.demolished2023);
        }

    }
    else if (appState.maxYear == 2024) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2024.assigned2024);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2024.reported2024);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2024.complaintClosed2024);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2024.inspected2024);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2024.demolished2024);
        }

    }
    else if (appState.maxYear == 2025) {
        if (complaints == "Assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2025.assigned2025);
        }
        if (complaints == "Reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2025.reported2025);
        }
        if (complaints == "Complaint Closed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2025.complaintClosed2025);
        } if (complaints == "Inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2025.inspected2025);
        }
        if (complaints == "Demolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2025.demolished2025);
        }

    }



}

function onClickLanduseBarChart(landuse) {



    if (appState.maxYear == 2015) {


        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.residential2015);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.commercial2015);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.educational2015);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.industrial2015);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.recreational2015);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.commercialResidentialMix2015);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.governmental2015);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.utilities2015);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.mixedUse2015);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.institutional2015);
        }

    }
    else if (appState.maxYear == 2016) {


        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.residential2016);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.commercial2016);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.educational2016);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.industrial2016);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.recreational2016);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.commercialResidentialMix2016);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.governmental2016);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.utilities2016);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.mixedUse2016);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.institutional2016);
        }
    }

    else if (appState.maxYear == 2017) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.residential2017);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.commercial2017);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.educational2017);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.industrial2017);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.recreational2017);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.commercialResidentialMix2017);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.governmental2017);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.utilities2017);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.mixedUse2017);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.institutional2017);
        }
    }
    else if (appState.maxYear == 2018) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.residential2018);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.commercial2018);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.educational2018);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.industrial2018);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.recreational2018);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.commercialResidentialMix2018);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.governmental2018);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.utilities2018);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.mixedUse2018);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.institutional2018);
        }
    }
    else if (appState.maxYear == 2019) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.residential2019);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.commercial2019);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.educational2019);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.industrial2019);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.recreational2019);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.commercialResidentialMix2019);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.governmental2019);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.utilities2019);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.mixedUse2019);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.institutional2019);
        }
    }
    else if (appState.maxYear == 2020) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.residential2020);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.commercial2020);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.educational2020);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.industrial2020);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.recreational2020);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.commercialResidentialMix2020);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.governmental2020);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.utilities2020);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.mixedUse2020);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.institutional2020);
        }
    }
    else if (appState.maxYear == 2021) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.residential2021);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.commercial2021);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.educational2021);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.industrial2021);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.recreational2021);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.commercialResidentialMix2021);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.governmental2021);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.utilities2021);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.mixedUse2021);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.institutional2021);
        }
    }
    else if (appState.maxYear == 2022) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.residential2022);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.commercial2022);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.educational2022);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.industrial2022);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.recreational2022);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.commercialResidentialMix2022);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.governmental2022);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.utilities2022);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.mixedUse2022);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.institutional2022);
        }
    }
    else if (appState.maxYear == 2023) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.residential2023);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.commercial2023);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.educational2023);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.industrial2023);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.recreational2023);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.commercialResidentialMix2023);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.governmental2023);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.utilities2023);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.mixedUse2023);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.institutional2023);
        }
    }
    else if (appState.maxYear == 2024) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.residential2024);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.commercial2024);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.educational2024);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.industrial2024);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.recreational2024);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.commercialResidentialMix2024);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.governmental2024);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.utilities2024);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.mixedUse2024);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.institutional2024);
        }
    }
    else if (appState.maxYear == 2025) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.residential2025);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.commercial2025);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.educational2025);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.industrial2025);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.recreational2025);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.commercialResidentialMix2025);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.governmental2025);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.utilities2025);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.mixedUse2025);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.institutional2025);
        }
    }


}

function onClickDevelopmentAreaBarChart(development) {

    if (appState.maxYear == 2015) {

        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.completed2015);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.unchanged2015);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.demolished2015);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.underConstruction2015);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.depleted2015);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.planned2015);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.proposed2015);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.underMaintenence2015);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.stopped2015);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.forDemolition2015);
        }
    }
    else if (appState.maxYear == 2016) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.completed2016);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.unchanged2016);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.demolished2016);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.underConstruction2016);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.depleted2016);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.planned2016);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.proposed2016);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.underMaintenence2016);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.stopped2016);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.forDemolition2016);
        }
    }
    else if (appState.maxYear == 2017) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.completed2017);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.unchanged2017);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.demolished2017);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.underConstruction2017);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.depleted2017);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.planned2017);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.proposed2017);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.underMaintenence2017);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.stopped2017);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.forDemolition2017);
        }
    }
    else if (appState.maxYear == 2018) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.completed2018);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.unchanged2018);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.demolished2018);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.underConstruction2018);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.depleted2018);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.planned2018);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.proposed2018);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.underMaintenence2018);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.stopped2018);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.forDemolition2018);
        }
    }
    else if (appState.maxYear == 2019) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.completed2019);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.unchanged2019);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.demolished2019);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.underConstruction2019);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.depleted2019);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.planned2019);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.proposed2019);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.underMaintenence2019);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.stopped2019);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.forDemolition2019);
        }
    }
    else if (appState.maxYear == 2020) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.completed2020);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.unchanged2020);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.demolished2020);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.underConstruction2020);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.depleted2020);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.planned2020);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.proposed2020);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.underMaintenence2020);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.stopped2020);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.forDemolition2020);
        }
    }
    else if (appState.maxYear == 2021) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.completed202021);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.unchanged202021);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.demolished202021);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.underConstruction202021);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.depleted202021);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.planned202021);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.proposed202021);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.underMaintenence202021);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.stopped202021);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.forDemolition202021);
        }
    }
    else if (appState.maxYear == 2022) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.completed2022);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.unchanged2022);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.demolished2022);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.underConstruction2022);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.depleted2022);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.planned2022);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.proposed2022);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.underMaintenence2022);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.stopped2022);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.forDemolition2022);
        }
    }
    else if (appState.maxYear == 2023) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.completed2023);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.unchanged2023);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.demolished2023);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.underConstruction2023);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.depleted2023);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.planned2023);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.proposed2023);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.underMaintenence2023);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.stopped2023);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.forDemolition2023);
        }
    }
    else if (appState.maxYear == 2024) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.completed2024);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.unchanged2024);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.demolished2024);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.underConstruction2024);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.depleted2024);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.planned2024);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.proposed2024);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.underMaintenence2024);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.stopped2024);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.forDemolition2024);
        }
    }
    else if (appState.maxYear == 2025) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.completed2025);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.unchanged2025);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.demolished2025);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.underConstruction2025);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.depleted2025);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.planned2025);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.proposed2025);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.underMaintenence2025);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.stopped2025);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.forDemolition2025);
        }
    }

}

function onClickEncroachmentBarChart(encroachment) {

    if (appState.maxYear == 2015) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.legalChange2015);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.illegalChange2015);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.disputed2015);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.verificationPending2015);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.illegal2015);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.demolished2015);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.forDemolition2015);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.unaffected2015);
        }


    }

    else if (appState.maxYear == 2016) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.legalChange2016);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.illegalChange2016);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.disputed2016);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.verificationPending2016);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.illegal2016);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.demolished2016);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.forDemolition2016);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.unaffected2016);
        }


    }
    else if (appState.maxYear == 2017) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.legalChange2017);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.illegalChange2017);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.disputed2017);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.verificationPending2017);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.illegal2017);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.demolished2017);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.forDemolition2017);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.unaffected2017);
        }


    }
    else if (appState.maxYear == 2018) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.legalChange2018);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.illegalChange2018);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.disputed2018);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.verificationPending2018);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.illegal2018);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.demolished2018);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.forDemolition2018);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.unaffected2018);
        }


    }
    else if (appState.maxYear == 2019) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.legalChange2019);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.illegalChange2019);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.disputed2019);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.verificationPending2019);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.illegal2019);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.demolished2019);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.forDemolition2019);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.unaffected2019);
        }


    }
    else if (appState.maxYear == 2020) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.legalChange2020);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.illegalChange2020);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.disputed2020);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.verificationPending2020);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.illegal2020);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.demolished2020);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.forDemolition2020);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.unaffected2020);
        }


    }
    else if (appState.maxYear == 2021) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.legalChange2021);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.illegalChange2021);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.disputed2021);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.verificationPending2021);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.illegal2021);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.demolished2021);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.forDemolition2021);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.unaffected2021);
        }


    }
    else if (appState.maxYear == 2022) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.legalChange2022);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.illegalChange2022);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.disputed2022);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.verificationPending2022);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.illegal2022);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.demolished2022);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.forDemolition2022);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.unaffected2022);
        }


    }
    else if (appState.maxYear == 2023) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.legalChange2023);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.illegalChange2023);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.disputed2023);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.verificationPending2023);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.illegal2023);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.demolished2023);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.forDemolition2023);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.unaffected2023);
        }


    }
    else if (appState.maxYear == 2024) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.legalChange2024);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.illegalChange2024);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.disputed2024);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.verificationPending2024);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.illegal2024);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.demolished2024);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.forDemolition2024);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.unaffected2024);
        }


    }
    else if (appState.maxYear == 2025) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.legalChange2025);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.illegalChange2025);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.disputed2025);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.verificationPending2025);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.illegal2025);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.demolished2025);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.forDemolition2025);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.unaffected2025);
        }


    }
}


function onClickComplaintsBarChart(complaints) {



    if (appState.maxYear == 2015) {

        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.assigned2015);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.reported2015);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.complaintClosed2015);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.inspected2015);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.demolished2015);
        }

    }
    else if (appState.maxYear == 2016) {
        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2016.assigned2016);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2016.reported2016);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2016.complaintClosed2016);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2016.inspected2016);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2016.demolished2016);
        }

    }
    else if (appState.maxYear == 2017) {
        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2017.assigned2017);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2017.reported2017);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2017.complaintClosed2017);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2017.inspected2017);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2017.demolished2017);
        }

    }
    else if (appState.maxYear == 2018) {
        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2018.assigned2018);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2018.reported2018);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2018.complaintClosed2018);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2018.inspected2018);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2018.demolished2018);
        }

    }
    else if (appState.maxYear == 2019) {
        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2019.assigned2019);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2019.reported2019);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2019.complaintClosed2019);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2019.inspected2019);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2019.demolished2019);
        }

    }
    else if (appState.maxYear == 2020) {
        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2020.assigned2020);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2020.reported2020);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2020.complaintClosed2020);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2020.inspected2020);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2020.demolished2020);
        }

    }
    else if (appState.maxYear == 2021) {
        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2021.assigned2021);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2021.reported2021);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2021.complaintClosed2021);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2021.inspected2021);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2021.demolished2021);
        }

    }
    else if (appState.maxYear == 2022) {
        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2022.assigned2022);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2022.reported2022);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2022.complaintClosed2022);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2022.inspected2022);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2015.demolished2015);
        }

    }
    else if (appState.maxYear == 2023) {
        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2023.assigned2023);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2023.reported2023);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2023.complaintClosed2023);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2023.inspected2023);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2023.demolished2023);
        }

    }
    else if (appState.maxYear == 2024) {
        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2024.assigned2024);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2024.reported2024);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2024.complaintClosed2024);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2024.inspected2024);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2024.demolished2024);
        }

    }
    else if (appState.maxYear == 2025) {
        if (complaints == "assigned") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2025.assigned2025);
        }
        if (complaints == "reported") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2025.reported2025);
        }
        if (complaints == "complaintClosed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2025.complaintClosed2025);
        } if (complaints == "inspected") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2025.inspected2025);
        }
        if (complaints == "complaintsDemolished") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.complaints2025.demolished2025);
        }

    }


}

function onClickLanduseAreaPieChart(landuse) {




    if (appState.maxYear == 2015) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.residential2015);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.commercial2015);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.educational2015);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.industrial2015);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.recreational2015);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.commercialResidentialMix2015);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.governmental2015);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.utilities2015);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.mixedUse2015);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.institutional2015);
        }

    }
    else if (appState.maxYear == 2016) {


        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.residential2016);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.commercial2016);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.educational2016);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.industrial2016);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.recreational2016);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.commercialResidentialMix2016);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.governmental2016);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.utilities2016);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.mixedUse2016);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.institutional2016);
        }
    }

    else if (appState.maxYear == 2017) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.residential2017);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.commercial2017);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.educational2017);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.industrial2017);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.recreational2017);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.commercialResidentialMix2017);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.governmental2017);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.utilities2017);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.mixedUse2017);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.institutional2017);
        }
    }
    else if (appState.maxYear == 2018) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.residential2018);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.commercial2018);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.educational2018);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.industrial2018);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.recreational2018);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.commercialResidentialMix2018);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.governmental2018);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.utilities2018);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.mixedUse2018);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.institutional2018);
        }
    }
    else if (appState.maxYear == 2019) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.residential2019);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.commercial2019);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.educational2019);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.industrial2019);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.recreational2019);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.commercialResidentialMix2019);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.governmental2019);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.utilities2019);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.mixedUse2019);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.institutional2019);
        }
    }
    else if (appState.maxYear == 2020) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.residential2020);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.commercial2020);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.educational2020);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.industrial2020);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.recreational2020);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.commercialResidentialMix2020);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.governmental2020);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.utilities2020);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.mixedUse2020);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.institutional2020);
        }
    }
    else if (appState.maxYear == 2021) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.residential2021);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.commercial2021);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.educational2021);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.industrial2021);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.recreational2021);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.commercialResidentialMix2021);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.governmental2021);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.utilities2021);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.mixedUse2021);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.institutional2021);
        }
    }
    else if (appState.maxYear == 2022) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.residential2022);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.commercial2022);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.educational2022);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.industrial2022);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.recreational2022);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.commercialResidentialMix2022);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.governmental2022);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.utilities2022);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.mixedUse2022);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.institutional2022);
        }
    }
    else if (appState.maxYear == 2023) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.residential2023);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.commercial2023);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.educational2023);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.industrial2023);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.recreational2023);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.commercialResidentialMix2023);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.governmental2023);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.utilities2023);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.mixedUse2023);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.institutional2023);
        }
    }
    else if (appState.maxYear == 2024) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.residential2024);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.commercial2024);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.educational2024);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.industrial2024);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.recreational2024);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.commercialResidentialMix2024);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.governmental2024);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.utilities2024);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.mixedUse2024);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.institutional2024);
        }
    }
    else if (appState.maxYear == 2025) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.residential2025);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.commercial2025);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.educational2025);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.industrial2025);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.recreational2025);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.commercialResidentialMix2025);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.governmental2025);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.utilities2025);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.mixedUse2025);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.institutional2025);
        }
    }


}
function onClickLanduseAreaBarChart(landuse) {




    if (appState.maxYear == 2015) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.residential2015);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.commercial2015);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.educational2015);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.industrial2015);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.recreational2015);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.commercialResidentialMix2015);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.governmental2015);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.utilities2015);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.mixedUse2015);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2015.institutional2015);
        }

    }
    else if (appState.maxYear == 2016) {


        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.residential2016);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.commercial2016);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.educational2016);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.industrial2016);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.recreational2016);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.commercialResidentialMix2016);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.governmental2016);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.utilities2016);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.mixedUse2016);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2016.institutional2016);
        }
    }

    else if (appState.maxYear == 2017) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.residential2017);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.commercial2017);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.educational2017);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.industrial2017);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.recreational2017);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.commercialResidentialMix2017);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.governmental2017);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.utilities2017);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.mixedUse2017);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2017.institutional2017);
        }
    }
    else if (appState.maxYear == 2018) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.residential2018);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.commercial2018);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.educational2018);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.industrial2018);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.recreational2018);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.commercialResidentialMix2018);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.governmental2018);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.utilities2018);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.mixedUse2018);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2018.institutional2018);
        }
    }
    else if (appState.maxYear == 2019) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.residential2019);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.commercial2019);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.educational2019);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.industrial2019);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.recreational2019);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.commercialResidentialMix2019);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.governmental2019);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.utilities2019);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.mixedUse2019);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2019.institutional2019);
        }
    }
    else if (appState.maxYear == 2020) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.residential2020);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.commercial2020);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.educational2020);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.industrial2020);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.recreational2020);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.commercialResidentialMix2020);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.governmental2020);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.utilities2020);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.mixedUse2020);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2020.institutional2020);
        }
    }
    else if (appState.maxYear == 2021) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.residential2021);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.commercial2021);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.educational2021);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.industrial2021);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.recreational2021);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.commercialResidentialMix2021);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.governmental2021);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.utilities2021);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.mixedUse2021);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2021.institutional2021);
        }
    }
    else if (appState.maxYear == 2022) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.residential2022);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.commercial2022);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.educational2022);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.industrial2022);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.recreational2022);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.commercialResidentialMix2022);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.governmental2022);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.utilities2022);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.mixedUse2022);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2022.institutional2022);
        }
    }
    else if (appState.maxYear == 2023) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.residential2023);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.commercial2023);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.educational2023);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.industrial2023);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.recreational2023);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.commercialResidentialMix2023);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.governmental2023);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.utilities2023);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.mixedUse2023);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2023.institutional2023);
        }
    }
    else if (appState.maxYear == 2024) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.residential2024);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.commercial2024);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.educational2024);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.industrial2024);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.recreational2024);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.commercialResidentialMix2024);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.governmental2024);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.utilities2024);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.mixedUse2024);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2024.institutional2024);
        }
    }
    else if (appState.maxYear == 2025) {
        if (landuse == "Residential") {
            removeHighlight();

            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.residential2025);
        }
        if (landuse == "Commercial") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.commercial2025);
        }
        if (landuse == "Educational") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.educational2025);
        } if (landuse == "Industrial") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.industrial2025);
        }
        if (landuse == "Recreational") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.recreational2025);
        }
        if (landuse == "Commercial Residential Mix") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.commercialResidentialMix2025);
        }
        if (landuse == "Governmental") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.governmental2025);
        }
        if (landuse == "Utilities") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.utilities2025);
        }
        if (landuse == "MixedUse") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.mixedUse2025);
        }

        if (landuse == "Institutional") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.landuse2025.institutional2025);
        }
    }


}
function onClickDevelopmentAreaPieChart(development) {

    if (appState.maxYear == 2015) {

        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.completed2015);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.unchanged2015);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.demolished2015);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.underConstruction2015);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.depleted2015);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.planned2015);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.proposed2015);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.underMaintenence2015);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.stopped2015);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2015.forDemolition2015);
        }
    }
    else if (appState.maxYear == 2016) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.completed2016);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.unchanged2016);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.demolished2016);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.underConstruction2016);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.depleted2016);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.planned2016);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.proposed2016);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.underMaintenence2016);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.stopped2016);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2016.forDemolition2016);
        }
    }
    else if (appState.maxYear == 2017) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.completed2017);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.unchanged2017);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.demolished2017);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.underConstruction2017);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.depleted2017);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.planned2017);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.proposed2017);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.underMaintenence2017);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.stopped2017);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2017.forDemolition2017);
        }
    }
    else if (appState.maxYear == 2018) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.completed2018);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.unchanged2018);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.demolished2018);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.underConstruction2018);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.depleted2018);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.planned2018);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.proposed2018);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.underMaintenence2018);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.stopped2018);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2018.forDemolition2018);
        }
    }
    else if (appState.maxYear == 2019) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.completed2019);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.unchanged2019);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.demolished2019);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.underConstruction2019);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.depleted2019);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.planned2019);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.proposed2019);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.underMaintenence2019);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.stopped2019);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2019.forDemolition2019);
        }
    }
    else if (appState.maxYear == 2020) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.completed2020);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.unchanged2020);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.demolished2020);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.underConstruction2020);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.depleted2020);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.planned2020);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.proposed2020);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.underMaintenence2020);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.stopped2020);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2020.forDemolition2020);
        }
    }
    else if (appState.maxYear == 2021) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.completed202021);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.unchanged202021);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.demolished202021);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.underConstruction202021);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.depleted202021);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.planned202021);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.proposed202021);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.underMaintenence202021);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.stopped202021);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development202021.forDemolition202021);
        }
    }
    else if (appState.maxYear == 2022) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.completed2022);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.unchanged2022);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.demolished2022);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.underConstruction2022);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.depleted2022);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.planned2022);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.proposed2022);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.underMaintenence2022);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.stopped2022);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2022.forDemolition2022);
        }
    }
    else if (appState.maxYear == 2023) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.completed2023);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.unchanged2023);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.demolished2023);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.underConstruction2023);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.depleted2023);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.planned2023);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.proposed2023);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.underMaintenence2023);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.stopped2023);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2023.forDemolition2023);
        }
    }
    else if (appState.maxYear == 2024) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.completed2024);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.unchanged2024);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.demolished2024);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.underConstruction2024);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.depleted2024);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.planned2024);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.proposed2024);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.underMaintenence2024);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.stopped2024);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2024.forDemolition2024);
        }
    }
    else if (appState.maxYear == 2025) {
        if (development == 'Completed') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.completed2025);
        }
        if (development == 'Unchanged') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.unchanged2025);
        }
        if (development == 'Demolished') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.demolished2025);
        } if (development == 'Under Construction') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.underConstruction2025);
        }
        if (development == 'Depleted') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.depleted2025);
        }
        if (development == 'Planned') {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.planned2025);
        }
        if (development == 'Proposed') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.proposed2025);
        }
        if (development == 'Under Maintenence') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.underMaintenence2025);
        }
        if (development == 'Stopped') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.stopped2025);
        }

        if (development == 'For Demolition') {
            removeHighlight();




            highlightHandle = bdgLayerView.highlight(highlightCharts.development2025.forDemolition2025);
        }
    }



}

function onClickEncroachmentAreaPieChart(encroachment) {
    removeHighlight();


    if (appState.maxYear == 2015) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.legalChange2015);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.illegalChange2015);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.disputed2015);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.verificationPending2015);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.illegal2015);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.demolished2015);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.forDemolition2015);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2015.unaffected2015);
        }


    }

    else if (appState.maxYear == 2016) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.legalChange2016);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.illegalChange2016);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.disputed2016);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.verificationPending2016);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.illegal2016);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.demolished2016);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.forDemolition2016);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2016.unaffected2016);
        }


    }
    else if (appState.maxYear == 2017) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.legalChange2017);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.illegalChange2017);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.disputed2017);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.verificationPending2017);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.illegal2017);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.demolished2017);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.forDemolition2017);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2017.unaffected2017);
        }


    }
    else if (appState.maxYear == 2018) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.legalChange2018);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.illegalChange2018);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.disputed2018);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.verificationPending2018);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.illegal2018);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.demolished2018);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.forDemolition2018);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2018.unaffected2018);
        }


    }
    else if (appState.maxYear == 2019) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.legalChange2019);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.illegalChange2019);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.disputed2019);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.verificationPending2019);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.illegal2019);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.demolished2019);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.forDemolition2019);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2019.unaffected2019);
        }


    }
    else if (appState.maxYear == 2020) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.legalChange2020);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.illegalChange2020);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.disputed2020);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.verificationPending2020);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.illegal2020);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.demolished2020);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.forDemolition2020);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2020.unaffected2020);
        }


    }
    else if (appState.maxYear == 2021) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.legalChange2021);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.illegalChange2021);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.disputed2021);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.verificationPending2021);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.illegal2021);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.demolished2021);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.forDemolition2021);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2021.unaffected2021);
        }


    }
    else if (appState.maxYear == 2022) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.legalChange2022);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.illegalChange2022);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.disputed2022);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.verificationPending2022);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.illegal2022);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.demolished2022);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.forDemolition2022);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2022.unaffected2022);
        }


    }
    else if (appState.maxYear == 2023) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.legalChange2023);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.illegalChange2023);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.disputed2023);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.verificationPending2023);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.illegal2023);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.demolished2023);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.forDemolition2023);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2023.unaffected2023);
        }


    }
    else if (appState.maxYear == 2024) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.legalChange2024);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.illegalChange2024);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.disputed2024);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.verificationPending2024);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.illegal2024);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.demolished2024);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.forDemolition2024);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2024.unaffected2024);
        }


    }
    else if (appState.maxYear == 2025) {
        if (encroachment == "Legal Change") {

            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.legalChange2025);
        }
        if (encroachment == "Illegal Change") {

            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.illegalChange2025);
        }
        if (encroachment == "Disputed") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.disputed2025);
        } if (encroachment == "Verification Pending") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.verificationPending2025);
        }
        if (encroachment == "Illegal") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.illegal2025);
        }
        if (encroachment == "Demolished") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.demolished2025);
        }
        if (encroachment == "For Demolition") {
            removeHighlight();



            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.forDemolition2025);
        }
        if (encroachment == "Unaffected") {
            removeHighlight();


            highlightHandle = bdgLayerView.highlight(highlightCharts.encroachment2025.unaffected2025);
        }


    }


}
function dataTableInfo(selectionResponse) {
    trHTML = '';


    $('#example').DataTable().destroy();

    $('#example').find('tbody').empty();

    selectionResponse.forEach(elements => {


        trHTML += `<tr>
                                <td id=${elements.OBJECTID}>${elements.OBJECTID}</td>
                                <td id=${elements.owner_name}>${elements.owner_name}</td>
                                <td id=${elements.developer_name}>${elements.developer_name}</td>
                                <td id=${elements.date_constructed}>${elements.date_constructed}</td>
                                <td id=${elements.area_name}>${elements.area_name}</td>
                                <td id=${elements.area1}>${elements.area1}</td>
                                <td id=${elements.Description}>${elements.Description}</td>
                                <td id=${elements.address}>${elements.address}</td>
                                </tr>`

    });



    $('#example').find('tbody').append(trHTML);

    $('#example').DataTable({
        "fnRowCallback": function (nRow) {


            $('td', nRow).css('background-color', '#F9F9F9 ');

        },
        "scrollY": true,
        "scrollX": true,

        //   "scrollCollapse": true,
        "scrollY": "14.7vw",
        "scrollCollapse": true,
        "paging": false,

        emptyTable: "No data available in table", // 
        loadingRecords: "Please wait .. ", // default Loading...
        zeroRecords: "No matching records found",
        "autoWidth": true,

    });


}